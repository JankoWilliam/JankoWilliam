<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>伯纳乌VS斯坦普斯</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-02T09:55:01.197Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JankoWilliam</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JankoWilliam&#39;s blog</title>
    <link href="http://yoursite.com/2018/12/29/index/"/>
    <id>http://yoursite.com/2018/12/29/index/</id>
    <published>2018-12-29T13:01:45.000Z</published>
    <updated>2019-01-02T09:55:01.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="敬请期待！"><a href="#敬请期待！" class="headerlink" title="敬请期待！"></a>敬请期待！</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;敬请期待！&quot;&gt;&lt;a href=&quot;#敬请期待！&quot; class=&quot;headerlink&quot; title=&quot;敬请期待！&quot;&gt;&lt;/a&gt;敬请期待！&lt;/h1&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo整合GitHub个人博客</title>
    <link href="http://yoursite.com/2016/06/25/md_%E5%85%B6%E5%AE%83/Hexo%E6%95%B4%E5%90%88GitHub%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/06/25/md_其它/Hexo整合GitHub个人博客/</id>
    <published>2016-06-25T03:01:45.000Z</published>
    <updated>2019-01-02T10:11:01.746Z</updated>
    
    <content type="html"><![CDATA[<h2 id="更新博客："><a href="#更新博客：" class="headerlink" title="更新博客："></a>更新博客：</h2><p>hexo根目录下 Git Bush Here</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h2 id="为博客添加标签项："><a href="#为博客添加标签项：" class="headerlink" title="为博客添加标签项："></a>为博客添加标签项：</h2><a id="more"></a><p>hexo根目录下 Git Bush Here</p><ul><li><p>创建tags文件夹</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure></li><li><p>到<code>安装盘:\hexo\source\tags</code>文件夹下，修改<code>index.md</code>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">title: 标签</span></span><br><span class="line"><span class="function"><span class="title">date</span>: 日期</span></span><br><span class="line"><span class="function"><span class="title">type</span>: "<span class="title">tags</span>"</span></span><br><span class="line"><span class="function"><span class="title">comments</span>: <span class="title">false</span></span></span><br></pre></td></tr></table></figure></li><li><p>为博客添加标签，在md文件头添加：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">title: <span class="title">xxxxx</span>标题</span></span><br><span class="line"><span class="function"><span class="title">tags</span>: </span></span><br><span class="line"><span class="function">- 标签1</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="为博客添加分类项："><a href="#为博客添加分类项：" class="headerlink" title="为博客添加分类项："></a>为博客添加分类项：</h2><p>hexo根目录下 Git Bush Here</p><ul><li><p>创建categories文件夹</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure></li><li><p>到<code>安装盘:\hexo\source\categories</code>文件夹下，修改<code>index.md</code>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">title: 分类</span></span><br><span class="line"><span class="function"><span class="title">date</span>: 日期</span></span><br><span class="line"><span class="function"><span class="title">type</span>: "<span class="title">categories</span>"</span></span><br><span class="line"><span class="function"><span class="title">comments</span>: <span class="title">false</span></span></span><br></pre></td></tr></table></figure></li><li><p>为博客添加标签，在md文件头添加：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">title: <span class="title">xxxxx</span>标题</span></span><br><span class="line"><span class="function"><span class="title">categories</span>: </span></span><br><span class="line"><span class="function">- 类别1</span></span><br></pre></td></tr></table></figure><h2 id="更换博客主题："><a href="#更换博客主题：" class="headerlink" title="更换博客主题："></a>更换博客主题：</h2><ul><li><p>浏览Hexo<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题网站</a>，选取主题复制github上的HTTPS地址，如：<a href="https://github.com/wizardforcel/hexo-theme-cyanstyle.git；" target="_blank" rel="noopener">https://github.com/wizardforcel/hexo-theme-cyanstyle.git；</a></p></li><li><p>hexo根目录下 Git Bush Here：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/wizardforcel/hexo-theme-cyanstyle.git themes/cyanstyle</span><br></pre></td></tr></table></figure><p>下载主题到<code>hexo/themes/cyanstyle</code>文件夹下；</p></li><li><p>记事本打开hexo根目录下<code>_config.yml</code>文件，修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: cyanstyle</span><br></pre></td></tr></table></figure><p>默认主题为 <code>theme：landscape</code>；</p></li><li><p>更新博客既更换了主题。</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;更新博客：&quot;&gt;&lt;a href=&quot;#更新博客：&quot; class=&quot;headerlink&quot; title=&quot;更新博客：&quot;&gt;&lt;/a&gt;更新博客：&lt;/h2&gt;&lt;p&gt;hexo根目录下 Git Bush Here&lt;/p&gt;
&lt;figure class=&quot;highlight cmd&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo clean&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;为博客添加标签项：&quot;&gt;&lt;a href=&quot;#为博客添加标签项：&quot; class=&quot;headerlink&quot; title=&quot;为博客添加标签项：&quot;&gt;&lt;/a&gt;为博客添加标签项：&lt;/h2&gt;
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="others" scheme="http://yoursite.com/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>大数据004——Hadoop</title>
    <link href="http://yoursite.com/2016/03/28/md_%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE004%E2%80%94%E2%80%94Hadoop/"/>
    <id>http://yoursite.com/2016/03/28/md_大数据/大数据004——Hadoop/</id>
    <published>2016-03-28T03:01:45.000Z</published>
    <updated>2019-01-03T04:52:35.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>Hadoop是一个开源框架，它允许在整个集群使用简单编程模型计算机的分布式环境存储并处理大数据。它的目的是从单一的服务器到上千台机器的扩展，每一个台机都可以提供本地计算和存储。</p><h3 id="1-1-什么是大数据？"><a href="#1-1-什么是大数据？" class="headerlink" title="1.1 什么是大数据？"></a>1.1 什么是大数据？</h3><p>大数据是不能用传统的计算技术处理的大型数据集的集合。它不是一个单一的技术或工具，而是涉及的业务和技术的许多领域。大数据包含通过不同设备和应用程序所产生的数据。如这些领域：黑匣子数据、社会化媒体数据、证券交易所数据、电网数据、交通运输数据、搜索引擎数据等。</p><a id="more"></a><p><strong>大数据技术</strong>：大数据技术旨在提供更准确的分析，这可以影响更多的具体决策导致更大的效率、降低成本、并减少了对业务的风险。为了充分利用大数据的力量，需要管理和处理实时结构化和非结构化的海量数据，可以保护数据隐私和安全的基础设施。</p><p><strong>操作大数据</strong>：包括像MongoDB系统，提供业务实时的能力，主要工作是数据捕获和存储互动。NoSQL大数据体系的设计充分利用已经在过去的十年，而让大量的计算，以廉价，高效地运行新的云计算架构的优势。这使得运营大数据工作负载更容易管理，更便宜，更快的实现。一些NoSQL系统可以提供深入了解基于使用最少的编码无需数据科学家和额外的基础架构的实时数据模式。</p><p><strong>分析大数据</strong>：这些包括，如大规模并行处理（MPP）数据库系统和MapReduce提供用于回顾性和复杂的分析，可能触及大部分或全部数据的分析能力的系统。MapReduce提供分析数据的基础上，MapReduce可以按比例增加从单个服务器向成千上万的高端和低端机的互补SQL提供的功能，这是系统的一种新方法。</p><h3 id="1-2-大数据解决方案"><a href="#1-2-大数据解决方案" class="headerlink" title="1.2 大数据解决方案"></a>1.2 大数据解决方案</h3><ul><li><p>传统的企业方法</p><p>在这种方法中，一个企业将有一个计算机存储和处理大数据。对于存储而言，程序员会自己选择的数据库厂商，如Oracle，IBM等的帮助下完成，用户交互使用应用程序进而获取并处理数据存储和分析。</p><p><img src="https://www.yiibai.com/uploads/allimg/141227/1420403157-0.jpg" alt="Big Data Traditional Approach"></p><p>​    这种做法存在局限性：这种方式能完美地处理那些可以由标准的数据库服务器来存储，或直至处理数据的处理器的限制少的大量数据应用程序。但是，当涉及到处理大量的可伸缩数据，这是一个繁忙的任务，只能通过单一的数据库瓶颈来处理这些数据。</p></li><li><p>谷歌的解决方案</p><p>使用一种称为MapReduce的算法谷歌解决了这个问题。这个算法将任务分成小份，并将它们分配到多台计算机，并且从这些机器收集结果并综合，形成了结果数据集。</p></li></ul><p><img src="https://www.yiibai.com/uploads/allimg/141227/1420406125-1.jpg" alt="Google MapReduce"></p><ul><li><p><strong>Hadoop</strong></p><p>使用谷歌提供的解决方案，Doug Cutting和他的团队开发了一个开源项目叫做HADOOP。Hadoop使用的MapReduce算法运行，其中数据在使用其他并行处理的应用程序。总之，Hadoop用于开发可以执行完整的统计分析大数据的应用程序。</p></li></ul><h3 id="1-3-什么是Hadoop？"><a href="#1-3-什么是Hadoop？" class="headerlink" title="1.3 什么是Hadoop？"></a>1.3 什么是Hadoop？</h3><p>Hadoop是使用Java编写，允许分布在集群，使用简单的编程模型的计算机大型数据处理的Apache的开源框架。Hadoop框架应用工程提供跨计算机集群的分布式存储和计算的环境。 Hadoop是专为从单一服务器到上千台机器扩展，每个机器都可以提供本地计算和存储。</p><p>在其核心，Hadoop主要有两个层次，即：</p><ul><li>加工/计算层(MapReduce)，以及</li><li>存储层(Hadoop分布式文件系统)</li></ul><p><img src="https://www.yiibai.com/uploads/allimg/141227/1F3155322-0.jpg" alt="Hadoop Architecture"></p><h4 id="Hadoop的优势"><a href="#Hadoop的优势" class="headerlink" title="Hadoop的优势"></a>Hadoop的优势</h4><ul><li>Hadoop框架允许用户快速地编写和测试的分布式系统。有效并在整个机器和反过来自动分配数据和工作，利用CPU内核的基本平行度。</li><li>Hadoop不依赖于硬件，以提供容错和高可用性（FTHA），而Hadoop库本身已被设计在应用层可以检测和处理故障。</li><li>服务器可以添加或从集群动态删除，Hadoop可继续不中断地运行。</li><li>Hadoop的的另一大优势在于，除了是开源的，因为它是基于Java并兼容所有的平台。</li></ul><h4 id="Hadoop-生态系统"><a href="#Hadoop-生态系统" class="headerlink" title="Hadoop 生态系统"></a>Hadoop 生态系统</h4><p><img src="https://www.yiibai.com/uploads/allimg/201509/1-1509130T21H15.png" alt="img"></p><h2 id="2-Hadoop-HDFS——分布式文件存储系统"><a href="#2-Hadoop-HDFS——分布式文件存储系统" class="headerlink" title="2. Hadoop HDFS——分布式文件存储系统"></a>2. Hadoop HDFS——分布式文件存储系统</h2><p>Hadoop文件系统使用分布式文件系统设计开发。它是运行在普通硬件。不像其他的分布式系统，HDFS是高度容错以及使用低成本的硬件设计。HDFS拥有超大型的数据量，并提供更轻松地访问。为了存储这些庞大的数据，这些文件都存储在多台机器。这些文件都存储以冗余的方式来拯救系统免受可能的数据损失，在发生故障时。 HDFS也使得可用于并行处理的应用程序。</p><h3 id="2-1-HDFS架构"><a href="#2-1-HDFS架构" class="headerlink" title="2.1 HDFS架构"></a>2.1 HDFS架构</h3><p><img src="https://www.yiibai.com/uploads/allimg/141228/1000235536-0.jpg" alt="HDFS Architecture"></p><h3 id="2-2-HDFS-数据存储单元（block）"><a href="#2-2-HDFS-数据存储单元（block）" class="headerlink" title="2.2 HDFS 数据存储单元（block）"></a>2.2 HDFS 数据存储单元（block）</h3><ol><li>文件被切分成固定大小的数据块block </li></ol><ul><li><p>默认数据块大小为128MB (hadoop2.x)，可自定义配置；</p></li><li><p>若文件大小不到128MB ，则单独存成一个block；</p></li></ul><ol start="2"><li>一个文件存储方式</li></ol><ul><li><p>按大小被切分成若干个block ，存储到不同节点上；</p></li><li><p>默认情况下每个block都有3个副本；</p></li></ul><ol start="3"><li><p>Block大小和副本数通过Client端上传文件时设置，文件上传成功后副本数可以变更，Block Size不可变更</p></li><li><p>hdfs存储模型：字节</p><p>文件线性切割成块（Block）:偏移量 offset （byte）；Block分散存储在集群节点中；单一文件Block大小一致，文件与文件可以不一致；Block可以设置副本数，副本分散在不同节点中；</p></li><li><p>副本数不要超过节点数量</p><p>文件上传可以设置Block大小和副本数；已上传的文件Block副本数可以调整，大小不变；只支持一次写入多次读取，同一时刻只有一个写入者；可以append追加数据。</p></li></ol><h3 id="2-3-NameNode"><a href="#2-3-NameNode" class="headerlink" title="2.3 NameNode"></a>2.3 NameNode</h3><ol><li><p>NameNode主要功能：</p><p>•    接受客户端的读/写服务</p><p>•    收集DataNode汇报的Block列表信息</p></li><li><p>基于内存存储 ：不会和磁盘发生交换</p><p>•    只存在内存中</p><p>•    持久化</p></li><li><p>NameNode保存metadata元数据信息</p><p>•    文件owership(归属)和permissions(权限)</p><p>•    文件大小，时间</p><p>•    （Block列表B1+B2+..：Block偏移量）</p><p>•    Block保存在哪个DataNode位置信息（由DataNode启动时上报,不保存）</p></li><li><p>NameNode持久化</p><p>•    NameNode的metadate信息在启动后会加载到内存</p><p>•    metadata存储到磁盘文件名为”fsimage”</p><p>•    Block的位置信息不会保存到fsimage</p><p>•    edits记录对metadata的操作日志</p></li></ol><ul><li><p>fsimage保存了最新的元数据检查点,类似快照；</p></li><li><p>editslog 保存自最新检查点后的元信息变化，从最新检查点后，hadoop将对每个文件的操作都保存在edits中。客户端修改文件时候，先写到editlog，成功后才更新内存中的metadata信息。</p></li></ul><h3 id="2-4-DataNode"><a href="#2-4-DataNode" class="headerlink" title="2.4 DataNode"></a>2.4 DataNode</h3><ul><li>本地磁盘目录存储数据（Block），文件形式；</li><li>同时存储Block的元数据信息文件；</li><li>启动DN进程的时候会向NameNode汇报block信息；</li><li>通过向NN发送心跳保持与其联系（3秒一次），如果NN 10分钟没有收到DN的心跳，则认为其已经lost，并copy其上的block到其它DN。</li></ul><h3 id="2-5-SecondaryNameNode"><a href="#2-5-SecondaryNameNode" class="headerlink" title="2.5 SecondaryNameNode"></a>2.5 SecondaryNameNode</h3><p>它的主要工作是帮助NN合并edits log文件，减少NN启动时间,它不是NN的备份（但可以做备份)。</p><p><strong>SNN执行合并时间和机制：</strong></p><ul><li>根据配置文件设置的时间间隔fs.checkpoint.period 默认3600秒。</li><li>根据配置文件设置edits log大小 fs.checkpoint.size 规定edits文件的最大值默认是64MB</li></ul><h3 id="2-6-SecondaryNameNode-SNN合并流程"><a href="#2-6-SecondaryNameNode-SNN合并流程" class="headerlink" title="2.6 SecondaryNameNode SNN合并流程"></a>2.6 SecondaryNameNode SNN合并流程</h3><p><img src="https://images2018.cnblogs.com/blog/1277628/201804/1277628-20180417094934514-1799608247.png" alt="img"></p><p>首先是NN中的Fsimage和edits文件通过网络拷贝，到达SNN服务器中，拷贝的同时，用户的实时在操作数据，那么NN中就会从新生成一个edits来记录用户的操作，而另一边的SＮＮ将拷贝过来的edits和fsimage进行合并，合并之后就替换NN中的fsimage。之后NN根据fsimage进行操作（当然每隔一段时间就进行替换合并，循环）。当然新的edits与合并之后传输过来的fsimage会在下一次时间内又进行合并。</p><h3 id="2-7-Block的副本放置策略"><a href="#2-7-Block的副本放置策略" class="headerlink" title="2.7 Block的副本放置策略"></a>2.7 Block的副本放置策略</h3><p><img src="http://www.linuxidc.com/upload/2015_06/150606062674481.png" alt="img"></p><ul><li>第一个副本：放置在上传文件的DN；如果是集群外提交，则随机挑选一台磁盘不太满，CPU不太忙的节点。</li><li>第二个副本：放置在于第一个副本不同的机架的节点上。</li><li>第三个副本：与第二个副本相同机架的不同节点。</li><li>更多副本：随机节点</li></ul><h3 id="2-8-HDFS读写流程"><a href="#2-8-HDFS读写流程" class="headerlink" title="2.8 HDFS读写流程"></a>2.8 HDFS读写流程</h3><h4 id="2-8-1-在HDFS读操作"><a href="#2-8-1-在HDFS读操作" class="headerlink" title="2.8.1 在HDFS读操作"></a>2.8.1 在HDFS读操作</h4><p>数据读取请求将由 HDFS，NameNode和DataNode来服务。让我们把读取器叫 “客户”。下图描绘了文件的读取操作在 Hadoop 中：</p><p><img src="https://www.yiibai.com/uploads/allimg/201509/1-1509131002351I.png" alt="img"></p><ol><li>客户端启动通过调用文件系统对象的 open() 方法读取请求; 它是 <strong>DistributedFileSystem</strong> 类型的对象。</li><li>此对象使用 RPC 连接到 namenode 并获取的元数据信息，如该文件的块的位置。 请注意，这些地址是文件的前几个块。</li><li>响应该元数据请求，具有该块副本的 DataNodes 地址被返回。</li><li>一旦接收到 DataNodes 的地址，FSDataInputStream 类型的一个对象被返回到客户端。 FSDataInputStream 包含 DFSInputStream 这需要处理交互 DataNode 和 NameNode。在上图所示的步骤4，客户端调用 read() 方法，这将导致 DFSInputStream 建立与第一个 DataNode 文件的第一个块连接。</li><li>以数据流的形式读取数据，其中客户端多次调用 “read() ” 方法。 read() 操作这个过程一直持续，直到它到达块结束位置。</li><li>一旦到模块的结尾，DFSInputStream 关闭连接，移动定位到下一个 DataNode 的下一个块</li><li>一旦客户端已读取完成后，它会调用 close()方法。</li></ol><h4 id="2-8-2-在HDFS写操作"><a href="#2-8-2-在HDFS写操作" class="headerlink" title="2.8.2 在HDFS写操作"></a>2.8.2 在HDFS写操作</h4><p><img src="https://www.yiibai.com/uploads/allimg/201509/1-15091310030Xa.png" alt="img"></p><ol><li>客户端通过调用 DistributedFileSystem对象的 create() 方法创建一个新的文件，并开始写操作 - 在上面的图中的步骤1</li><li>DistributedFileSystem对象使用 RPC 调用连接到 NameNode，并启动新的文件创建。但是，此文件创建操作不与文件任何块相关联。NameNode 的责任是验证文件(其正被创建的)不存在，并且客户端具有正确权限来创建新文件。如果文件已经存在，或者客户端不具有足够的权限来创建一个新的文件，则抛出 IOException 到客户端。否则操作成功，并且该文件新的记录是由 NameNode 创建。</li><li>一旦 NameNode 创建一条新的记录，返回FSDataOutputStream 类型的一个对象到客户端。客户端使用它来写入数据到 HDFS。数据写入方法被调用(图中的步骤3)。</li><li>FSDataOutputStream包含DFSOutputStream对象，它使用 DataNodes 和 NameNode 通信后查找。当客户机继续写入数据，DFSOutputStream 继续创建这个数据包。这些数据包连接排队到一个队列被称为 DataQueue</li><li>还有一个名为 DataStreamer 组件，用于消耗DataQueue。DataStreamer 也要求 NameNode 分配新的块，拣选 DataNodes 用于复制。</li><li>现在，复制过程始于使用 DataNodes 创建一个管道。 在我们的例子中，选择了复制水平3，因此有 3 个 DataNodes 管道。</li><li>所述 DataStreamer 注入包分成到第一个 DataNode 的管道中。</li><li>在每个 DataNode 的管道中存储数据包接收并同样转发在第二个 DataNode 的管道中。</li><li>另一个队列，“Ack Queue”是由 DFSOutputStream 保持存储，它们是 DataNodes 等待确认的数据包。</li><li>一旦确认在队列中的分组从所有 DataNodes 已接收在管道，它从 ‘Ack Queue’ 删除。在任何 DataNode 发生故障时，从队列中的包重新用于操作。</li><li>在客户端的数据写入完成后，它会调用close()方法(第9步图中)，调用close()结果进入到清理缓存剩余数据包到管道之后等待确认。</li><li>一旦收到最终确认，NameNode 连接告诉它该文件的写操作完成。</li></ol><h2 id="3-Hadoop安装（伪分布式搭建）"><a href="#3-Hadoop安装（伪分布式搭建）" class="headerlink" title="3. Hadoop安装（伪分布式搭建）"></a>3. Hadoop安装（伪分布式搭建）</h2><h3 id="3-1-jdk安装，配置环境变量"><a href="#3-1-jdk安装，配置环境变量" class="headerlink" title="3.1 jdk安装，配置环境变量"></a>3.1 jdk安装，配置环境变量</h3><p>jdk安装略过，配置环境变量（局部变量版）：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 html]# vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>插入：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/usr/java/jdk1.<span class="number">8</span>.<span class="number">0</span>_191-amd64</span><br><span class="line"><span class="built_in">PATH</span>=$<span class="built_in">PATH</span>:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure><h3 id="3-2-ssh免密钥（本机）"><a href="#3-2-ssh免密钥（本机）" class="headerlink" title="3.2 ssh免密钥（本机）"></a>3.2 ssh免密钥（本机）</h3><p>SSH设置需要在集群上做不同的操作，如启动，停止，分布式守护shell操作。认证不同的Hadoop用户，需要一种用于Hadoop用户提供的公钥/私钥对，并用不同的用户共享。</p><p>下面的命令用于生成使用SSH键值对。复制公钥形成 id_rsa.pub 到authorized_keys 文件中，并提供拥有者具有authorized_keys文件的读写权限。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t dsa -P '' -f ~/.ssh/id_dsa</span><br><span class="line">cat ~/.ssh/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><h3 id="3-3-上传hadoop-tar-gz到服务器"><a href="#3-3-上传hadoop-tar-gz到服务器" class="headerlink" title="3.3 上传hadoop.tar.gz到服务器"></a>3.3 上传hadoop.tar.gz到服务器</h3><ul><li><p>解压部署包到指定安装目录下；</p></li><li><p>在~/.bashrc 文件中设置 Hadoop 环境变量：</p></li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_PREFIX=/usr/hadoop-<span class="number">2</span>.<span class="number">6</span>.<span class="number">5</span></span><br><span class="line"><span class="built_in">PATH</span>=$<span class="built_in">PATH</span>:$JAVA_HOME/bin:$HADOOP_PREFIX/bin:$HADOOP_PREFIX/sbin</span><br></pre></td></tr></table></figure><ul><li>确保Hadoop安装正常：</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 www.shsxt.com]# hadoop version</span><br></pre></td></tr></table></figure><p>会出现：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Hadoop <span class="number">2</span>.<span class="number">6</span>.<span class="number">5</span></span><br><span class="line">Subversion Unknown -r Unknown</span><br><span class="line">Compiled by root on <span class="number">2017</span>-<span class="number">05</span>-<span class="number">24</span>T14:<span class="number">32</span>Z</span><br><span class="line">Compiled with protoc <span class="number">2</span>.<span class="number">5</span>.<span class="number">0</span></span><br><span class="line">From source with checksum f05c9fa095a395faa9db9f7ba5d754</span><br><span class="line">This command was run using /usr/hadoop-<span class="number">2</span>.<span class="number">6</span>.<span class="number">5</span>/share/hadoop/common/hadoop-common-<span class="number">2</span>.<span class="number">6</span>.<span class="number">5</span>.jar</span><br></pre></td></tr></table></figure><ul><li><p>Hadoop配置</p><p>找到位置“$HADOOP_HOME/etc/hadoop”下找到所有Hadoop配置文件，这是需要根据Hadoop基础架构进行更改这些配置文件：</p><ul><li><p>配置hadoop-env.sh：为了使用Java开发Hadoop程序，必须用java在系统中的位置替换JAVA_HOME值并重新设置hadoop-env.sh文件的java环境变量：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/usr/java/jdk1.<span class="number">8</span>.<span class="number">0</span>_191-amd64</span><br></pre></td></tr></table></figure></li><li><p>配置core-site.xml：core-site.xml文件中包含如读/写缓冲器用于Hadoop的实例的端口号的信息，分配给文件系统存储，用于存储所述数据存储器的限制和大小：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- hadoop所在系统IP，或localhost，或host主机名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://node01:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定中转文件夹 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/hadooplocal<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置hdfs-site.xml：hdfs-site.xml 文件中包含如复制数据的值，NameNode路径的信息，本地文件系统的数据节点的路径，这意味着是存储Hadoop基础工具的地方：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 副本个数，默认3个 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node01:50090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置slaves（datanode节点）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node01</span><br></pre></td></tr></table></figure></li></ul></li><li><p>格式化 hdfs ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-dfs.sh</span><br></pre></td></tr></table></figure></li><li><p>查看服务进程启动了么？ jps</p><p>a)   SecondaryNameNode</p><p>b)   NameNode</p><p>c)   DataNode</p><p>d)   Jps</p></li><li><p>访问 node01:50070 （windows指定了host主机明和IP），确保防火墙关闭（service iptables stop）；</p><p><img src="D:\011_MegaData01\003 总览\Hadoop002.png" alt="Hadoop002"></p><p>显示如下数据：</p><p><img src="D:\011_MegaData01\003 总览\Hadoop003.PNG" alt="Hadoop003"></p></li></ul><h3 id="3-4-hdfs-dfs指令"><a href="#3-4-hdfs-dfs指令" class="headerlink" title="3.4 hdfs dfs指令"></a>3.4 hdfs dfs指令</h3><ul><li>hdfs dfs -mkdir /user：创建文件夹user；</li><li>hdfs dfs -ls /user：遍历列举文件夹user；</li><li>hdfs  dfs -put fileName[本地文件名] PATH[hdfs的文件路径]：上传文件；</li><li>hdfs dfs -du [-s][-h]URI[URI …] 显示文件(夹)大小；</li><li>hdfs dfs -rm -r /user ：删除文件夹user；</li><li>hdfs  dfs -get fileName[hdf的文件名] PATH[指定本地路径及文件名]：下载文件；</li></ul><h3 id="3-5-hdfs-dfs测试"><a href="#3-5-hdfs-dfs测试" class="headerlink" title="3.5 hdfs dfs测试"></a>3.5 hdfs dfs测试</h3><ol><li><p>准备本地待存储的文件：</p><p>产生100000条数据：for i in <code>seq 100000</code>;do  echo “hello hadoop $i” &gt;&gt; test.txt;done</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r--. 1 root root 1888895 Dec 23 03:36 test.txt</span><br></pre></td></tr></table></figure><p>容量为1.8MB；</p></li><li><p>上传至hdfs：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]# hdfs dfs -put test.txt /user/text01.txt</span><br></pre></td></tr></table></figure></li><li><p>显示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]# hdfs dfs -ls /user</span><br><span class="line">Found 1 items</span><br><span class="line">-rw-r--r--   3 root supergroup    1888895 2018-12-23 03:38 /user/text01.txt</span><br></pre></td></tr></table></figure><p><img src="D:\011_MegaData01\003 总览\Hadoop004.PNG" alt="Hadoop004"></p><p>默认数据块大小为128MB，所以只分配一个block块；</p></li><li><p>指定block大小为1MB上传文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]# hdfs dfs -D dfs.blocksize=1048576 -put test.txt /user/test02.txt</span><br></pre></td></tr></table></figure></li><li><p>显示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]# hdfs dfs -ls /user</span><br><span class="line">Found 2 items</span><br><span class="line">-rw-r--r--   3 root supergroup    1888895 2018-12-23 03:48 /user/test02.txt</span><br><span class="line">-rw-r--r--   3 root supergroup    1888895 2018-12-23 03:38 /user/text01.txt</span><br></pre></td></tr></table></figure><p><img src="D:\011_MegaData01\003 总览\Hadoop005.PNG" alt="Hadoop005"></p><p>因为指定了block块大小为1MB，所以分配了两个block块。</p></li></ol><h2 id="4-Windows下Java开发环境整合hdfs"><a href="#4-Windows下Java开发环境整合hdfs" class="headerlink" title="4. Windows下Java开发环境整合hdfs"></a>4. Windows下Java开发环境整合hdfs</h2><h3 id="4-1-windows上部署hadoop包"><a href="#4-1-windows上部署hadoop包" class="headerlink" title="4.1 windows上部署hadoop包"></a>4.1 windows上部署hadoop包</h3><ul><li><p>解压部署hadoop包；</p></li><li><p>bin目录下需具备如下文件：</p><p><img src="D:\011_MegaData01\003 总览\Hadoop006.PNG" alt="Hadoop006"></p></li><li><p>将bin目录下的hadoop.dll 放到 c:/windows/system32下；</p></li><li><p>windows环境变量配置:</p><p>HADOOP_HOME = F:\hadoop-2.6.5</p><p>HADOOP_USER_NAME = root</p></li><li><p>eclipse插件：将以hadoop-eclipse-plugin-2.6.0.jar包放入eclipse的plugins文件夹中；</p><p>启动eclipse：出现界面如下：</p><p><img src="D:\011_MegaData01\003 总览\Hadoop007.png" alt="Hadoop007"></p><p>新建Location：</p><p><img src="D:\011_MegaData01\003 总览\Hadoop008.PNG" alt="Hadoop008"></p><p>建立连接成功：</p><p><img src="D:\011_MegaData01\003 总览\Hadoop009.png" alt="Hadoop009"></p></li></ul><h3 id="4-2-HDFS-API测试："><a href="#4-2-HDFS-API测试：" class="headerlink" title="4.2 HDFS API测试："></a>4.2 HDFS API测试：</h3><p>请将linux下hadoop中：core-site.xml与hdfs-site.xml文件导入到java项目src目录下；</p><p>创建测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HdfsTest</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Configuration config;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> FileSystem fs;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//实例化配置</span></span><br><span class="line">config = <span class="keyword">new</span> Configuration();</span><br><span class="line">fs = FileSystem.get(config);</span><br><span class="line"><span class="comment">//创建删除文件夹目录</span></span><br><span class="line"><span class="comment">//mk_deldir();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//上传文件</span></span><br><span class="line"><span class="comment">//uploadfiles();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下载文件</span></span><br><span class="line"><span class="comment">//downloadfiles();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查看文件详细信息</span></span><br><span class="line">ListFilestatus();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//合并小文件到hdfs</span></span><br><span class="line"><span class="comment">//seqfile();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// block();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">seqfile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">File dir = <span class="keyword">new</span> File(<span class="string">"D:/123"</span>);</span><br><span class="line">Path path = <span class="keyword">new</span> Path(<span class="string">"/jjcc/seq123"</span>);</span><br><span class="line">SequenceFile.Writer writer = SequenceFile.createWriter(fs, config, path, Text.class, Text.class, CompressionType.NONE);</span><br><span class="line"><span class="keyword">for</span> (File ff : dir.listFiles()) &#123;</span><br><span class="line">writer.append(<span class="keyword">new</span> Text(ff.getName()), <span class="keyword">new</span> Text(FileUtils.readFileToString(ff, <span class="string">"utf-8"</span>)));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"success !"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ListFilestatus</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">Path path = <span class="keyword">new</span> Path(<span class="string">"/java22"</span>);</span><br><span class="line">FileStatus[] fileStatus = fs.listStatus(path);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fileStatus.length; i++) &#123;</span><br><span class="line">FileStatus status = fileStatus[i];</span><br><span class="line">System.out.println(</span><br><span class="line">status.getOwner()+<span class="string">"\t"</span>+</span><br><span class="line">        status.getAccessTime()+<span class="string">"\t"</span>+</span><br><span class="line">status.getModificationTime()+<span class="string">"\t"</span>+</span><br><span class="line">        status.getBlockSize()/<span class="number">1024</span>/<span class="number">1024</span>+<span class="string">"MB \t"</span>+</span><br><span class="line">status.getPath()</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">downloadfiles</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//要下载的源数据文件放在哪</span></span><br><span class="line">File files = <span class="keyword">new</span> File(<span class="string">"D:/hadoopDownload/11.pdf"</span>);</span><br><span class="line"><span class="comment">//要下载的数据到hdfs的哪个地方</span></span><br><span class="line">Path path = <span class="keyword">new</span> Path(<span class="string">"/java22/1.3"</span>);</span><br><span class="line"><span class="comment">//流  下载==读流程 FSDataInt..</span></span><br><span class="line">FSDataInputStream in = fs.open(path);</span><br><span class="line">FileOutputStream out = <span class="keyword">new</span> FileOutputStream(files);</span><br><span class="line">IOUtils.copyBytes(in, out, config);</span><br><span class="line">System.out.println(<span class="string">"下载成功"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uploadfiles</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//要上传的源数据文件在哪</span></span><br><span class="line">File files = <span class="keyword">new</span> File(<span class="string">"D:/大数据001——Linux.pdf"</span>);</span><br><span class="line"><span class="comment">//要上传到hdfs的哪个地方</span></span><br><span class="line">Path path = <span class="keyword">new</span> Path(<span class="string">"/java22/1.3"</span>);</span><br><span class="line"><span class="comment">//流  上传==写流程 FSDataOut..</span></span><br><span class="line">FSDataOutputStream out = fs.create(path);</span><br><span class="line">IOUtils.copyBytes(<span class="keyword">new</span> FileInputStream(files), out, config);</span><br><span class="line">System.out.println(<span class="string">"上传成功"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mk_deldir</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//指定要创建的目录路径</span></span><br><span class="line">Path path = <span class="keyword">new</span> Path(<span class="string">"/java22"</span>);</span><br><span class="line"><span class="keyword">if</span>(fs.exists(path))&#123;</span><br><span class="line">fs.delete(path,<span class="keyword">true</span>);</span><br><span class="line">System.out.println(<span class="string">"文件目录存在 已删除"</span>);</span><br><span class="line">&#125;</span><br><span class="line">fs.mkdirs(path);</span><br><span class="line">System.out.println(<span class="string">"创建文件夹目录操作成功~"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">block</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Path ifile = <span class="keyword">new</span> Path(<span class="string">"/jjcc/test.txt"</span>);</span><br><span class="line">FileStatus file = fs.getFileStatus(ifile );</span><br><span class="line"><span class="comment">//获取block的location信息 HDFS分布式文件存储系统根据其偏移量的位置信息来读取其内容</span></span><br><span class="line">BlockLocation[] blk = fs.getFileBlockLocations(file , <span class="number">0</span>, file.getLen());</span><br><span class="line"><span class="comment">//for (BlockLocation bb : blk) &#123;</span></span><br><span class="line"><span class="comment">//System.out.println(bb);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">FSDataInputStream input = fs.open(ifile);</span><br><span class="line"><span class="comment">//System.out.println((char)input.readByte());</span></span><br><span class="line"><span class="comment">//System.out.println((char)input.readByte());</span></span><br><span class="line"><span class="comment">//System.out.println((char)input.readByte());</span></span><br><span class="line"><span class="comment">//System.out.println((char)input.readByte());</span></span><br><span class="line"><span class="comment">//System.out.println((char)input.readByte());</span></span><br><span class="line"><span class="comment">//System.out.println((char)input.readByte());</span></span><br><span class="line"><span class="comment">//System.out.println((char)input.readByte());</span></span><br><span class="line"><span class="comment">//System.out.println((char)input.readByte());</span></span><br><span class="line"><span class="comment">//System.out.println((char)input.readByte());</span></span><br><span class="line"><span class="comment">//System.out.println((char)input.readByte());</span></span><br><span class="line"><span class="comment">//System.out.println((char)input.readByte());</span></span><br><span class="line"><span class="comment">//System.out.println((char)input.readByte());</span></span><br><span class="line"><span class="comment">//System.out.println((char)input.readByte());</span></span><br><span class="line"><span class="comment">//System.out.println((char)input.readByte());</span></span><br><span class="line"><span class="comment">////指定从哪个offset的位置偏移量来读</span></span><br><span class="line">input.seek(<span class="number">1048576</span>);</span><br><span class="line">System.out.println((<span class="keyword">char</span>)input.readByte());</span><br><span class="line">System.out.println((<span class="keyword">char</span>)input.readByte());</span><br><span class="line">System.out.println((<span class="keyword">char</span>)input.readByte());</span><br><span class="line">input.seek(<span class="number">1048576</span>);</span><br><span class="line">System.out.println((<span class="keyword">char</span>)input.readByte());</span><br><span class="line">System.out.println((<span class="keyword">char</span>)input.readByte());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="D:\011_MegaData01\003 总览\Hadoop010.png" alt="Hadoop010"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h2&gt;&lt;p&gt;Hadoop是一个开源框架，它允许在整个集群使用简单编程模型计算机的分布式环境存储并处理大数据。它的目的是从单一的服务器到上千台机器的扩展，每一个台机都可以提供本地计算和存储。&lt;/p&gt;
&lt;h3 id=&quot;1-1-什么是大数据？&quot;&gt;&lt;a href=&quot;#1-1-什么是大数据？&quot; class=&quot;headerlink&quot; title=&quot;1.1 什么是大数据？&quot;&gt;&lt;/a&gt;1.1 什么是大数据？&lt;/h3&gt;&lt;p&gt;大数据是不能用传统的计算技术处理的大型数据集的集合。它不是一个单一的技术或工具，而是涉及的业务和技术的许多领域。大数据包含通过不同设备和应用程序所产生的数据。如这些领域：黑匣子数据、社会化媒体数据、证券交易所数据、电网数据、交通运输数据、搜索引擎数据等。&lt;/p&gt;
    
    </summary>
    
      <category term="大数据" scheme="http://yoursite.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="大数据" scheme="http://yoursite.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>大数据003——nginx</title>
    <link href="http://yoursite.com/2016/03/27/md_%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE003%E2%80%94%E2%80%94nginx/"/>
    <id>http://yoursite.com/2016/03/27/md_大数据/大数据003——nginx/</id>
    <published>2016-03-27T03:01:45.000Z</published>
    <updated>2019-01-03T04:52:29.408Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-虚拟主机"><a href="#1-虚拟主机" class="headerlink" title="1. 虚拟主机"></a>1. 虚拟主机</h2><p>虚拟主机是指在网络服务器上分出一定的磁盘空间，用户可以租用此部分空间，以供用户放置站点及应用组件，提供必要的数据存放和传输功能。</p><p>nginx可以配置基于域名和基于端口的虚拟主机：</p><h3 id="1-1-基于域名的虚拟主机"><a href="#1-1-基于域名的虚拟主机" class="headerlink" title="1.1 基于域名的虚拟主机"></a>1.1 基于域名的虚拟主机</h3><p>编辑/usr/local/nginx/conf（注意是安装目录，非源码包目录）下的nginx.conf：</p><a id="more"></a><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">http &#123; </span><br><span class="line">    upstream web01&#123; </span><br><span class="line">        server node02; </span><br><span class="line">&#125; </span><br><span class="line">upstream web02&#123; </span><br><span class="line">        server node03; </span><br><span class="line">     &#125; </span><br><span class="line"> server &#123; </span><br><span class="line">        listen 80; </span><br><span class="line">//访问mydomain1.com的时候，会把请求导到web01的服务器组里</span><br><span class="line">server_name  mydomain1.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://web01;</span><br><span class="line">        &#125;</span><br><span class="line">&#125; </span><br><span class="line">    server &#123; </span><br><span class="line">        listen 80; </span><br><span class="line">//访问mydomain2.com的时候，会把请求导到web02的服务器组里</span><br><span class="line">server_name  mydomain2.com; </span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://web02;</span><br><span class="line">        &#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于域名的虚拟机主机 在模拟应用场景时，需要在windows系统的hosts文件里配置域名映射。</p><p>编辑C:\Windows\System32\drivers\etc\下的hosts文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.168.142.11 mydomain1.com</span><br><span class="line">192.168.142.11 mydomain2.com</span><br></pre></td></tr></table></figure><p>注意：已在Linux虚拟机端/etc/下的hosts编辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.142.11 node01</span><br><span class="line">192.168.142.12 node02</span><br><span class="line">192.168.142.13 node03</span><br></pre></td></tr></table></figure><p>启动nginx后，分别访问mydomain1.com ,mydomain2.com：</p><p><img src="https://img-blog.csdnimg.cn/20181220210308720.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM0MDQ1NDQ0,size_16,color_FFFFFF,t_70" alt="å¨è¿éæå¥å¾çæè¿°"></p><p><img src="https://img-blog.csdnimg.cn/20181220210318864.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM0MDQ1NDQ0,size_16,color_FFFFFF,t_70" alt="å¨è¿éæå¥å¾çæè¿°"></p><h3 id="1-2-基于端口的虚拟主机"><a href="#1-2-基于端口的虚拟主机" class="headerlink" title="1.2 基于端口的虚拟主机"></a>1.2 基于端口的虚拟主机</h3><p>编辑/usr/local/nginx/conf（注意是安装目录，非源码包目录）下的nginx.conf：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">http &#123; </span><br><span class="line">    upstream web01&#123;  </span><br><span class="line">        server node02; </span><br><span class="line">&#125; </span><br><span class="line">upstream web02&#123; </span><br><span class="line">        server node03</span><br><span class="line">    &#125; </span><br><span class="line"> server &#123; </span><br><span class="line"><span class="comment">//当访问nginx的80端口时，将请求导给bjsxt组</span></span><br><span class="line">        listen <span class="number">81</span>; </span><br><span class="line">        server_name localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http:<span class="comment">//web01;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125; </span><br><span class="line">server &#123; </span><br><span class="line"> <span class="comment">//当访问nginx的81端口时，将请求导给shsxt组</span></span><br><span class="line">        listen <span class="number">82</span>; </span><br><span class="line">        server_name localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http:<span class="comment">//web02;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动nginx后，分别访问192.168.142.11（nginx服务器IP，也即node01）的81端口和82端口：</p><p><img src="https://img-blog.csdnimg.cn/20181220210332744.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM0MDQ1NDQ0,size_16,color_FFFFFF,t_70" alt="å¨è¿éæå¥å¾çæè¿°"></p><p><img src="https://img-blog.csdnimg.cn/20181220210337998.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM0MDQ1NDQ0,size_16,color_FFFFFF,t_70" alt="å¨è¿éæå¥å¾çæè¿°"></p><h3 id="1-3-正向代理和反向代理"><a href="#1-3-正向代理和反向代理" class="headerlink" title="1.3 正向代理和反向代理"></a>1.3 正向代理和反向代理</h3><p>请自行理解。</p><h3 id="1-4-Nginx的session的一致性问题"><a href="#1-4-Nginx的session的一致性问题" class="headerlink" title="1.4 Nginx的session的一致性问题"></a>1.4 Nginx的session的一致性问题</h3><h4 id="1-Session一致性解决方案"><a href="#1-Session一致性解决方案" class="headerlink" title="1. Session一致性解决方案"></a>1. Session一致性解决方案</h4><p>a. session复制, tomcat 本身带有复制session的功能。</p><p>b. 共享session,  需要专门管理session的软件，memcached 缓存服务，可以和tomcat整合，帮助tomcat共享管理session。</p><h4 id="2-安装memcached"><a href="#2-安装memcached" class="headerlink" title="2. 安装memcached"></a>2. 安装memcached</h4><ul><li><p>安装memcached内存数据库</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install memcached</span><br></pre></td></tr></table></figure></li><li><p>web服务器连接memcached的jar包拷贝到tomcat的lib，本文用的是Tomcat7对应的jar包：</p><p><img src="https://img-blog.csdnimg.cn/201812202103486.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM0MDQ1NDQ0,size_16,color_FFFFFF,t_70" alt="å¨è¿éæå¥å¾çæè¿°"><img src="https://img-blog.csdnimg.cn/20181220210353921.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM0MDQ1NDQ0,size_16,color_FFFFFF,t_70" alt="å¨è¿éæå¥å¾çæè¿°"></p></li><li><p>配置tomcat的conf目录下的context.xml：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">"de.javakaffee.web.msm.MemcachedBackupSessionManager"</span></span></span><br><span class="line">    &lt;!--memcached所在虚拟机IP--&gt;</span><br><span class="line">    memcachedNodes="n1:192.168.xxx.xxx:11211"</span><br><span class="line">    sticky="true"</span><br><span class="line">    lockingMode="auto"</span><br><span class="line">    sessionBackupAsync="false"</span><br><span class="line">   requestUriIgnorePattern=".*\.(ico|png|gif|jpg|css|js)$"</span><br><span class="line">sessionBackupTimeout="1000" transcoderFactoryClass="de.javakaffee.web.msm.serializer.kryo.KryoTranscoderFactory" /&gt;</span><br></pre></td></tr></table></figure><p>配置memcachedNodes属性，配置memcached数据库的ip和端口，默认11211，多个的话用逗号隔开。目的是为了让tomcat服务器从memcached缓存里面拿session或者是放session。</p><ul><li><p>修改index.jsp，取sessionid看一看：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span>  <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">SessionID:<span class="tag">&lt;<span class="name">%=session.getId()%</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">SessionIP:<span class="tag">&lt;<span class="name">%=request.getServerName()%</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>tomcat1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>启动memcached：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memcached -d -m <span class="number">128</span>m -p <span class="number">11211</span> -l <span class="number">192</span>.<span class="number">168</span>.xxx.xxx -u root -P /tmp/</span><br></pre></td></tr></table></figure></li></ul><p>访问不同Tomcat服务器：</p><p><img src="https://img-blog.csdnimg.cn/20181220210402706.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM0MDQ1NDQ0,size_16,color_FFFFFF,t_70" alt="å¨è¿éæå¥å¾çæè¿°"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-虚拟主机&quot;&gt;&lt;a href=&quot;#1-虚拟主机&quot; class=&quot;headerlink&quot; title=&quot;1. 虚拟主机&quot;&gt;&lt;/a&gt;1. 虚拟主机&lt;/h2&gt;&lt;p&gt;虚拟主机是指在网络服务器上分出一定的磁盘空间，用户可以租用此部分空间，以供用户放置站点及应用组件，提供必要的数据存放和传输功能。&lt;/p&gt;
&lt;p&gt;nginx可以配置基于域名和基于端口的虚拟主机：&lt;/p&gt;
&lt;h3 id=&quot;1-1-基于域名的虚拟主机&quot;&gt;&lt;a href=&quot;#1-1-基于域名的虚拟主机&quot; class=&quot;headerlink&quot; title=&quot;1.1 基于域名的虚拟主机&quot;&gt;&lt;/a&gt;1.1 基于域名的虚拟主机&lt;/h3&gt;&lt;p&gt;编辑/usr/local/nginx/conf（注意是安装目录，非源码包目录）下的nginx.conf：&lt;/p&gt;
    
    </summary>
    
      <category term="大数据" scheme="http://yoursite.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="大数据" scheme="http://yoursite.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>大数据002——Linux、nginx</title>
    <link href="http://yoursite.com/2016/03/26/md_%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE002%E2%80%94%E2%80%94Linux%E3%80%81nginx/"/>
    <id>http://yoursite.com/2016/03/26/md_大数据/大数据002——Linux、nginx/</id>
    <published>2016-03-26T03:01:45.000Z</published>
    <updated>2019-01-03T04:52:25.532Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-服务操作"><a href="#1-服务操作" class="headerlink" title="1. 服务操作"></a>1. 服务操作</h2><p>列出所有服务：chkconfig；</p><p>​    各数字代表的系统初始化级别含义：</p><p>​        0：停机状态</p><p>　　1：单用户模式，root账户进行操作</p><p>　　2：多用户，不能使用net file system，一般很少用</p><p>　　3：完全多用户，一部分启动，一部分不启动，命令行界面</p><p>　　4：未使用、未定义的保留模式</p><p>　　5：图形化，3级别中启动的进程都启动，并且会启动一部分图形界面进程。</p><p>　　6：停止所有进程，卸载文件系统，重新启动(reboot)</p><p>服务操作：service 服务名 start/stop/status/restart；</p><p>关闭防火墙：service iptables start/stop/status；</p><p>服务初执行等级更改：chkconfig –level 2345 name off|on</p><a id="more"></a><h2 id="2-linux进程操作"><a href="#2-linux进程操作" class="headerlink" title="2. linux进程操作"></a>2. linux进程操作</h2><p>查看所有进程：ps  -aux</p><p>​                   -a 列出所有</p><p>​                   -u 列出用户</p><p>​                 -x 详细列出，如cpu、内存等</p><p>​    ps  - ef  |  grep XXX；</p><p>杀死进程：kill pid</p><p>​            -9：强制杀死；</p><h2 id="3-其他常用命令"><a href="#3-其他常用命令" class="headerlink" title="3. 其他常用命令"></a>3. 其他常用命令</h2><p>yum：是一个在Fedora和RedHat以及CentOS中的<a href="https://baike.baidu.com/item/Shell" target="_blank" rel="noopener">Shell</a>前端软件包管理器。基于<a href="https://baike.baidu.com/item/RPM" target="_blank" rel="noopener">RPM</a>包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。</p><p>wget： 是一个从网络上自动下载文件的自由工具，支持通过 HTTP、HTTPS、FTP 三个最常见的 <a href="https://baike.baidu.com/item/TCP%2FIP%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">TCP/IP协议</a> 下载，并可以使用 HTTP 代理</p><p>需先安装 yum install wget  –y </p><p>wget用法:wget [option] 网址</p><p>​      -O  指定下载保存的路径</p><p>tar包：</p><p>​       -z    gzip进行解压或压缩，带.gz需要加，压缩出来.gz也需要加</p><p>​       -x    解压</p><p>​       -c    压缩</p><p>​       -f    目标文件，压缩文件新命名或解压文件名</p><p>​       -v   解压缩过程信息打印</p><p>解压命令：tar  -zvxf  xxxx.tar.gz。</p><h2 id="4-JDK部署"><a href="#4-JDK部署" class="headerlink" title="4. JDK部署"></a>4. JDK部署</h2><ul><li><p>上传并解压：</p><ol><li>指定目录安装：.tar.gz文件,如在/usr/soft/目录下tar -zxf jdk-7u80-linux-x64.tar.gz；</li><li>默认路径安装：.rpm文件，如任意目录下rpm  -inf jdk-7u80-linux-x64.rpm ,默认安装到/usr/java目录;</li></ol></li><li><p>配置环境变量</p><ol><li><p>第一种方式（全局变量）：vim /etc/profile</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME= /usr/soft/jdk1.<span class="number">7</span>.<span class="number">0</span>_75</span><br><span class="line"><span class="built_in">PATH</span>=$<span class="built_in">PATH</span>:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure><p>source  /etc/profile</p></li><li><p>第二种方式（局部变量）：vim ~/.bash_profile</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME= /usr/soft/jdk1.<span class="number">7</span>.<span class="number">0</span>_75</span><br><span class="line"><span class="built_in">PATH</span>=$<span class="built_in">PATH</span>:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure><p>source  ./bash_profile</p></li></ol></li><li><p>验证</p><p>java  -version。</p></li></ul><h2 id="5-部署Tomcat"><a href="#5-部署Tomcat" class="headerlink" title="5. 部署Tomcat"></a>5. 部署Tomcat</h2><p>上传并解压：apache-tomcat-7.0.61.tar.gz；</p><p>启动tomcat：bin目录下 ./startup.sh；</p><p>显示当前所有java进程：jps</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6034 Jps</span><br><span class="line">5966 Bootstrap</span><br></pre></td></tr></table></figure><h2 id="6-nginx"><a href="#6-nginx" class="headerlink" title="6. nginx"></a>6. nginx</h2><p>web应用在海量并发的环境下，用户每一次请求服务器，都需要大量的创建线程，每一次的线程都必须分配资源（CPU、内存、带宽、磁盘IO等），当资源不足的时候就会使得服务器宕机而无法提供服务。<em>Nginx</em> (engine x) 是一个高性能的<a href="https://baike.baidu.com/item/HTTP" target="_blank" rel="noopener">HTTP</a>和<a href="https://baike.baidu.com/item/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/7793488" target="_blank" rel="noopener">反向代理</a>服务其特点是占有内存少，<a href="https://baike.baidu.com/item/%E5%B9%B6%E5%8F%91/11024806" target="_blank" rel="noopener">并发</a>能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、<a href="https://baike.baidu.com/item/%E4%BA%AC%E4%B8%9C/210931" target="_blank" rel="noopener">京东</a>、<a href="https://baike.baidu.com/item/%E6%96%B0%E6%B5%AA/125692" target="_blank" rel="noopener">新浪</a>、<a href="https://baike.baidu.com/item/%E7%BD%91%E6%98%93/185754" target="_blank" rel="noopener">网易</a>、<a href="https://baike.baidu.com/item/%E8%85%BE%E8%AE%AF/112204" target="_blank" rel="noopener">腾讯</a>、<a href="https://baike.baidu.com/item/%E6%B7%98%E5%AE%9D/145661" target="_blank" rel="noopener">淘宝</a>等。</p><p>Tengine是由淘宝网发起的Web服务器项目。它在<a href="http://nginx.org/" target="_blank" rel="noopener">Nginx</a>的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。Tengine的性能和稳定性已经在大型的网站如<a href="http://www.taobao.com/" target="_blank" rel="noopener">淘宝网</a>，<a href="http://www.tmall.com/" target="_blank" rel="noopener">天猫商城</a>等得到了很好的检验。它的最终目标是打造一个高效、稳定、安全、易用的Web平台。</p><h3 id="6-1-负载均衡"><a href="#6-1-负载均衡" class="headerlink" title="6.1 负载均衡"></a>6.1 负载均衡</h3><p>Nginx可以通过反向代理来实现负载均衡。</p><h3 id="6-2-安装Nginx"><a href="#6-2-安装Nginx" class="headerlink" title="6.2 安装Nginx"></a>6.2 安装Nginx</h3><ol><li><p>依赖 gcc openssl-devel pcre-devel zlib-devel</p><p>安装：yum -y install gcc openssl-devel pcre-devel zlib-devel；</p></li><li><p>解压：tar -zxvf  nginx-1.8.1.tar.gz；</p></li><li><p>进入解压后的源码目录：./configure；</p></li><li><p>编译并安装：make &amp;&amp; make install，默认安装目录：/usr/local/nginx；</p></li><li><p>配置Nginx为系统服务，以方便管理，在/etc/rc.d/init.d/目录中建立文本文件nginx，在文件中粘贴下面的内容：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">#</span><br><span class="line"># nginx - this script starts and stops the nginx daemon</span><br><span class="line">#</span><br><span class="line"># chkconfig:   - <span class="number">85</span> <span class="number">15</span> </span><br><span class="line"># description:  Nginx is an HTTP(S) server, HTTP(S) reverse \</span><br><span class="line">#               proxy and IMAP/POP3 proxy server</span><br><span class="line"># processname: nginx</span><br><span class="line"># config:      /etc/nginx/nginx.conf</span><br><span class="line"># config:      /etc/sysconfig/nginx</span><br><span class="line"># pidfile:     /var/run/nginx.pid</span><br><span class="line"> </span><br><span class="line"># Source function library.</span><br><span class="line">. /etc/rc.d/init.d/functions</span><br><span class="line"> </span><br><span class="line"># Source networking configuration.</span><br><span class="line">. /etc/sysconfig/network</span><br><span class="line"> </span><br><span class="line"># Check that networking is up.</span><br><span class="line">[ "$NETWORKING" = "no" ] &amp;&amp; <span class="keyword">exit</span> <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">nginx="/usr/local/nginx/sbin/nginx"</span><br><span class="line">prog=$(basename $nginx)</span><br><span class="line"> </span><br><span class="line">NGINX_CONF_FILE="/usr/local/nginx/conf/nginx.conf"</span><br><span class="line"> </span><br><span class="line">[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx</span><br><span class="line"> </span><br><span class="line">lockfile=/var/lock/subsys/nginx</span><br><span class="line"> </span><br><span class="line">make_dirs() &#123;</span><br><span class="line">   # make required directories</span><br><span class="line">   user=`nginx -V <span class="number">2</span>&gt;&amp;<span class="number">1</span> | grep "configure arguments:" | sed 's/[^*]*--user=\([^ ]*\).*/\<span class="number">1</span>/g' -`</span><br><span class="line">   options=`$nginx -V <span class="number">2</span>&gt;&amp;<span class="number">1</span> | grep 'configure arguments:'`</span><br><span class="line">   <span class="keyword">for</span> opt <span class="keyword">in</span> $options; <span class="keyword">do</span></span><br><span class="line">       <span class="keyword">if</span> [ `<span class="built_in">echo</span> $opt | grep '.*-temp-<span class="built_in">path</span>'` ]; then</span><br><span class="line">           value=`<span class="built_in">echo</span> $opt | cut -d "=" -f <span class="number">2</span>`</span><br><span class="line">           <span class="keyword">if</span> [ ! -d "$value" ]; then</span><br><span class="line">               # <span class="built_in">echo</span> "creating" $value</span><br><span class="line">               <span class="built_in">mkdir</span> -p $value &amp;&amp; chown -R $user $value</span><br><span class="line">           fi</span><br><span class="line">       fi</span><br><span class="line">   done</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">start</span>() &#123;</span><br><span class="line">    [ -x $nginx ] || <span class="keyword">exit</span> <span class="number">5</span></span><br><span class="line">    [ -f $NGINX_CONF_FILE ] || <span class="keyword">exit</span> <span class="number">6</span></span><br><span class="line">    make_dirs</span><br><span class="line">    <span class="built_in">echo</span> -n $"Starting $prog: "</span><br><span class="line">    daemon $nginx -c $NGINX_CONF_FILE</span><br><span class="line">    retval=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    [ $retval -eq <span class="number">0</span> ] &amp;&amp; touch $lockfile</span><br><span class="line">    return $retval</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">stop() &#123;</span><br><span class="line">    <span class="built_in">echo</span> -n $"Stopping $prog: "</span><br><span class="line">    killproc $prog -QUIT</span><br><span class="line">    retval=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    [ $retval -eq <span class="number">0</span> ] &amp;&amp; rm -f $lockfile</span><br><span class="line">    return $retval</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">restart() &#123;</span><br><span class="line">    configtest || return $?</span><br><span class="line">    stop</span><br><span class="line">    sleep <span class="number">1</span></span><br><span class="line">    <span class="built_in">start</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">reload() &#123;</span><br><span class="line">    configtest || return $?</span><br><span class="line">    <span class="built_in">echo</span> -n $"Reloading $prog: "</span><br><span class="line">    killproc $nginx -HUP</span><br><span class="line">    RETVAL=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">force_reload() &#123;</span><br><span class="line">    restart</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">configtest() &#123;</span><br><span class="line">  $nginx -t -c $NGINX_CONF_FILE</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">rh_status() &#123;</span><br><span class="line">    status $prog</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">rh_status_q() &#123;</span><br><span class="line">    rh_status &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">case "$<span class="number">1</span>" <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">start</span>)</span><br><span class="line">        rh_status_q &amp;&amp; <span class="keyword">exit</span> <span class="number">0</span></span><br><span class="line">        $<span class="number">1</span></span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        rh_status_q || <span class="keyword">exit</span> <span class="number">0</span></span><br><span class="line">        $<span class="number">1</span></span><br><span class="line">        ;;</span><br><span class="line">    restart|configtest)</span><br><span class="line">        $<span class="number">1</span></span><br><span class="line">        ;;</span><br><span class="line">    reload)</span><br><span class="line">        rh_status_q || <span class="keyword">exit</span> <span class="number">7</span></span><br><span class="line">        $<span class="number">1</span></span><br><span class="line">        ;;</span><br><span class="line">    force-reload)</span><br><span class="line">        force_reload</span><br><span class="line">        ;;</span><br><span class="line">    status)</span><br><span class="line">        rh_status</span><br><span class="line">        ;;</span><br><span class="line">    condrestart|try-restart)</span><br><span class="line">        rh_status_q || <span class="keyword">exit</span> <span class="number">0</span></span><br><span class="line">            ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> $"Usage: $<span class="number">0</span> &#123;<span class="built_in">start</span>|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;"</span><br><span class="line">        <span class="keyword">exit</span> <span class="number">2</span></span><br><span class="line">esac</span><br></pre></td></tr></table></figure></li><li><p>修改nginx文件的执行权限：chmod +x nginx；</p></li><li><p>添加该文件到系统服务中去：chkconfig –add nginx<br>​    查看是否添加成功：chkconfig –list nginx；</p></li><li><p>启动，停止，重新装载：service nginx start|stop；</p></li><li><p>本地物理机访问：IP地址+80端口，出现如下界面：</p><p><img src="https://img-blog.csdnimg.cn/20181218224924188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM0MDQ1NDQ0,size_16,color_FFFFFF,t_70" alt="å¨è¿éæå¥å¾çæè¿°"></p></li></ol><h3 id="6-3-Nginx默认配置详解"><a href="#6-3-Nginx默认配置详解" class="headerlink" title="6.3 Nginx默认配置详解"></a>6.3 Nginx默认配置详解</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#进程数，建议设置和CPU个数一样或<span class="number">2</span>倍</span><br><span class="line">worker_processes  <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">#日志级别</span><br><span class="line">error_log  logs/error.log  warning;(默认error级别)</span><br><span class="line"></span><br><span class="line"># nginx 启动后的pid 存放位置</span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">#配置每个进程的连接数，总的连接数= worker_processes * worker_connections</span><br><span class="line">    #默认<span class="number">1024</span></span><br><span class="line">    worker_connections  <span class="number">10240</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">#连接超时时间，单位秒</span><br><span class="line">keepalive_timeout  <span class="number">65</span>;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       <span class="number">80</span>;</span><br><span class="line">        server_name  localhost                 </span><br><span class="line">        #默认请求</span><br><span class="line">  location / &#123;</span><br><span class="line">     root  html;   #定义服务器的默认网站根目录位置</span><br><span class="line">     index  index.php index.html index.htm;  #定义首页索引文件的名称</span><br><span class="line">        &#125;</span><br><span class="line">    #定义错误提示页面</span><br><span class="line">        error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /<span class="number">50</span>x.html;</span><br><span class="line">        location = /<span class="number">50</span>x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4-负载均衡配置"><a href="#6-4-负载均衡配置" class="headerlink" title="6.4 负载均衡配置"></a>6.4 负载均衡配置</h3><p>nginx支持以下负载均衡机制（或方法）：</p><p>a) 轮询负载均衡 - 对应用程序服务器的请求以循环方式分发，</p><p>b) 加权负载均衡</p><p>c) 最少连接数 - 将下一个请求分配给活动连接数最少的服务器</p><p>d) ip-hash - 哈希函数用于确定下一个请求（基于客户端的IP地址）应该选择哪个服务器。</p><h4 id="6-4-1-默认负载平衡配置"><a href="#6-4-1-默认负载平衡配置" class="headerlink" title="6.4.1 默认负载平衡配置"></a>6.4.1 默认负载平衡配置</h4><p>使用nginx进行负载平衡的最简单配置可能如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">http &#123; </span><br><span class="line">    upstream myserver&#123; </span><br><span class="line">        server node01; </span><br><span class="line">        server node02; </span><br><span class="line">        server node03; </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    server &#123; </span><br><span class="line">        listen 80; </span><br><span class="line">         server_name  localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://myserver;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-4-2-加权负载平衡"><a href="#6-4-2-加权负载平衡" class="headerlink" title="6.4.2 加权负载平衡"></a>6.4.2 加权负载平衡</h4><p>通过使用服务器权重，还可以进一步影响nginx负载均衡算法，谁的权重越大，分发到的请求就越多。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> upstream myserver &#123;</span><br><span class="line">server srv1.example.com weight=3;</span><br><span class="line">server srv2.example.com;</span><br><span class="line">  server srv3.example.com;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="6-4-3-最少连接负载平衡"><a href="#6-4-3-最少连接负载平衡" class="headerlink" title="6.4.3 最少连接负载平衡"></a>6.4.3 最少连接负载平衡</h4><p>在连接负载最少的情况下，nginx会尽量避免将过多的请求分发给繁忙的应用程序服务器，而是将新请求分发给不太繁忙的服务器，避免服务器过载。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream myserver &#123;</span><br><span class="line">    least_conn;</span><br><span class="line">    server srv1.example.com;</span><br><span class="line">    server srv2.example.com;</span><br><span class="line">    server srv3.example.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-4-4-会话持久性"><a href="#6-4-4-会话持久性" class="headerlink" title="6.4.4 会话持久性"></a>6.4.4 会话持久性</h4><p>使用ip-hash，客户端的IP地址将用作散列键，以确定应该为客户端的请求选择服务器组中的哪台服务器。此方法可确保来自同一客户端的请求将始终定向到同一台服务器，除非此服务器不可用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream myserver&#123;</span><br><span class="line">ip_hash;</span><br><span class="line">server srv1.example.com;</span><br><span class="line"> server srv2.example.com;</span><br><span class="line">server srv3.example.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-5-Nginx的访问控制"><a href="#6-5-Nginx的访问控制" class="headerlink" title="6.5 Nginx的访问控制"></a>6.5 Nginx的访问控制</h3><p>Nginx还可以对IP的访问进行控制，allow代表允许，deny代表禁止。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">deny 192.168.2.180;</span><br><span class="line">allow 192.168.78.0/24;</span><br><span class="line">allow 10.1.1.0/16;</span><br><span class="line">allow 192.168.1.0/32;</span><br><span class="line">deny all;</span><br><span class="line">proxy_pass http://myserver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上到下的顺序，匹配到了便跳出。如上的例子先禁止了1个，接下来允许了3个网段，其中包含了一个ipv6，最后未匹配的IP全部禁止访问。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-服务操作&quot;&gt;&lt;a href=&quot;#1-服务操作&quot; class=&quot;headerlink&quot; title=&quot;1. 服务操作&quot;&gt;&lt;/a&gt;1. 服务操作&lt;/h2&gt;&lt;p&gt;列出所有服务：chkconfig；&lt;/p&gt;
&lt;p&gt;​    各数字代表的系统初始化级别含义：&lt;/p&gt;
&lt;p&gt;​        0：停机状态&lt;/p&gt;
&lt;p&gt;　　1：单用户模式，root账户进行操作&lt;/p&gt;
&lt;p&gt;　　2：多用户，不能使用net file system，一般很少用&lt;/p&gt;
&lt;p&gt;　　3：完全多用户，一部分启动，一部分不启动，命令行界面&lt;/p&gt;
&lt;p&gt;　　4：未使用、未定义的保留模式&lt;/p&gt;
&lt;p&gt;　　5：图形化，3级别中启动的进程都启动，并且会启动一部分图形界面进程。&lt;/p&gt;
&lt;p&gt;　　6：停止所有进程，卸载文件系统，重新启动(reboot)&lt;/p&gt;
&lt;p&gt;服务操作：service 服务名 start/stop/status/restart；&lt;/p&gt;
&lt;p&gt;关闭防火墙：service iptables start/stop/status；&lt;/p&gt;
&lt;p&gt;服务初执行等级更改：chkconfig –level 2345 name off|on&lt;/p&gt;
    
    </summary>
    
      <category term="大数据" scheme="http://yoursite.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="大数据" scheme="http://yoursite.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>大数据001——Linux</title>
    <link href="http://yoursite.com/2016/03/25/md_%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE001%E2%80%94%E2%80%94Linux/"/>
    <id>http://yoursite.com/2016/03/25/md_大数据/大数据001——Linux/</id>
    <published>2016-03-25T03:01:45.000Z</published>
    <updated>2019-01-03T04:52:18.314Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><h3 id="1-1-VMware"><a href="#1-1-VMware" class="headerlink" title="1.1 VMware"></a>1.1 VMware</h3><p>安装虚拟机VMware10。</p><h3 id="1-2-Linux安装"><a href="#1-2-Linux安装" class="headerlink" title="1.2 Linux安装"></a>1.2 Linux安装</h3><p>安装CentOS6.6。</p><h3 id="1-3-网络配置"><a href="#1-3-网络配置" class="headerlink" title="1.3 网络配置"></a>1.3 网络配置</h3><h4 id="1-3-1-查看虚拟机网关"><a href="#1-3-1-查看虚拟机网关" class="headerlink" title="1.3.1 查看虚拟机网关"></a>1.3.1 查看虚拟机网关</h4><p><img src="https://img-blog.csdnimg.cn/20181217200800940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM0MDQ1NDQ0,size_16,color_FFFFFF,t_70" alt="å¨è¿éæå¥å¾çæè¿°"></p><p>在此之前linux系统的虚拟机网络设置为NAT模式：</p><p><img src="https://img-blog.csdnimg.cn/20181217200912673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM0MDQ1NDQ0,size_16,color_FFFFFF,t_70" alt="å¨è¿éæå¥å¾çæè¿°"></p><p>一般虚拟机网关为 .2 结尾，如本机：192.168.142.2；</p><p>起始——结束IP地址设置为：192.168.142.4——192.168.142.254， .0/.1/.2/.255一般为专用IP。</p><h4 id="1-3-2-配置Liunx静态IP-NAT模式"><a href="#1-3-2-配置Liunx静态IP-NAT模式" class="headerlink" title="1.3.2 配置Liunx静态IP(NAT模式)"></a>1.3.2 配置Liunx静态IP(NAT模式)</h4><a id="more"></a><h5 id="Ⅰ-编辑配置文件"><a href="#Ⅰ-编辑配置文件" class="headerlink" title="Ⅰ. 编辑配置文件"></a>Ⅰ. 编辑配置文件</h5><p>Linux命令行输入：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]# vi  /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure><p>按i 进入文本编辑模式，出现游标，左下角会出现INSERT,即可以编辑:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=eth0              #网卡设备名,请勿修改名字        </span><br><span class="line"><span class="built_in">TYPE</span>=Ethernet #网络类型，以太网</span><br><span class="line">ONBOOT=yes               #开启自动启用网络连接</span><br><span class="line">NM_CONTROLLED=yes</span><br><span class="line">BOOTPROTO=static #启用静态IP地址</span><br><span class="line">IPADDR=<span class="number">192</span>.<span class="number">168</span>.<span class="number">142</span>.<span class="number">11</span> #设置IP地址</span><br><span class="line">NETMASK=<span class="number">255</span>.<span class="number">255</span>.<span class="number">255</span>.<span class="number">0</span>    #设置子网掩码</span><br><span class="line">GATEWAY=<span class="number">192</span>.<span class="number">168</span>.<span class="number">142</span>.<span class="number">2</span> #设置网关</span><br></pre></td></tr></table></figure><p>按ESC退出编辑模式，输入:wq  保存退出；</p><h5 id="Ⅱ-修改完后执行以下命令"><a href="#Ⅱ-修改完后执行以下命令" class="headerlink" title="Ⅱ. 修改完后执行以下命令"></a>Ⅱ. 修改完后执行以下命令</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]# service network restart  #重启网络连接</span><br></pre></td></tr></table></figure><h5 id="Ⅲ-验证是否配置成功"><a href="#Ⅲ-验证是否配置成功" class="headerlink" title="Ⅲ. 验证是否配置成功"></a>Ⅲ. 验证是否配置成功</h5><p> a. 虚拟机能ping通虚拟网关</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]# <span class="built_in">ping</span> <span class="number">192</span>.<span class="number">168</span>.<span class="number">142</span>.<span class="number">2</span></span><br><span class="line"><span class="built_in">PING</span> <span class="number">192</span>.<span class="number">168</span>.<span class="number">142</span>.<span class="number">2</span> (<span class="number">192</span>.<span class="number">168</span>.<span class="number">142</span>.<span class="number">2</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192</span>.<span class="number">168</span>.<span class="number">142</span>.<span class="number">2</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">128</span> <span class="built_in">time</span>=<span class="number">8</span>.<span class="number">48</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192</span>.<span class="number">168</span>.<span class="number">142</span>.<span class="number">2</span>: icmp_seq=<span class="number">2</span> ttl=<span class="number">128</span> <span class="built_in">time</span>=<span class="number">0</span>.<span class="number">325</span> ms</span><br><span class="line">^C</span><br><span class="line">--- <span class="number">192</span>.<span class="number">168</span>.<span class="number">142</span>.<span class="number">2</span> <span class="built_in">ping</span> statistics ---</span><br><span class="line"><span class="number">2</span> packets transmitted, <span class="number">2</span> received, <span class="number">0</span>% packet loss, <span class="built_in">time</span> <span class="number">1959</span>ms</span><br><span class="line">rtt min/avg/max/mdev = <span class="number">0</span>.<span class="number">325</span>/<span class="number">4</span>.<span class="number">404</span>/<span class="number">8</span>.<span class="number">484</span>/<span class="number">4</span>.<span class="number">080</span> ms</span><br></pre></td></tr></table></figure><p>Ctrl键+C停止。  </p><p> b. 虚拟机与物理机（笔记本）相互可ping通</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]# <span class="built_in">ping</span> <span class="number">192</span>.<span class="number">168</span>.<span class="number">4</span>.<span class="number">180</span></span><br><span class="line"><span class="built_in">PING</span> <span class="number">192</span>.<span class="number">168</span>.<span class="number">4</span>.<span class="number">180</span> (<span class="number">192</span>.<span class="number">168</span>.<span class="number">4</span>.<span class="number">180</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192</span>.<span class="number">168</span>.<span class="number">4</span>.<span class="number">180</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">128</span> <span class="built_in">time</span>=<span class="number">0</span>.<span class="number">781</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192</span>.<span class="number">168</span>.<span class="number">4</span>.<span class="number">180</span>: icmp_seq=<span class="number">2</span> ttl=<span class="number">128</span> <span class="built_in">time</span>=<span class="number">0</span>.<span class="number">485</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192</span>.<span class="number">168</span>.<span class="number">4</span>.<span class="number">180</span>: icmp_seq=<span class="number">3</span> ttl=<span class="number">128</span> <span class="built_in">time</span>=<span class="number">0</span>.<span class="number">435</span> ms</span><br><span class="line">^C</span><br><span class="line">--- <span class="number">192</span>.<span class="number">168</span>.<span class="number">4</span>.<span class="number">180</span> <span class="built_in">ping</span> statistics ---</span><br><span class="line"><span class="number">3</span> packets transmitted, <span class="number">3</span> received, <span class="number">0</span>% packet loss, <span class="built_in">time</span> <span class="number">2239</span>ms</span><br><span class="line">rtt min/avg/max/mdev = <span class="number">0</span>.<span class="number">435</span>/<span class="number">0</span>.<span class="number">567</span>/<span class="number">0</span>.<span class="number">781</span>/<span class="number">0</span>.<span class="number">152</span> ms</span><br></pre></td></tr></table></figure><p>Ctrl键+C停止。</p><p> c. 虚拟机与公网上的百度网址相互可ping通（此步ping通，才说明网络配置成功）</p><p>​      命令：ping  <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> </p><ul><li>在此之前需要配置DNS服务器的地址文件，Linux命令行输入：</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]# vi /etc/resolv.conf</span><br></pre></td></tr></table></figure><ul><li>按i 进入文本编辑模式，输入：</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameserver <span class="number">192</span>.<span class="number">168</span>.<span class="number">142</span>.<span class="number">2</span> #虚拟机网关</span><br></pre></td></tr></table></figure><ul><li>ping公网百度：</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]# <span class="built_in">ping</span> www.baidu.com</span><br><span class="line"><span class="built_in">PING</span> www.a.shifen.com (<span class="number">115</span>.<span class="number">239</span>.<span class="number">210</span>.<span class="number">27</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">115</span>.<span class="number">239</span>.<span class="number">210</span>.<span class="number">27</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">128</span> <span class="built_in">time</span>=<span class="number">13</span>.<span class="number">8</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">115</span>.<span class="number">239</span>.<span class="number">210</span>.<span class="number">27</span>: icmp_seq=<span class="number">2</span> ttl=<span class="number">128</span> <span class="built_in">time</span>=<span class="number">14</span>.<span class="number">6</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">115</span>.<span class="number">239</span>.<span class="number">210</span>.<span class="number">27</span>: icmp_seq=<span class="number">3</span> ttl=<span class="number">128</span> <span class="built_in">time</span>=<span class="number">13</span>.<span class="number">0</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">115</span>.<span class="number">239</span>.<span class="number">210</span>.<span class="number">27</span>: icmp_seq=<span class="number">4</span> ttl=<span class="number">128</span> <span class="built_in">time</span>=<span class="number">13</span>.<span class="number">8</span> ms</span><br><span class="line">^C</span><br><span class="line">--- www.a.shifen.com <span class="built_in">ping</span> statistics ---</span><br><span class="line"><span class="number">4</span> packets transmitted, <span class="number">4</span> received, <span class="number">0</span>% packet loss, <span class="built_in">time</span> <span class="number">3350</span>ms</span><br><span class="line">rtt min/avg/max/mdev = <span class="number">13</span>.<span class="number">066</span>/<span class="number">13</span>.<span class="number">864</span>/<span class="number">14</span>.<span class="number">678</span>/<span class="number">0</span>.<span class="number">582</span> ms</span><br></pre></td></tr></table></figure><h4 id="1-3-3-XShell-xftp安装与使用"><a href="#1-3-3-XShell-xftp安装与使用" class="headerlink" title="1.3.3 XShell xftp安装与使用"></a>1.3.3 XShell xftp安装与使用</h4><p>安装XShell。</p><h2 id="2-Linux文件系统"><a href="#2-Linux文件系统" class="headerlink" title="2. Linux文件系统"></a>2. Linux文件系统</h2><p>Linux文件系统中的文件是数据的集合，文件系统不仅包含着文件中的数据而且还有文件系统的结构，所有Linux 用户和程序看到的文件、目录、软连接及文件保护信息等都存储在其中。</p><h3 id="2-1-目录操作"><a href="#2-1-目录操作" class="headerlink" title="2.1 目录操作"></a>2.1 目录操作</h3><p>切换目录：<strong>cd</strong> + 目录的路径；</p><p>​    cd  / ：进入/目录，该目录下存在 bin、boot、dev、etc、home、lib、proc、usr、var等文件夹；</p><p>​    cd  /usr：进入到usr文件夹目录；</p><p>​    cd  ~ ：进入到root目录。</p><p>查看当前目录的完整路径 ：pwd；</p><p>返回到父目录： cd ..；</p><p>新建目录：<strong>mkdir</strong> + 目录名字；</p><p>查看当前目录下拥有的子目录和文件: ls；</p><p>查看当前目录下拥有的子目录和文件: ll，长列表格式显示文件及目录；</p><p>拷贝目录：cp source dest  -rf；</p><p>​    -f：强制的；</p><p>​    -v：递归的、遍历的；</p><p>删除目录：<strong>rmdir</strong> directory、<strong>rm</strong>-rf dir；</p><p>移动/更改 目录：<strong>mv</strong> + 目录/文件名字 + 其他路径、<strong>mv</strong> test /    将test目录移动到根目录/ 下；</p><h3 id="2-2-文件操作"><a href="#2-2-文件操作" class="headerlink" title="2.2 文件操作"></a>2.2 文件操作</h3><p>新建文件（一切皆文件）：<strong>touch</strong> web.log   创建一个空文件；</p><p>复制文件：<strong>cp </strong> -rf  web.log  web_cp.log；</p><p>删除文件：**rm -f web_cp.log；</p><p>查看目录下的东西：ls / ll；</p><p>查看目录下的所有东西（包括隐藏文件）：ls –al 等价于  ll –a；</p><p>查看文件内容：<strong>cat</strong> filename  一次性显示整个文件的内容</p><p><strong>more</strong> filename 该命令一次显示一屏文本，满屏后停下来，并且在屏幕的底部出现一个提示信息，给出至今己显示的该文件的百分比。</p><p>​    按Space键，显示文本的下一屏内容。</p><pre><code>按Enier键，只显示文本的下一行内容。</code></pre><p>​    按B键，显示上一屏内容。</p><p>​    按Q键，退出。</p><p>less命令 与 more命令非常类似；</p><p>从头打印文件内容：<strong>head</strong>  -10 filename 打印文件1到10行；</p><p>从尾部打印文件内容：<strong>tail</strong> -10 filename 打印文件最后10行；</p><p>查找文件或目录：<strong>find</strong>  pathname <strong>–name</strong> filename；</p><p>​    <strong>find</strong> /etc <strong>-name</strong> pro*：查找以pro开头的文件或目录；</p><h3 id="2-3-文本编辑"><a href="#2-3-文本编辑" class="headerlink" title="2.3 文本编辑"></a>2.3 文本编辑</h3><p><strong>vi编辑模式</strong></p><p>​    vi filename :打开或新建文件，并将光标置于第一行首 ；</p><p>​    vi +n filename ：打开文件，并将光标置于第n行首 ；</p><p>​    vi + filename ：打开文件，并将光标置于最后一行首 ；</p><p>​    vi +/pattern filename：打开文件，并将光标置于第一个与 pattern匹配的串处； </p><p><strong>vi命令行模式</strong></p><p>​     w保存 </p><p>​    q退出 </p><p>​    q!：不保存文件并退出vi </p><p>​    – 在VI的命令模式下输入“:set nu”，就有行号了。 </p><p>​    – 在VI的命令模式下输入“:set nonu”，取消行号。 </p><p><strong>一般模式</strong></p><pre><code>yy 复制光标所在行(常用) </code></pre><p>​    nyy 复制光标所在行的向下n行，例如， 20yy则是复制20行(常用) </p><pre><code>p,P   p为复制的数据粘贴在光标下一行， P则为粘贴在光标上一行(常用)</code></pre><p>​    G:光标移至第最后一行</p><p>​    nG：光标移动至第N行行首</p><p>​    n+：光标下移n行 </p><p>​    n-：光标上移n行 </p><p>​    H ：光标移至屏幕顶行 </p><p>​    M ：光标移至屏幕中间行 </p><p>​    L ：光标移至屏幕最后行 </p><pre><code>dd：删除 行 </code></pre><p>​    x或X：删除一个字符，x删除光标后的，而X删除光标前的 </p><pre><code>u 恢复前一个动作(常用)</code></pre><p>​    删除第N行到第M行：N,Md</p><p><strong>vim编辑器</strong></p><p>​    安装vim：<strong>yum</strong> install vim -y；</p><h3 id="2-4-文件传输"><a href="#2-4-文件传输" class="headerlink" title="2.4 文件传输"></a>2.4 文件传输</h3><p>将本地文件复制到远程机器：<strong>scp</strong> local_file remote_username@remote_ip:remote_folder；</p><p>将本地目录复制到远程机器：<strong>scp</strong> -r local_folder remote_username@remote_ip:remote_folder；</p><p>文件上传需先安装好lrzsz :  <strong>yum</strong>  install  lrzsz  -y；</p><p>安装好后，输入上传的命令rz,弹出上传文件选择界面；</p><p>将文件下载至windows系统：sz filename；</p><h2 id="3-网络指令"><a href="#3-网络指令" class="headerlink" title="3. 网络指令"></a>3. 网络指令</h2><p>查看网络配置信息：ifconfig；</p><p>测试与目标主机的连通性：ping remote_ip；</p><p>显示各种网络相关信息：<strong>netstat –a n p t</strong>；</p><p>​    -a (all)显示所有选项，默认不显示LISTEN相关<br>     -t (tcp)仅显示tcp相关选项<br>​     -u (udp)仅显示udp相关选项<br>​     -n 拒绝显示别名，能显示数字的全部转化成数字。<br>     -l 仅列出有在 Listen (监听) 的服務状态</p><p>​    -p 显示建立相关链接的程序名<br>​     -r 显示路由信息，路由表<br>​     -e 显示扩展信息，例如uid等<br>​     -s 按各个协议进行统计<br>     -c 每隔一个固定时间，执行该netstat命令。</p><p>​    提示：LISTEN和LISTENING的状态只有用-a或者-l才能看到；</p><h2 id="4-系统配置"><a href="#4-系统配置" class="headerlink" title="4. 系统配置"></a>4. 系统配置</h2><p>主机名配置：vim /etc/sysconfig/network；</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NETWORKING=yes</span><br><span class="line">HOSTNAME=node01 #在此修改主机名</span><br></pre></td></tr></table></figure><p>IP地址hostname的对应：vi /etc/hosts；</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::<span class="number">1</span>         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"><span class="number">192</span>.<span class="number">168</span>.<span class="number">142</span>.<span class="number">11</span> node01 #编辑IP和对应的主机名</span><br><span class="line"><span class="number">192</span>.<span class="number">168</span>.<span class="number">142</span>.<span class="number">12</span> node02</span><br></pre></td></tr></table></figure><p>之后便可以直接ping 主机名测试网络连接；</p><p>DNS配置：/etc/resolv.conf；</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameserver <span class="number">192</span>.<span class="number">168</span>.<span class="number">142</span>.<span class="number">2</span> #也可以配置nameserver <span class="number">114</span>.<span class="number">114</span>.<span class="number">114</span>.<span class="number">114</span></span><br></pre></td></tr></table></figure><p>环境变量：Linux系统的环境变量是在/etc/profile文件里配置；</p><p>查看系统所有的环境变量和对应的目录：echo  $path；</p><p>编辑环境变量：vim  /etc/profile；</p><p>重新加载环境：source  /etc/profile；</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-环境准备&quot;&gt;&lt;a href=&quot;#1-环境准备&quot; class=&quot;headerlink&quot; title=&quot;1. 环境准备&quot;&gt;&lt;/a&gt;1. 环境准备&lt;/h2&gt;&lt;h3 id=&quot;1-1-VMware&quot;&gt;&lt;a href=&quot;#1-1-VMware&quot; class=&quot;headerlink&quot; title=&quot;1.1 VMware&quot;&gt;&lt;/a&gt;1.1 VMware&lt;/h3&gt;&lt;p&gt;安装虚拟机VMware10。&lt;/p&gt;
&lt;h3 id=&quot;1-2-Linux安装&quot;&gt;&lt;a href=&quot;#1-2-Linux安装&quot; class=&quot;headerlink&quot; title=&quot;1.2 Linux安装&quot;&gt;&lt;/a&gt;1.2 Linux安装&lt;/h3&gt;&lt;p&gt;安装CentOS6.6。&lt;/p&gt;
&lt;h3 id=&quot;1-3-网络配置&quot;&gt;&lt;a href=&quot;#1-3-网络配置&quot; class=&quot;headerlink&quot; title=&quot;1.3 网络配置&quot;&gt;&lt;/a&gt;1.3 网络配置&lt;/h3&gt;&lt;h4 id=&quot;1-3-1-查看虚拟机网关&quot;&gt;&lt;a href=&quot;#1-3-1-查看虚拟机网关&quot; class=&quot;headerlink&quot; title=&quot;1.3.1 查看虚拟机网关&quot;&gt;&lt;/a&gt;1.3.1 查看虚拟机网关&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20181217200800940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM0MDQ1NDQ0,size_16,color_FFFFFF,t_70&quot; alt=&quot;å¨è¿éæå¥å¾çæè¿°&quot;&gt;&lt;/p&gt;
&lt;p&gt;在此之前linux系统的虚拟机网络设置为NAT模式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20181217200912673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM0MDQ1NDQ0,size_16,color_FFFFFF,t_70&quot; alt=&quot;å¨è¿éæå¥å¾çæè¿°&quot;&gt;&lt;/p&gt;
&lt;p&gt;一般虚拟机网关为 .2 结尾，如本机：192.168.142.2；&lt;/p&gt;
&lt;p&gt;起始——结束IP地址设置为：192.168.142.4——192.168.142.254， .0/.1/.2/.255一般为专用IP。&lt;/p&gt;
&lt;h4 id=&quot;1-3-2-配置Liunx静态IP-NAT模式&quot;&gt;&lt;a href=&quot;#1-3-2-配置Liunx静态IP-NAT模式&quot; class=&quot;headerlink&quot; title=&quot;1.3.2 配置Liunx静态IP(NAT模式)&quot;&gt;&lt;/a&gt;1.3.2 配置Liunx静态IP(NAT模式)&lt;/h4&gt;
    
    </summary>
    
      <category term="大数据" scheme="http://yoursite.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="大数据" scheme="http://yoursite.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Java操作MongoDB数据库CRUD（增删查改）</title>
    <link href="http://yoursite.com/2016/01/25/md_%E6%95%B0%E6%8D%AE%E5%BA%93/Java%E6%93%8D%E4%BD%9CMongoDB%E6%95%B0%E6%8D%AE%E5%BA%93CRUD%EF%BC%88%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9%EF%BC%89/"/>
    <id>http://yoursite.com/2016/01/25/md_数据库/Java操作MongoDB数据库CRUD（增删查改）/</id>
    <published>2016-01-25T00:01:45.000Z</published>
    <updated>2019-01-02T09:51:46.089Z</updated>
    
    <content type="html"><![CDATA[<p><strong>借助mongo-java-driver包，对MongoDB数据库的集合（DataTable）及文档（BSON对象数据）进行增删查改操作。本文的核心在于查询操作，善用mongo-java-driver包下的Iterable迭代器、fing()方法、aggregate()方法，理解Document对象映射BSON对象的底层实现，可完成类似窗口命令行下javascript代码操作MongoDB数据库的所有查询。</strong></p><h3 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h3><h4 id="1-1-创建项目"><a href="#1-1-创建项目" class="headerlink" title="1.1  创建项目"></a>1.1  创建项目</h4><p><strong>本文是在Idea编辑器Maven环境下创建quickstart项目。</strong></p><h4 id="1-2-添加依赖"><a href="#1-2-添加依赖" class="headerlink" title="1.2  添加依赖"></a>1.2  添加依赖</h4><p><strong>引入junit测试单元，可方便测试代码；</strong><br><strong>引入MongoDB驱动包，3.9.1版本；</strong></p><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--MongoDB--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mongodb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mongo-java-driver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-测试环境搭建"><a href="#2-测试环境搭建" class="headerlink" title="2. 测试环境搭建"></a>2. 测试环境搭建</h3><h4 id="2-1-封装MongoDBUtil工具类"><a href="#2-1-封装MongoDBUtil工具类" class="headerlink" title="2.1  封装MongoDBUtil工具类"></a>2.1  封装MongoDBUtil工具类</h4><p><strong>此步骤略过，该工具类需具备连接池参数信息的配置，获取MongClient对象及关闭mongoClient功能。</strong></p><h4 id="2-2-准备junit测试代码，并测试连接"><a href="#2-2-准备junit测试代码，并测试连接" class="headerlink" title="2.2  准备junit测试代码，并测试连接"></a>2.2  准备junit测试代码，并测试连接</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ongoClient mongoClient = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取连接</span></span><br><span class="line">    mongoClient = MongoDBUtil.getMongoClient();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@After</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testClose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MongoDBUtil.close(mongoClient);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 连接数据库，存在选中，不存在创建</span></span><br><span class="line">    MongoDatabase db = mongoClient.getDatabase(<span class="string">"myDB"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除数据库</span></span><br><span class="line">    mongoClient.dropDatabase(<span class="string">"myDB"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-数据库CRUD（增删查改）操作"><a href="#3-数据库CRUD（增删查改）操作" class="headerlink" title="3. 数据库CRUD（增删查改）操作"></a>3. 数据库CRUD（增删查改）操作</h3><h4 id="3-1-创建集合"><a href="#3-1-创建集合" class="headerlink" title="3.1  创建集合"></a>3.1  创建集合</h4><p><strong>集合既是关系型数据库的表。</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">//1.’连接数据库，若存在即选中，若不存在就建立</span></span><br><span class="line">      MongoDatabase mongoDatabase  = mongoClient.getDatabase(<span class="string">"javadb"</span>);</span><br><span class="line">      <span class="comment">//创建集合，此步骤若创建已存在集合，将会报错</span></span><br><span class="line">      <span class="comment">//mongoDatabase.createCollection("javaTset");</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">//2.获取集合，若存在即选中，若不存在就建立</span></span><br><span class="line">      MongoCollection mongoCollection = mongoDatabase.getCollection(<span class="string">"javaTset"</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//3.获取集合中文档个数</span></span><br><span class="line">      Long collectionSize = mongoCollection.countDocuments();</span><br><span class="line">      System.out.println(<span class="string">"javadb集合中文档个数："</span>+collectionSize);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//3.获取整个数据库下集合名称列表</span></span><br><span class="line">      MongoIterable&lt;String&gt; mongoIterable = mongoDatabase.listCollectionNames();</span><br><span class="line">      <span class="comment">//4.获取迭代器,并遍历</span></span><br><span class="line">      MongoCursor&lt;String&gt; mongoCursor = mongoIterable.iterator();</span><br><span class="line">      <span class="keyword">while</span>(mongoCursor.hasNext())&#123;</span><br><span class="line">          System.out.println(mongoCursor.next());</span><br><span class="line">      &#125;</span><br><span class="line">      mongoCursor.close();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//5.删除当前集合</span></span><br><span class="line">      mongoCollection.drop();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">javadb集合中文档个数：5</span><br><span class="line">emp</span><br><span class="line">javadb</span><br><span class="line">user</span><br></pre></td></tr></table></figure><h4 id="3-2-创建文档"><a href="#3-2-创建文档" class="headerlink" title="3.2  创建文档"></a>3.2  创建文档</h4><p><strong>文档既是关系型数据库的row，java代码中由Document（键值对形式，键为字符串，值可以为字符串、数字、Document对象）对象体现，很好的对应了MongoDB中的Bson对象。</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCrud01</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="comment">//连接数据库，存在选中，不存在就建立</span></span><br><span class="line">     MongoDatabase database  = mongoClient.getDatabase(<span class="string">"javadb"</span>);</span><br><span class="line">     <span class="comment">//获取集合</span></span><br><span class="line">     MongoCollection collection = database.getCollection(<span class="string">"javaTest"</span>);</span><br><span class="line">     <span class="comment">//插入一条文档</span></span><br><span class="line">     Document document = <span class="keyword">new</span> Document();</span><br><span class="line">     document.put(<span class="string">"name"</span>,<span class="string">"zhangsan123"</span>);</span><br><span class="line">     document.put(<span class="string">"age"</span>,<span class="number">11</span>);</span><br><span class="line">     document.put(<span class="string">"addr"</span>,<span class="string">"shanghai"</span>);</span><br><span class="line">     document.put(<span class="string">"date"</span>,<span class="keyword">new</span> Date());</span><br><span class="line">     collection.insertOne(document);</span><br><span class="line"><span class="comment">//插入多条文档</span></span><br><span class="line">     Document document1 = <span class="keyword">new</span> Document();</span><br><span class="line">     document1.put(<span class="string">"name"</span>,<span class="string">"lisi"</span>);</span><br><span class="line">     document1.put(<span class="string">"age"</span>,<span class="number">11</span>);</span><br><span class="line">     document1.put(<span class="string">"addr"</span>,<span class="string">"beijing"</span>);</span><br><span class="line">     document1.put(<span class="string">"date"</span>,<span class="keyword">new</span> Date());</span><br><span class="line">     Document document2 = <span class="keyword">new</span> Document();</span><br><span class="line">     document2.put(<span class="string">"name"</span>,<span class="string">"wangwu"</span>);</span><br><span class="line">     document2.put(<span class="string">"age"</span>,<span class="number">55</span>);</span><br><span class="line">     document2.put(<span class="string">"addr"</span>,<span class="string">"guangzhou"</span>);</span><br><span class="line">     document2.put(<span class="string">"date"</span>,<span class="keyword">new</span> Date());</span><br><span class="line">     List&lt;Document&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">     list.add(document1);</span><br><span class="line">     list.add(document2);</span><br><span class="line"></span><br><span class="line">     collection.insertMany(list);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//查询所有文档，获取迭代器和游标，并遍历</span></span><br><span class="line">     MongoCursor&lt;Document&gt; cursor = collection.find().iterator();</span><br><span class="line">     <span class="keyword">while</span> (cursor.hasNext())&#123;</span><br><span class="line">         System.out.println(cursor.next().toString());</span><br><span class="line">     &#125;</span><br><span class="line">     cursor.close();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Document&#123;&#123;_id=5c024316b4d5c01d14924040, name=zhangsan123, age=11, addr=shanghai, date=Sat Dec 01 16:15:18 CST 2018&#125;&#125;</span><br><span class="line">Document&#123;&#123;_id=5c024317b4d5c01d14924041, name=lisi, age=11, addr=beijing, date=Sat Dec 01 16:15:19 CST 2018&#125;&#125;</span><br><span class="line">Document&#123;&#123;_id=5c024317b4d5c01d14924042, name=wangwu, age=55, addr=guangzhou, date=Sat Dec 01 16:15:19 CST 2018&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-更新文档"><a href="#3-3-更新文档" class="headerlink" title="3.3 更新文档"></a>3.3 更新文档</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCrud03</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//连接数据库，存在选中，不存在就建立</span></span><br><span class="line">    MongoDatabase database  = mongoClient.getDatabase(<span class="string">"javadb"</span>);</span><br><span class="line">    <span class="comment">//获取集合</span></span><br><span class="line">    MongoCollection collection = database.getCollection(<span class="string">"javaTest"</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//1.获取到要更新的文档</span></span><br><span class="line">    BasicDBObject old = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">    old.put(<span class="string">"name"</span>,<span class="string">"lisi"</span>);</span><br><span class="line">    <span class="comment">//2.创建更新的文档(需要跟新的字段和值)</span></span><br><span class="line">    BasicDBObject newObj = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">    newObj.put(<span class="string">"age"</span>,<span class="number">22</span>);</span><br><span class="line">    <span class="comment">//3.创建更新操作</span></span><br><span class="line">    BasicDBObject update = <span class="keyword">new</span> BasicDBObject(<span class="string">"$set"</span>,newObj);</span><br><span class="line">    <span class="comment">//4.执行更新</span></span><br><span class="line">    collection.updateOne(old,update);<span class="comment">//更新匹配的第一条数据</span></span><br><span class="line">    <span class="comment">//collection.updateMany(old,update);//更新多条数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-删除文档"><a href="#3-4-删除文档" class="headerlink" title="3.4 删除文档"></a>3.4 删除文档</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCrud04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//连接数据库，存在选中，不存在就建立</span></span><br><span class="line">    MongoDatabase database = mongoClient.getDatabase(<span class="string">"javadb"</span>);</span><br><span class="line">    <span class="comment">//获取集合</span></span><br><span class="line">    MongoCollection collection = database.getCollection(<span class="string">"javaTest"</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BasicDBObject obj = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">    obj.put(<span class="string">"name"</span>,<span class="string">"wangwu"</span>);</span><br><span class="line">    collection.deleteOne(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-查询文档"><a href="#3-5-查询文档" class="headerlink" title="3.5 查询文档"></a>3.5 查询文档</h4><h5 id="查询之前需要在MongoDB数据库中新建两个查询源：user、emp，初始化JavaScript代码如下："><a href="#查询之前需要在MongoDB数据库中新建两个查询源：user、emp，初始化JavaScript代码如下：" class="headerlink" title="查询之前需要在MongoDB数据库中新建两个查询源：user、emp，初始化JavaScript代码如下："></a><strong>查询之前需要在MongoDB数据库中新建两个查询源：user、emp，初始化JavaScript代码如下：</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//user表</span></span><br><span class="line">user1 = &#123; <span class="string">"_id"</span>:<span class="number">1</span>, <span class="string">"name"</span>:<span class="string">"zhangsan"</span>,<span class="string">"age"</span>:<span class="number">1</span>, <span class="string">"hobbies"</span>:[<span class="string">"music"</span>, <span class="string">"read"</span>],<span class="string">"addr"</span>:&#123; <span class="string">"country"</span>:<span class="string">"China"</span>,<span class="string">"city"</span>:<span class="string">"BJ"</span> &#125;&#125;</span><br><span class="line">user2 = &#123; <span class="string">"_id"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"lisi"</span>,<span class="string">"age"</span>:<span class="number">2</span>, <span class="string">"hobbies"</span>:[<span class="string">"music"</span>, <span class="string">"read"</span>],<span class="string">"addr"</span>:&#123;<span class="string">"country"</span>:<span class="string">"China"</span>, <span class="string">"city"</span>:<span class="string">"SH"</span>&#125;&#125;</span><br><span class="line">user3 = &#123; <span class="string">"_id"</span>:<span class="number">3</span>, <span class="string">"name"</span>:<span class="string">"wangwu"</span>,<span class="string">"age"</span>:<span class="number">3</span>,<span class="string">"hobbies"</span>:[<span class="string">"music"</span>, <span class="string">"read"</span>],<span class="string">"addr"</span>:&#123;<span class="string">"country"</span>:<span class="string">"China"</span>,<span class="string">"city"</span>:<span class="string">"GZ"</span>&#125;&#125;</span><br><span class="line">user4 = &#123;<span class="string">"_id"</span>:<span class="number">4</span>,<span class="string">"name"</span>:<span class="string">"zhaoliu"</span>,<span class="string">"age"</span>:<span class="number">4</span>,<span class="string">"hobbies"</span>:[<span class="string">"music"</span>, <span class="string">"read"</span>],<span class="string">"addr"</span>:&#123; <span class="string">"country"</span>:<span class="string">"China"</span>,<span class="string">"city"</span>:<span class="string">"SZ"</span>&#125;&#125;</span><br><span class="line">user5 = &#123;<span class="string">"_id"</span>:<span class="number">5</span>,<span class="string">"name"</span>:<span class="string">"tianqi"</span>,<span class="string">"age"</span>:<span class="number">5</span>,<span class="string">"hobbies"</span>:[<span class="string">"music"</span>, <span class="string">"read"</span>],<span class="string">"addr"</span>:&#123;<span class="string">"country"</span>:<span class="string">"China"</span>,<span class="string">"city"</span>:<span class="string">"TY"</span>&#125;&#125;</span><br><span class="line">db.user.insertMany([user1, user2, user3, user4, user5])</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// emp表，练习Aggregate语法，先插入如下数据：</span></span><br><span class="line"></span><br><span class="line">emp1 = &#123;<span class="string">"_id"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"武大郎"</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"hire_date"</span>:<span class="string">"20170301"</span>,<span class="string">"post"</span>:<span class="string">"烧饼检察官"</span>,<span class="string">"salary"</span>:<span class="number">7300.33</span>&#125;</span><br><span class="line">emp2 = &#123;<span class="string">"_id"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"武松"</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>,<span class="string">"age"</span>:<span class="number">78</span>,<span class="string">"hire_date"</span>:<span class="string">"20150302"</span>,<span class="string">"post"</span>:<span class="string">"公务员"</span>,<span class="string">"salary"</span>:<span class="number">71000000.31</span>&#125;</span><br><span class="line">emp3 = &#123;<span class="string">"_id"</span>:<span class="number">3</span>,<span class="string">"name"</span>:<span class="string">"宋江"</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>,<span class="string">"age"</span>:<span class="number">81</span>,<span class="string">"hire_date"</span>:<span class="string">"20130305"</span>,<span class="string">"post"</span>:<span class="string">"公务员"</span>,<span class="string">"salary"</span>:<span class="number">78300</span>&#125;</span><br><span class="line">emp4 = &#123;<span class="string">"_id"</span>:<span class="number">4</span>,<span class="string">"name"</span>:<span class="string">"林冲"</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>,<span class="string">"age"</span>:<span class="number">73</span>,<span class="string">"hire_date"</span>:<span class="string">"20140701"</span>,<span class="string">"post"</span>:<span class="string">"公务员"</span>,<span class="string">"salary"</span>:<span class="number">73500</span>&#125;</span><br><span class="line">emp5 = &#123;<span class="string">"_id"</span>:<span class="number">5</span>,<span class="string">"name"</span>:<span class="string">"林冲"</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>,<span class="string">"age"</span>:<span class="number">73</span>,<span class="string">"hire_date"</span>:<span class="string">"20140701"</span>,<span class="string">"post"</span>:<span class="string">"公务员"</span>,<span class="string">"salary"</span>:<span class="number">73500</span>&#125;</span><br><span class="line">emp6 = &#123;<span class="string">"_id"</span>:<span class="number">6</span>,<span class="string">"name"</span>:<span class="string">"柴进"</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>,<span class="string">"age"</span>:<span class="number">28</span>,<span class="string">"hire_date"</span>:<span class="string">"20121101"</span>,<span class="string">"post"</span>:<span class="string">"公务员"</span>,<span class="string">"salary"</span>:<span class="number">72100</span>&#125;</span><br><span class="line">emp7 = &#123;<span class="string">"_id"</span>:<span class="number">7</span>,<span class="string">"name"</span>:<span class="string">"卢俊义"</span>,<span class="string">"sex"</span>:<span class="string">"female"</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"hire_date"</span>:<span class="string">"20110211"</span>,<span class="string">"post"</span>:<span class="string">"公务员"</span>,<span class="string">"salary"</span>:<span class="number">79000</span>&#125;</span><br><span class="line">emp8 = &#123;<span class="string">"_id"</span>:<span class="number">8</span>,<span class="string">"name"</span>:<span class="string">"高俅"</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"hire_date"</span>:<span class="string">"19000301"</span>,<span class="string">"post"</span>:<span class="string">"公务员"</span>,<span class="string">"salary"</span>:<span class="number">730000</span>&#125;</span><br><span class="line">emp9 = &#123;<span class="string">"_id"</span>:<span class="number">9</span>,<span class="string">"name"</span>:<span class="string">"鲁智深"</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>,<span class="string">"age"</span>:<span class="number">48</span>,<span class="string">"hire_date"</span>:<span class="string">"20101111"</span>,<span class="string">"post"</span>:<span class="string">"公务员"</span>,<span class="string">"salary"</span>:<span class="number">710000</span>&#125;</span><br><span class="line">emp10 = &#123;<span class="string">"_id"</span>:<span class="number">10</span>,<span class="string">"name"</span>:<span class="string">"史进"</span>,<span class="string">"sex"</span>:<span class="string">"female"</span>,<span class="string">"age"</span>:<span class="number">48</span>,<span class="string">"hire_date"</span>:<span class="string">"20150311"</span>,<span class="string">"post"</span>:<span class="string">"打手"</span>,<span class="string">"salary"</span>:<span class="number">73000.13</span>&#125;</span><br><span class="line">emp11 = &#123;<span class="string">"_id"</span>:<span class="number">11</span>,<span class="string">"name"</span>:<span class="string">"李逵"</span>,<span class="string">"sex"</span>:<span class="string">"female"</span>,<span class="string">"age"</span>:<span class="number">38</span>,<span class="string">"hire_date"</span>:<span class="string">"20101101"</span>,<span class="string">"post"</span>:<span class="string">"打手"</span>,<span class="string">"salary"</span>:<span class="number">72000.35</span>&#125;</span><br><span class="line">emp12 = &#123;<span class="string">"_id"</span>:<span class="number">12</span>,<span class="string">"name"</span>:<span class="string">"周通"</span>,<span class="string">"sex"</span>:<span class="string">"female"</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"hire_date"</span>:<span class="string">"20110312"</span>,<span class="string">"post"</span>:<span class="string">"打手"</span>,<span class="string">"salary"</span>:<span class="number">71000.37</span>&#125;</span><br><span class="line">emp13 = &#123;<span class="string">"_id"</span>:<span class="number">13</span>,<span class="string">"name"</span>:<span class="string">"石秀"</span>,<span class="string">"sex"</span>:<span class="string">"female"</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"hire_date"</span>:<span class="string">"20160513"</span>,<span class="string">"post"</span>:<span class="string">"打手"</span>,<span class="string">"salary"</span>:<span class="number">73000.29</span>&#125;</span><br><span class="line">emp14 = &#123;<span class="string">"_id"</span>:<span class="number">14</span>,<span class="string">"name"</span>:<span class="string">"李忠"</span>,<span class="string">"sex"</span>:<span class="string">"female"</span>,<span class="string">"age"</span>:<span class="number">28</span>,<span class="string">"hire_date"</span>:<span class="string">"20170127"</span>,<span class="string">"post"</span>:<span class="string">"打手"</span>,<span class="string">"salary"</span>:<span class="number">74000.33</span>&#125;</span><br><span class="line">emp15 = &#123;<span class="string">"_id"</span>:<span class="number">15</span>,<span class="string">"name"</span>:<span class="string">"吴用"</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>,<span class="string">"age"</span>:<span class="number">28</span>,<span class="string">"hire_date"</span>:<span class="string">"20160311"</span>,<span class="string">"post"</span>:<span class="string">"文人"</span>,<span class="string">"salary"</span>:<span class="number">710000.13</span>&#125;</span><br><span class="line">emp16 = &#123;<span class="string">"_id"</span>:<span class="number">16</span>,<span class="string">"name"</span>:<span class="string">"萧让"</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"hire_date"</span>:<span class="string">"19970312"</span>,<span class="string">"post"</span>:<span class="string">"文人"</span>,<span class="string">"salary"</span>:<span class="number">720000</span>&#125;</span><br><span class="line">emp17 = &#123;<span class="string">"_id"</span>:<span class="number">17</span>,<span class="string">"name"</span>:<span class="string">"安道全"</span>,<span class="string">"sex"</span>:<span class="string">"female"</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"hire_date"</span>:<span class="string">"20130311"</span>,<span class="string">"post"</span>:<span class="string">"文人"</span>,<span class="string">"salary"</span>:<span class="number">719000</span>&#125;</span><br><span class="line">emp18 = &#123;<span class="string">"_id"</span>:<span class="number">18</span>,<span class="string">"name"</span>:<span class="string">"公孙胜"</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"hire_date"</span>:<span class="string">"20150411"</span>,<span class="string">"post"</span>:<span class="string">"文人"</span>,<span class="string">"salary"</span>:<span class="number">718000</span>&#125;</span><br><span class="line">emp19 = &#123;<span class="string">"_id"</span>:<span class="number">19</span>,<span class="string">"name"</span>:<span class="string">"朱贵"</span>,<span class="string">"sex"</span>:<span class="string">"female"</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"hire_date"</span>:<span class="string">"20140512"</span>,<span class="string">"post"</span>:<span class="string">"文人"</span>,<span class="string">"salary"</span>:<span class="number">717000</span>&#125;</span><br><span class="line">db.emp.insertMany([emp1, emp2, emp3, emp4, emp5, emp6, emp7, emp8, emp9, emp10, emp11, emp12, emp13, emp14, emp15, emp16, emp17, emp18, emp19])</span><br></pre></td></tr></table></figure><h5 id="条件查询1-匹配查询"><a href="#条件查询1-匹配查询" class="headerlink" title="条件查询1:匹配查询"></a><strong>条件查询1:匹配查询</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCrud01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//连接数据库，存在选中，不存在就建立</span></span><br><span class="line">    MongoDatabase database  = mongoClient.getDatabase(<span class="string">"javadb"</span>);</span><br><span class="line">    <span class="comment">//获取集合</span></span><br><span class="line">    MongoCollection collection = database.getCollection(<span class="string">"user"</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 条件查询1</span></span><br><span class="line"><span class="comment">     * 单一字段匹配查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BasicDBObject obj = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">    obj.put(<span class="string">"name"</span>,<span class="string">"lisi"</span>);</span><br><span class="line">    MongoCursor&lt;Document&gt; docs = collection.find(obj).iterator();</span><br><span class="line">    <span class="keyword">while</span> (docs.hasNext())&#123;</span><br><span class="line">        System.out.println(docs.next().toString());</span><br><span class="line">    &#125;</span><br><span class="line">    docs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Document&#123;&#123;_id=6.0, name=lisi, age=42.0, hobbies=[music, read], addr=Document&#123;&#123;country=China, city=SH&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="条件查询2-比较、逻辑、投影、排序等查询"><a href="#条件查询2-比较、逻辑、投影、排序等查询" class="headerlink" title="条件查询2:比较、逻辑、投影、排序等查询"></a><strong>条件查询2:比较、逻辑、投影、排序等查询</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCrud02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//连接数据库，存在选中，不存在就建立</span></span><br><span class="line">    MongoDatabase database  = mongoClient.getDatabase(<span class="string">"javadb"</span>);</span><br><span class="line">    <span class="comment">//获取集合</span></span><br><span class="line">    MongoCollection&lt;Document&gt; collection = database.getCollection(<span class="string">"user"</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 条件查询2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    System.out.println(<span class="string">"查询条件_id==6.0 **************************************"</span>);</span><br><span class="line">    FindIterable&lt;Document&gt; iterable = collection.find(<span class="keyword">new</span> Document(<span class="string">"_id"</span>,<span class="number">6.0</span>));</span><br><span class="line">    iterable.forEach(<span class="keyword">new</span> Block&lt;Document&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(Document document)</span> </span>&#123;</span><br><span class="line">            System.out.println(document.toJson());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(<span class="string">"查询条件name == wangwu **************************************"</span>);</span><br><span class="line">    FindIterable&lt;Document&gt; iterable2 = collection.find(</span><br><span class="line">            <span class="keyword">new</span> Document(<span class="string">"name"</span>,<span class="keyword">new</span> Document(<span class="string">"$eq"</span>,<span class="string">"wangwu"</span>)));</span><br><span class="line">    <span class="keyword">for</span> (Document doc :iterable2)&#123;</span><br><span class="line">        System.out.println(doc.toJson());</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"查询条件name != wangwu **************************************"</span>);</span><br><span class="line">    FindIterable&lt;Document&gt; iterable3 = collection.find(</span><br><span class="line">            <span class="keyword">new</span> Document(<span class="string">"name"</span>,<span class="keyword">new</span> Document(<span class="string">"$ne"</span>,<span class="string">"wangwu"</span>)));</span><br><span class="line">    <span class="keyword">for</span> (Document doc :iterable3)&#123;</span><br><span class="line">        System.out.println(doc.toJson());</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"查询条件_id &gt;= 4 **************************************"</span>);</span><br><span class="line">    FindIterable&lt;Document&gt; iterable4 = collection.find(</span><br><span class="line">            <span class="keyword">new</span> Document(<span class="string">"_id"</span>,<span class="keyword">new</span> Document(<span class="string">"$gte"</span>,<span class="number">4</span>)));</span><br><span class="line">    <span class="keyword">for</span> (Document doc :iterable4)&#123;</span><br><span class="line">        System.out.println(doc.toJson());</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"查询条件_id &lt;= 4 **************************************"</span>);</span><br><span class="line">    FindIterable&lt;Document&gt; iterable5 = collection.find(</span><br><span class="line">            <span class="keyword">new</span> Document(<span class="string">"_id"</span>,<span class="keyword">new</span> Document(<span class="string">"$lte"</span>,<span class="number">4</span>)));</span><br><span class="line">    <span class="keyword">for</span> (Document doc :iterable5)&#123;</span><br><span class="line">        System.out.println(doc.toJson());</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"查询条件_id &lt;=4 &amp;&amp; age&gt;60 **************************************"</span>);</span><br><span class="line">    FindIterable&lt;Document&gt; iterable6 = collection.find(</span><br><span class="line">            Filters.and(Filters.lte(<span class="string">"_id"</span>,<span class="number">4</span>),Filters.gt(<span class="string">"age"</span>,<span class="number">60</span>)));</span><br><span class="line">    <span class="keyword">for</span> (Document doc :iterable6)&#123;</span><br><span class="line">        System.out.println(doc.toJson());</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"查询条件_id &lt;=4 || age&gt;60 **************************************"</span>);</span><br><span class="line">    FindIterable&lt;Document&gt; iterable7 = collection.find(</span><br><span class="line">            Filters.or(Filters.lte(<span class="string">"_id"</span>,<span class="number">4</span>),Filters.gt(<span class="string">"age"</span>,<span class="number">60</span>)));</span><br><span class="line">    <span class="keyword">for</span> (Document doc :iterable7)&#123;</span><br><span class="line">        System.out.println(doc.toJson());</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"查询条件_id in 1,3,5 **************************************"</span>);</span><br><span class="line">    FindIterable&lt;Document&gt; iterable8 = collection.find(</span><br><span class="line">            Filters.in(<span class="string">"_id"</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>));</span><br><span class="line">    <span class="keyword">for</span> (Document doc :iterable8)&#123;</span><br><span class="line">        System.out.println(doc.toJson());</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"查询条件sort 按年龄排序（升序） **************************************"</span>);</span><br><span class="line">    FindIterable&lt;Document&gt; iterable9 = collection.find()</span><br><span class="line">            .sort(<span class="keyword">new</span> Document(<span class="string">"age"</span>,<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (Document doc :iterable9)&#123;</span><br><span class="line">        System.out.println(doc.toJson());</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"查询条件 分页 第二页 每页三条 **************************************"</span>);</span><br><span class="line">    FindIterable&lt;Document&gt; iterable10 = collection.find()</span><br><span class="line">            .limit(<span class="number">3</span>).skip(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span> (Document doc :iterable10)&#123;</span><br><span class="line">        System.out.println(doc.toJson());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  select name,age from user where id=3;</span></span><br><span class="line"><span class="comment">     *  db.user.find(&#123;'_id':3&#125;,&#123;'_id':0,'name':1,'age':1&#125;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    System.out.println(<span class="string">"查询条件 投影查询 **************************************"</span>);</span><br><span class="line">    Document document11_1 = <span class="keyword">new</span> Document();</span><br><span class="line">    document11_1.put(<span class="string">"_id"</span>,<span class="number">3</span>);</span><br><span class="line">    Document document11_2 = <span class="keyword">new</span> Document();</span><br><span class="line">    document11_2.put(<span class="string">"_id"</span>,<span class="number">0</span>);</span><br><span class="line">    document11_2.put(<span class="string">"name"</span>,<span class="number">1</span>);</span><br><span class="line">    document11_2.put(<span class="string">"age"</span>,<span class="number">1</span>);</span><br><span class="line">    BasicDBObject object = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">    Document document11 = <span class="keyword">new</span> Document();</span><br><span class="line"></span><br><span class="line">    FindIterable&lt;Document&gt; iterable11 = collection.find(document11_1)</span><br><span class="line">            .projection(document11_2);<span class="comment">//projection方法查询指定字段</span></span><br><span class="line">    <span class="keyword">for</span> (Document doc :iterable11)&#123;</span><br><span class="line">        System.out.println(doc.toJson());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">查询条件_id==6.0 **************************************</span><br><span class="line">&#123; &quot;_id&quot; : 6.0, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 42.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;SH&quot; &#125; &#125;</span><br><span class="line">查询条件name==wangwu **************************************</span><br><span class="line">&#123; &quot;_id&quot; : 3.0, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 43.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;GZ&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 7.0, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 43.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;GZ&quot; &#125; &#125;</span><br><span class="line">查询条件name!=wangwu **************************************</span><br><span class="line">&#123; &quot;_id&quot; : 1.0, &quot;name&quot; : &quot;aaa&quot;, &quot;age&quot; : 180.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 10.0, &quot;name&quot; : &quot;aaa&quot;, &quot;age&quot; : 140.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;BJ&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &#123; &quot;$oid&quot; : &quot;5c00e7520af8c80c1ed52c77&quot; &#125;, &quot;name&quot; : &quot;aaa&quot;, &quot;age&quot; : 140.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 6.0, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 42.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;SH&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 5.0, &quot;name&quot; : &quot;tianqi&quot;, &quot;age&quot; : 45.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;TY&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 9.0, &quot;name&quot; : &quot;tianqi&quot;, &quot;age&quot; : 45.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;TY&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 4.0, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 44.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;SZ&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 8.0, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 44.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;SZ&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 2.0, &quot;name&quot; : &quot;李四&quot;, &quot;age&quot; : 60.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;BJ&quot; &#125; &#125;</span><br><span class="line">查询条件_id &gt;=4 **************************************</span><br><span class="line">&#123; &quot;_id&quot; : 4.0, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 44.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;SZ&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 5.0, &quot;name&quot; : &quot;tianqi&quot;, &quot;age&quot; : 45.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;TY&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 6.0, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 42.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;SH&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 7.0, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 43.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;GZ&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 8.0, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 44.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;SZ&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 9.0, &quot;name&quot; : &quot;tianqi&quot;, &quot;age&quot; : 45.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;TY&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 10.0, &quot;name&quot; : &quot;aaa&quot;, &quot;age&quot; : 140.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;BJ&quot; &#125; &#125;</span><br><span class="line">查询条件_id &lt;=4 **************************************</span><br><span class="line">&#123; &quot;_id&quot; : 1.0, &quot;name&quot; : &quot;aaa&quot;, &quot;age&quot; : 180.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 2.0, &quot;name&quot; : &quot;李四&quot;, &quot;age&quot; : 60.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;BJ&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 3.0, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 43.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;GZ&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 4.0, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 44.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;SZ&quot; &#125; &#125;</span><br><span class="line">查询条件_id &lt;=4&amp;&amp;age&gt;60 **************************************</span><br><span class="line">&#123; &quot;_id&quot; : 1.0, &quot;name&quot; : &quot;aaa&quot;, &quot;age&quot; : 180.0 &#125;</span><br><span class="line">查询条件_id &lt;=4||age&gt;60 **************************************</span><br><span class="line">&#123; &quot;_id&quot; : 1.0, &quot;name&quot; : &quot;aaa&quot;, &quot;age&quot; : 180.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 2.0, &quot;name&quot; : &quot;李四&quot;, &quot;age&quot; : 60.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;BJ&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 3.0, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 43.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;GZ&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 4.0, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 44.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;SZ&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 10.0, &quot;name&quot; : &quot;aaa&quot;, &quot;age&quot; : 140.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;BJ&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &#123; &quot;$oid&quot; : &quot;5c00e7520af8c80c1ed52c77&quot; &#125;, &quot;name&quot; : &quot;aaa&quot;, &quot;age&quot; : 140.0 &#125;</span><br><span class="line">查询条件_id in 1,3,5 **************************************</span><br><span class="line">&#123; &quot;_id&quot; : 1.0, &quot;name&quot; : &quot;aaa&quot;, &quot;age&quot; : 180.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 3.0, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 43.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;GZ&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 5.0, &quot;name&quot; : &quot;tianqi&quot;, &quot;age&quot; : 45.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;TY&quot; &#125; &#125;</span><br><span class="line">查询条件sort 按年龄排序（升序） **************************************</span><br><span class="line">&#123; &quot;_id&quot; : 6.0, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 42.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;SH&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 3.0, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 43.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;GZ&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 7.0, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 43.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;GZ&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 4.0, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 44.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;SZ&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 8.0, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 44.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;SZ&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 5.0, &quot;name&quot; : &quot;tianqi&quot;, &quot;age&quot; : 45.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;TY&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 9.0, &quot;name&quot; : &quot;tianqi&quot;, &quot;age&quot; : 45.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;TY&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 2.0, &quot;name&quot; : &quot;李四&quot;, &quot;age&quot; : 60.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;BJ&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 10.0, &quot;name&quot; : &quot;aaa&quot;, &quot;age&quot; : 140.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;BJ&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &#123; &quot;$oid&quot; : &quot;5c00e7520af8c80c1ed52c77&quot; &#125;, &quot;name&quot; : &quot;aaa&quot;, &quot;age&quot; : 140.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 1.0, &quot;name&quot; : &quot;aaa&quot;, &quot;age&quot; : 180.0 &#125;</span><br><span class="line">查询条件 分页 第二页 每页三条 **************************************</span><br><span class="line">&#123; &quot;_id&quot; : 4.0, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 44.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;SZ&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 5.0, &quot;name&quot; : &quot;tianqi&quot;, &quot;age&quot; : 45.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;TY&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 10.0, &quot;name&quot; : &quot;aaa&quot;, &quot;age&quot; : 140.0, &quot;hobbies&quot; : [&quot;music&quot;, &quot;read&quot;], &quot;addr&quot; : &#123; &quot;country&quot; : &quot;China&quot;, &quot;city&quot; : &quot;BJ&quot; &#125; &#125;</span><br><span class="line">查询条件 投影查询 **************************************</span><br><span class="line">&#123; &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 43.0 &#125;</span><br></pre></td></tr></table></figure><h5 id="条件查询3-聚合查询-match和-group和-project"><a href="#条件查询3-聚合查询-match和-group和-project" class="headerlink" title="条件查询3:聚合查询\$match和\$group和\$project"></a><strong>条件查询3:聚合查询\$match和\$group和\$project</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCrud06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 条件查询3</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//连接数据库，存在选中，不存在就建立</span></span><br><span class="line">    MongoDatabase database = mongoClient.getDatabase(<span class="string">"javadb"</span>);</span><br><span class="line">    <span class="comment">//获取集合</span></span><br><span class="line">    MongoCollection&lt;Document&gt; collection = database.getCollection(<span class="string">"emp"</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用$match和$group</span></span><br><span class="line"><span class="comment">     * select * from db1.emp where post='公务员';</span></span><br><span class="line"><span class="comment">     * db.emp.aggregate([&#123;"$match":&#123;"post":"公务员"&#125;&#125;])</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    System.out.println(<span class="string">"select * from db1.emp where post='公务员'*********************"</span>);</span><br><span class="line">    Document match = <span class="keyword">new</span> Document(<span class="string">"post"</span>,<span class="string">"公务员"</span>);</span><br><span class="line">    Document doc1 = <span class="keyword">new</span> Document(<span class="string">"$match"</span>,match);</span><br><span class="line">    List&lt;Document&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(doc1);</span><br><span class="line">    AggregateIterable&lt;Document&gt; iterable01 = collection.aggregate(list);</span><br><span class="line">    <span class="keyword">for</span> (Document doc :iterable01)&#123;</span><br><span class="line">        System.out.println(doc.toJson());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * select * from db1.emp where id &gt; 3 group by post;</span></span><br><span class="line"><span class="comment">     * db.emp.aggregate([</span></span><br><span class="line"><span class="comment">     *   &#123;"$match":&#123;"_id":&#123;"$gt":3&#125;&#125;&#125;,</span></span><br><span class="line"><span class="comment">     *   &#123;"$group":&#123;"_id":"$post",'avg_salary':&#123;"$avg":"$salary"&#125;&#125;&#125;</span></span><br><span class="line"><span class="comment">     *  ])</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    System.out.println(<span class="string">"select * from db1.emp where id &gt; 3 group by post*******************"</span>);</span><br><span class="line">    Document document2 = <span class="keyword">new</span> Document();</span><br><span class="line">    document2.put(<span class="string">"_id"</span>,<span class="string">"$post"</span>);</span><br><span class="line">    document2.put(<span class="string">"avg_salary"</span>,<span class="keyword">new</span> Document(<span class="string">"$avg"</span>,<span class="string">"$salary"</span>));</span><br><span class="line">    AggregateIterable&lt;Document&gt; iterable02 = collection.aggregate(</span><br><span class="line">      <span class="keyword">new</span> ArrayList&lt;Document&gt;(Arrays.asList(</span><br><span class="line">              <span class="keyword">new</span> Document(<span class="string">"$match"</span>,<span class="keyword">new</span> Document(<span class="string">"_id"</span>,<span class="keyword">new</span> Document(<span class="string">"$gt"</span>,<span class="number">3</span>))),</span><br><span class="line">              <span class="keyword">new</span> Document(<span class="string">"$group"</span>,document2)</span><br><span class="line">      ))</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">for</span> (Document doc :iterable02)&#123;</span><br><span class="line">        System.out.println(doc.toJson());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * select post,max(salary) from db1.emp group by post;</span></span><br><span class="line"><span class="comment">     * db.emp.aggregate([&#123;"$group":&#123;"_id":"$post","max_salary":&#123;"$max":"$salary"&#125;&#125;&#125;])</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    System.out.println(<span class="string">"select post,max(salary) from db1.emp group by post****************"</span>);</span><br><span class="line">    Document document3 = <span class="keyword">new</span> Document();</span><br><span class="line">    document3.put(<span class="string">"_id"</span>,<span class="string">"$post"</span>);</span><br><span class="line">    document3.put(<span class="string">"max_salary"</span>,<span class="keyword">new</span> Document(<span class="string">"$max"</span>,<span class="string">"$salary"</span>));</span><br><span class="line">    AggregateIterable&lt;Document&gt; iterable03 = collection.aggregate(</span><br><span class="line">            <span class="keyword">new</span> ArrayList&lt;Document&gt;(Arrays.asList(</span><br><span class="line">                    <span class="keyword">new</span> Document(<span class="string">"$group"</span>,document3)</span><br><span class="line">            ))</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">for</span> (Document doc :iterable03)&#123;</span><br><span class="line">        System.out.println(doc.toJson());</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"# select name,post,(age+1) as new_age from db1.emp;******************"</span>);</span><br><span class="line">    Document document4 = <span class="keyword">new</span> Document();</span><br><span class="line">    document4.put(<span class="string">"name"</span>,<span class="number">1</span>);</span><br><span class="line">    document4.put(<span class="string">"post"</span>,<span class="number">1</span>);</span><br><span class="line">    document4.put(<span class="string">"new_age"</span>,<span class="keyword">new</span> Document(<span class="string">"$add"</span>,<span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">"$age"</span>,<span class="number">1</span>))));</span><br><span class="line">    AggregateIterable&lt;Document&gt; iterable04 = collection.aggregate(</span><br><span class="line">        <span class="keyword">new</span> ArrayList&lt;Document&gt;(Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> Document(<span class="string">"$project"</span>,document4)</span><br><span class="line">        ))</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">for</span> (Document doc :iterable04)&#123;</span><br><span class="line">        System.out.println(doc.toJson());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">select * from db1.emp where post=&apos;公务员&apos;*********************</span><br><span class="line">&#123; &quot;_id&quot; : 2.0, &quot;name&quot; : &quot;武松&quot;, &quot;sex&quot; : &quot;male&quot;, &quot;age&quot; : 78.0, &quot;hire_date&quot; : &quot;20150302&quot;, &quot;post&quot; : &quot;公务员&quot;, &quot;salary&quot; : 7.100000031E7 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 3.0, &quot;name&quot; : &quot;宋江&quot;, &quot;sex&quot; : &quot;male&quot;, &quot;age&quot; : 81.0, &quot;hire_date&quot; : &quot;20130305&quot;, &quot;post&quot; : &quot;公务员&quot;, &quot;salary&quot; : 78300.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 4.0, &quot;name&quot; : &quot;林冲&quot;, &quot;sex&quot; : &quot;male&quot;, &quot;age&quot; : 73.0, &quot;hire_date&quot; : &quot;20140701&quot;, &quot;post&quot; : &quot;公务员&quot;, &quot;salary&quot; : 73500.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 5.0, &quot;name&quot; : &quot;林冲&quot;, &quot;sex&quot; : &quot;male&quot;, &quot;age&quot; : 73.0, &quot;hire_date&quot; : &quot;20140701&quot;, &quot;post&quot; : &quot;公务员&quot;, &quot;salary&quot; : 73500.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 6.0, &quot;name&quot; : &quot;柴进&quot;, &quot;sex&quot; : &quot;male&quot;, &quot;age&quot; : 28.0, &quot;hire_date&quot; : &quot;20121101&quot;, &quot;post&quot; : &quot;公务员&quot;, &quot;salary&quot; : 72100.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 7.0, &quot;name&quot; : &quot;卢俊义&quot;, &quot;sex&quot; : &quot;female&quot;, &quot;age&quot; : 18.0, &quot;hire_date&quot; : &quot;20110211&quot;, &quot;post&quot; : &quot;公务员&quot;, &quot;salary&quot; : 79000.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 8.0, &quot;name&quot; : &quot;高俅&quot;, &quot;sex&quot; : &quot;male&quot;, &quot;age&quot; : 18.0, &quot;hire_date&quot; : &quot;19000301&quot;, &quot;post&quot; : &quot;公务员&quot;, &quot;salary&quot; : 730000.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 9.0, &quot;name&quot; : &quot;鲁智深&quot;, &quot;sex&quot; : &quot;male&quot;, &quot;age&quot; : 48.0, &quot;hire_date&quot; : &quot;20101111&quot;, &quot;post&quot; : &quot;公务员&quot;, &quot;salary&quot; : 710000.0 &#125;</span><br><span class="line">select * from db1.emp where id &gt; 3 group by post*******************</span><br><span class="line">&#123; &quot;_id&quot; : &quot;文人&quot;, &quot;avg_salary&quot; : 716800.026 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;打手&quot;, &quot;avg_salary&quot; : 72600.294 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;公务员&quot;, &quot;avg_salary&quot; : 289683.3333333333 &#125;</span><br><span class="line">select post,max(salary) from db1.emp group by post****************</span><br><span class="line">&#123; &quot;_id&quot; : &quot;文人&quot;, &quot;max_salary&quot; : 720000.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;打手&quot;, &quot;max_salary&quot; : 74000.33 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;公务员&quot;, &quot;max_salary&quot; : 7.100000031E7 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;烧饼检察官&quot;, &quot;max_salary&quot; : 7300.33 &#125;</span><br><span class="line"># select name,post,(age+1) as new_age from db1.emp;******************</span><br><span class="line">&#123; &quot;_id&quot; : 1.0, &quot;name&quot; : &quot;武大郎&quot;, &quot;post&quot; : &quot;烧饼检察官&quot;, &quot;new_age&quot; : 19.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 2.0, &quot;name&quot; : &quot;武松&quot;, &quot;post&quot; : &quot;公务员&quot;, &quot;new_age&quot; : 79.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 3.0, &quot;name&quot; : &quot;宋江&quot;, &quot;post&quot; : &quot;公务员&quot;, &quot;new_age&quot; : 82.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 4.0, &quot;name&quot; : &quot;林冲&quot;, &quot;post&quot; : &quot;公务员&quot;, &quot;new_age&quot; : 74.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 5.0, &quot;name&quot; : &quot;林冲&quot;, &quot;post&quot; : &quot;公务员&quot;, &quot;new_age&quot; : 74.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 6.0, &quot;name&quot; : &quot;柴进&quot;, &quot;post&quot; : &quot;公务员&quot;, &quot;new_age&quot; : 29.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 7.0, &quot;name&quot; : &quot;卢俊义&quot;, &quot;post&quot; : &quot;公务员&quot;, &quot;new_age&quot; : 19.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 8.0, &quot;name&quot; : &quot;高俅&quot;, &quot;post&quot; : &quot;公务员&quot;, &quot;new_age&quot; : 19.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 9.0, &quot;name&quot; : &quot;鲁智深&quot;, &quot;post&quot; : &quot;公务员&quot;, &quot;new_age&quot; : 49.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 10.0, &quot;name&quot; : &quot;史进&quot;, &quot;post&quot; : &quot;打手&quot;, &quot;new_age&quot; : 49.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 11.0, &quot;name&quot; : &quot;李逵&quot;, &quot;post&quot; : &quot;打手&quot;, &quot;new_age&quot; : 39.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 12.0, &quot;name&quot; : &quot;周通&quot;, &quot;post&quot; : &quot;打手&quot;, &quot;new_age&quot; : 19.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 13.0, &quot;name&quot; : &quot;石秀&quot;, &quot;post&quot; : &quot;打手&quot;, &quot;new_age&quot; : 19.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 14.0, &quot;name&quot; : &quot;李忠&quot;, &quot;post&quot; : &quot;打手&quot;, &quot;new_age&quot; : 29.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 15.0, &quot;name&quot; : &quot;吴用&quot;, &quot;post&quot; : &quot;文人&quot;, &quot;new_age&quot; : 29.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 16.0, &quot;name&quot; : &quot;萧让&quot;, &quot;post&quot; : &quot;文人&quot;, &quot;new_age&quot; : 19.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 17.0, &quot;name&quot; : &quot;安道全&quot;, &quot;post&quot; : &quot;文人&quot;, &quot;new_age&quot; : 19.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 18.0, &quot;name&quot; : &quot;公孙胜&quot;, &quot;post&quot; : &quot;文人&quot;, &quot;new_age&quot; : 19.0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 19.0, &quot;name&quot; : &quot;朱贵&quot;, &quot;post&quot; : &quot;文人&quot;, &quot;new_age&quot; : 19.0 &#125;</span><br></pre></td></tr></table></figure><h5 id="条件查询4-sort和-limit和-skip"><a href="#条件查询4-sort和-limit和-skip" class="headerlink" title="条件查询4:\$sort和\$limit和\$skip"></a><strong>条件查询4:\$sort和\$limit和\$skip</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCrud04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//连接数据库，存在选中，不存在就建立</span></span><br><span class="line">    MongoDatabase database = mongoClient.getDatabase(<span class="string">"javadb"</span>);</span><br><span class="line">    <span class="comment">//获取集合</span></span><br><span class="line">    MongoCollection&lt;Document&gt; collection = database.getCollection(<span class="string">"emp"</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 条件查询4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    System.out.println(<span class="string">"取平均工资最高的第二个部门***************************"</span>);</span><br><span class="line">    Document group = <span class="keyword">new</span> Document();</span><br><span class="line">    group.put(<span class="string">"_id"</span>,<span class="string">"$post"</span>);</span><br><span class="line">    group.put(<span class="string">"平均工资"</span>,<span class="keyword">new</span> Document(<span class="string">"$avg"</span>,<span class="string">"$salary"</span>));</span><br><span class="line">    AggregateIterable&lt;Document&gt; iterable05 = collection.aggregate(</span><br><span class="line">            <span class="keyword">new</span> ArrayList&lt;Document&gt;(Arrays.asList(</span><br><span class="line">                    <span class="keyword">new</span> Document(<span class="string">"$group"</span>,group),</span><br><span class="line">                    <span class="keyword">new</span> Document(<span class="string">"$sort"</span>,<span class="keyword">new</span> Document(<span class="string">"平均工资"</span>,-<span class="number">1</span>)),</span><br><span class="line">                    <span class="keyword">new</span> Document(<span class="string">"$limit"</span>,<span class="number">2</span>),</span><br><span class="line">                    <span class="keyword">new</span> Document(<span class="string">"$skip"</span>,<span class="number">1</span>)</span><br><span class="line">            ))</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">for</span> (Document doc :iterable05)&#123;</span><br><span class="line">        System.out.println(doc.toJson());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">取平均工资最高的第二个部门***************************</span><br><span class="line">&#123; &quot;_id&quot; : &quot;文人&quot;, &quot;平均工资&quot; : 716800.026 &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;借助mongo-java-driver包，对MongoDB数据库的集合（DataTable）及文档（BSON对象数据）进行增删查改操作。本文的核心在于查询操作，善用mongo-java-driver包下的Iterable迭代器、fing()方法、aggregate()方法，理解Document对象映射BSON对象的底层实现，可完成类似窗口命令行下javascript代码操作MongoDB数据库的所有查询。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-环境搭建&quot;&gt;&lt;a href=&quot;#1-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;1. 环境搭建&quot;&gt;&lt;/a&gt;1. 环境搭建&lt;/h3&gt;&lt;h4 id=&quot;1-1-创建项目&quot;&gt;&lt;a href=&quot;#1-1-创建项目&quot; class=&quot;headerlink&quot; title=&quot;1.1  创建项目&quot;&gt;&lt;/a&gt;1.1  创建项目&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;本文是在Idea编辑器Maven环境下创建quickstart项目。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-2-添加依赖&quot;&gt;&lt;a href=&quot;#1-2-添加依赖&quot; class=&quot;headerlink&quot; title=&quot;1.2  添加依赖&quot;&gt;&lt;/a&gt;1.2  添加依赖&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;引入junit测试单元，可方便测试代码；&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;引入MongoDB驱动包，3.9.1版本；&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Linux启动MongoDB所遇问题</title>
    <link href="http://yoursite.com/2016/01/25/md_%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%B5%85%E8%B0%88Linux%E5%90%AF%E5%8A%A8MongoDB%E6%89%80%E9%81%87%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/01/25/md_数据库/浅谈Linux启动MongoDB所遇问题/</id>
    <published>2016-01-25T00:01:45.000Z</published>
    <updated>2019-01-02T09:54:51.807Z</updated>
    
    <content type="html"><![CDATA[<p></p><h2 style="line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 34px; border-bottom: 1px solid #dbdbdb; color: #333;">libc.so.6: version `GLIBC_2.14’ not found问题</h2><p></p><p></p><p style="line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;"><strong style="line-height: 160%; box-sizing: content-box; font-weight: 700;">出现这个错误的原因是：Red Hat系统的glibc的版本太低，软件编译时使用了较高的glibc版本引起的。解决方法如下：</strong></p><br><a id="more"></a><p></p><h3 style="line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 27px; color: #333;">1.查看系统glibc支持的版本</h3><br><ul style="line-height: 160%; box-sizing: content-box; display: block; list-style-type: disc; padding-left: 30px; margin: 6px 0 10px; color: #333;"><br><li style="line-height: 160%; box-sizing: content-box; position: relative;">命令行输入strings /lib64/libc.so.6 |grep GLIBC_</li><br></ul><br><pre style="line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; margin: 2px 0 8px; background-color: #f5f7f8;"><code style="display: block; overflow-x: auto; background: #1e1e1e; line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; letter-spacing: -.3px; padding: 18px; color: #f4f4f4; white-space: pre-wrap;">[root@localhost bin]# strings /lib64/libc.so.6 |grep GLIBC_<br>GLIBC_2.2.5<br>GLIBC_2.2.6<br>GLIBC_2.3<br>GLIBC_2.3.2<br>GLIBC_2.3.3<br>GLIBC_2.3.4<br>GLIBC_2.4<br>GLIBC_2.5<br>GLIBC_2.6<br>GLIBC_2.7<br>GLIBC_2.8<br>GLIBC_2.9<br>GLIBC_2.10<br>GLIBC_2.11<br>GLIBC_2.12<br>GLIBC_PRIVATE<br></code></pre><br><ul style="line-height: 160%; box-sizing: content-box; display: block; list-style-type: disc; padding-left: 30px; margin: 6px 0 10px; color: #333;"><br><li style="line-height: 160%; box-sizing: content-box; position: relative;">命令行输入rpm -qa |grep glibc</li><br></ul><br><pre style="line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; margin: 2px 0 8px; background-color: #f5f7f8;"><code style="display: block; overflow-x: auto; background: #1e1e1e; line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; letter-spacing: -.3px; padding: 18px; color: #f4f4f4; white-space: pre-wrap;">[root@localhost bin]# rpm -qa |grep glibc<br>glibc-headers-2.12-1.212.el6.x86_64<br>glibc-2.12-1.212.el6.x86_64<br>glibc-devel-2.12-1.212.el6.x86_64<br>glibc-common-2.12-1.212.el6.x86_64<br></code></pre><br><p style="line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;"><strong style="line-height: 160%; box-sizing: content-box; font-weight: 700;">可以看出系统只支持到2.12版本，本文使用的是glibc-2.14.tar.xz这个版本。</strong></p><br><h3 style="line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 27px; color: #333;">2.下载glibc-2.14.tar.xz</h3><br><ul style="line-height: 160%; box-sizing: content-box; display: block; list-style-type: disc; padding-left: 30px; margin: 6px 0 10px; color: #333;"><br><li style="line-height: 160%; box-sizing: content-box; position: relative;">注：可以到<a href="http://www.gnu.org/software/libc/下载最新版本，我这里直接通过wget命令下载glibc-2.14.tar.xz&nbsp;这个版本，解压到任意目录准备编译" target="_blank" rel="noopener">http://www.gnu.org/software/libc/下载最新版本，我这里直接通过wget命令下载glibc-2.14.tar.xz&nbsp;这个版本，解压到任意目录准备编译</a></li><br><li style="line-height: 160%; box-sizing: content-box; position: relative;">命令行输入wget&nbsp;<a href="http://ftp.gnu.org/gnu/glibc/glibc-2.14.tar.xz" target="_blank" rel="noopener">http://ftp.gnu.org/gnu/glibc/glibc-2.14.tar.xz</a></li><br></ul><br><pre style="line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; margin: 2px 0 8px; background-color: #f5f7f8;"><code style="display: block; overflow-x: auto; background: #1e1e1e; line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; letter-spacing: -.3px; padding: 18px; color: #f4f4f4; white-space: pre-wrap;">[root@localhost usr]# wget <a href="http://ftp.gnu.org/gnu/glibc/glibc-2.14.tar.xz" target="_blank" rel="noopener">http://ftp.gnu.org/gnu/glibc/glibc-2.14.tar.xz</a><br></code></pre><br><h3 style="line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 27px; color: #333;">3.解压到指定文件夹</h3><br><ul style="line-height: 160%; box-sizing: content-box; display: block; list-style-type: disc; padding-left: 30px; margin: 6px 0 10px; color: #333;"><br><li style="line-height: 160%; box-sizing: content-box; position: relative;">命令行输入[root@localhost usr]# tar xvJf glibc-2.14.tar.xz glibc</li><br></ul><br><pre style="line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; margin: 2px 0 8px; background-color: #f5f7f8;"><code style="display: block; overflow-x: auto; background: #1e1e1e; line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; letter-spacing: -.3px; padding: 18px; color: #f4f4f4; white-space: pre-wrap;">[root@localhost usr]# tar xvJf glibc-2.14.tar.xz /usr/glibc<br></code></pre><br><ul style="line-height: 160%; box-sizing: content-box; display: block; list-style-type: disc; padding-left: 30px; margin: 6px 0 10px; color: #333;"><br><li style="line-height: 160%; box-sizing: content-box; position: relative;">注：若解压tar.xz文件出错，请命令行输入安装：yum -y install xz</li><br></ul><br><h3 style="line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 27px; color: #333;">4.进入到glibc源码目录并建立build目录，并进入</h3><br><pre style="line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; margin: 2px 0 8px; background-color: #f5f7f8;"><code style="display: block; overflow-x: auto; background: #1e1e1e; line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; letter-spacing: -.3px; padding: 18px; color: #f4f4f4; white-space: pre-wrap;">[root@localhost usr]# cd glibc<br>[root@localhost glibc]# cd glibc-2.14<br>[root@localhost build]# mkdir build<br>[root@localhost glibc-2.14]# cd build<br>[root@localhost build]#<br></code></pre><br><h3 style="line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 27px; color: #333;">5.运行configure配置，make &amp;&amp; sudo &nbsp;make install</h3><br><pre style="line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; margin: 2px 0 8px; background-color: #f5f7f8;"><code style="display: block; overflow-x: auto; background: #1e1e1e; line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; letter-spacing: -.3px; padding: 18px; color: #f4f4f4; white-space: pre-wrap;">[root@localhost build]# ../configure –prefix=/opt/glibc-2.14<br>[root@localhost build]# make -j4<br></code></pre><br><p style="line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;"><strong style="line-height: 160%; box-sizing: content-box; font-weight: 700;">持续5-10分钟的等待。。。</strong></p><br><pre style="line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; margin: 2px 0 8px; background-color: #f5f7f8;"><code style="display: block; overflow-x: auto; background: #1e1e1e; line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; letter-spacing: -.3px; padding: 18px; color: #f4f4f4; white-space: pre-wrap;">[root@localhost glibc-2.14]# make install<br></code></pre><br><p style="line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;"><strong style="line-height: 160%; box-sizing: content-box; font-weight: 700;">持续2-5分钟的等待。。。</strong></p><br><h3 style="line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 27px; color: #333;">6.配置（重要步骤，缺少文件）</h3><br><pre style="line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; margin: 2px 0 8px; background-color: #f5f7f8;"><code style="display: block; overflow-x: auto; background: #1e1e1e; line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; letter-spacing: -.3px; padding: 18px; color: #f4f4f4; white-space: pre-wrap;">[root@localhost glibc-2.14]# cp  /etc/ld.so.c* /opt/glibc-2.14/etc/<br>cp：是否覆盖”/opt/glibc-2.14/etc/ld.so.cache”？ y<br>cp: 略过目录”/etc/ld.so.conf.d”<br>[root@localhost glibc-2.14]# ln -sf /opt/glibc-2.14/lib/libc-2.14.so /lib64/libc.so.6<br></code></pre><br><h3 style="line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 27px; color: #333;">7.查看当前版本库的支持</h3><br><pre style="line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; margin: 2px 0 8px; background-color: #f5f7f8;"><code style="display: block; overflow-x: auto; background: #1e1e1e; line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; letter-spacing: -.3px; padding: 18px; color: #f4f4f4; white-space: pre-wrap;">[root@localhost glibc-2.14]# strings /lib64/libc.so.6 | grep GLIBC<br>GLIBC_2.2.5<br>GLIBC_2.2.6<br>GLIBC_2.3<br>GLIBC_2.3.2<br>GLIBC_2.3.3<br>GLIBC_2.3.4<br>GLIBC_2.4<br>GLIBC_2.5<br>GLIBC_2.6<br>GLIBC_2.7<br>GLIBC_2.8<br>GLIBC_2.9<br>GLIBC_2.10<br>GLIBC_2.11<br>GLIBC_2.12<br>GLIBC_2.13<br>GLIBC_2.14<br>GLIBC_PRIVATE<br></code></pre><br><h3 style="line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 27px; color: #333;">8.恭喜完成操作，您可以继续其他操作了。</h3><p><center style="display:none !important;visibility:collapse !important;height:0 !important;white-space:nowrap;width:100%;overflow:hidden"></center></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;h2 style=&quot;line-height: 160%; box-sizing: content-box; font-weight: 700; font-size: 34px; border-bottom: 1px solid #dbdbdb; color: #333;&quot;&gt;libc.so.6: version `GLIBC_2.14’ not found问题&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;&quot;&gt;&lt;strong style=&quot;line-height: 160%; box-sizing: content-box; font-weight: 700;&quot;&gt;出现这个错误的原因是：Red Hat系统的glibc的版本太低，软件编译时使用了较高的glibc版本引起的。解决方法如下：&lt;/strong&gt;&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB数据库基本语法练习——查询篇</title>
    <link href="http://yoursite.com/2016/01/25/md_%E6%95%B0%E6%8D%AE%E5%BA%93/MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E7%BB%83%E4%B9%A0%E2%80%94%E2%80%94%E6%9F%A5%E8%AF%A2%E7%AF%87/"/>
    <id>http://yoursite.com/2016/01/25/md_数据库/MongoDB数据库基本语法练习——查询篇/</id>
    <published>2016-01-25T00:01:45.000Z</published>
    <updated>2019-01-02T09:52:09.323Z</updated>
    
    <content type="html"><![CDATA[<hr><p><strong>MongoDB是一个介于关系型数据库和菲关系型数据库之间的产品，其最大的特点是它支持的查询语言非常强大，且其语法有点类似面向对象的查询语言几乎可以实现类似关系型数据库单表查询的绝大部分功能。<br>下面是我本人练习MongoDB数据库基本语法（查询篇）的JavaScript代码（编辑环境：Robo 3T-1.2 绿色版）：</strong></p><a id="more"></a><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***************批量插入数据*****************/</span></span><br><span class="line"></span><br><span class="line">user1 = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"_id"</span>:<span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"zhangsan"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"age"</span>:<span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"hobbies"</span>:[<span class="string">"music"</span>, <span class="string">"read"</span>],</span><br><span class="line"></span><br><span class="line">    <span class="string">"addr"</span>:&#123;</span><br><span class="line"></span><br><span class="line">        <span class="string">"country"</span>:<span class="string">"China"</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">"city"</span>:<span class="string">"BJ"</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user2 = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"_id"</span>:<span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"lisi"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"age"</span>:<span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"hobbies"</span>:[<span class="string">"music"</span>, <span class="string">"read"</span>],</span><br><span class="line"></span><br><span class="line">    <span class="string">"addr"</span>:&#123;</span><br><span class="line"></span><br><span class="line">        <span class="string">"country"</span>:<span class="string">"China"</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">"city"</span>:<span class="string">"SH"</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user3 = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"_id"</span>:<span class="number">3</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"wangwu"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"age"</span>:<span class="number">3</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"hobbies"</span>:[<span class="string">"music"</span>, <span class="string">"read"</span>],</span><br><span class="line"></span><br><span class="line">    <span class="string">"addr"</span>:&#123;</span><br><span class="line"></span><br><span class="line">        <span class="string">"country"</span>:<span class="string">"China"</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">"city"</span>:<span class="string">"GZ"</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user4 = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"_id"</span>:<span class="number">4</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"zhaoliu"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"age"</span>:<span class="number">4</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"hobbies"</span>:[<span class="string">"music"</span>, <span class="string">"read"</span>],</span><br><span class="line"></span><br><span class="line">    <span class="string">"addr"</span>:&#123;</span><br><span class="line"></span><br><span class="line">        <span class="string">"country"</span>:<span class="string">"China"</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">"city"</span>:<span class="string">"SZ"</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user5 = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"_id"</span>:<span class="number">5</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"tianqi"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"age"</span>:<span class="number">5</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"hobbies"</span>:[<span class="string">"music"</span>, <span class="string">"read"</span>],</span><br><span class="line"></span><br><span class="line">    <span class="string">"addr"</span>:&#123;</span><br><span class="line"></span><br><span class="line">        <span class="string">"country"</span>:<span class="string">"China"</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">"city"</span>:<span class="string">"TY"</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.user.insertMany([user1, user2, user3, user4, user5])</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *1、查询所有</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">db.ser.find() <span class="comment">//等同于db.user.find(&#123;&#125;)</span></span><br><span class="line"></span><br><span class="line">db.user.distinct(<span class="string">"age"</span>)<span class="comment">//去重</span></span><br><span class="line"></span><br><span class="line">db.user.find().pretty()<span class="comment">//格式化的方式来显示所有文档</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//select * from user where id != 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *3、比较查询</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * =，!= ('$ne') ，&gt; ('$gt') ，&lt; ('$lt') ，&gt;= ('$gte') ，&lt;= ('$lte')</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//select * from user where id = 3</span></span><br><span class="line">db.user.find(&#123;<span class="string">"_id"</span>:<span class="number">3</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//select * from user where id != 3</span></span><br><span class="line">db.user.find(&#123;<span class="string">"_id"</span>:&#123;<span class="string">"$ne"</span>:<span class="number">3</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//select * from user where id &gt; 3</span></span><br><span class="line">db.user.find(&#123;<span class="string">"_id"</span>:&#123;<span class="string">"$gt"</span>:<span class="number">3</span>&#125;&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">//select * from user where age &lt; 3</span></span><br><span class="line">db.user.find(&#123;<span class="string">"_id"</span>:&#123;<span class="string">"$lt"</span>:<span class="number">3</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//select * from user where id &gt;= 3</span></span><br><span class="line">db.user.find(&#123;<span class="string">"_id"</span>:&#123;<span class="string">"$gte"</span>:<span class="number">3</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//select * from user where id &lt;= 3</span></span><br><span class="line">db.user.find(&#123;<span class="string">"_id"</span>:&#123;<span class="string">"$lte"</span>:<span class="number">3</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *3、逻辑查询</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * $and,$or,$not</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// select * from user where id &gt;=3 and id &lt;=4;</span></span><br><span class="line">db.user.find(&#123;<span class="string">"_id"</span>:&#123;<span class="string">"$gte"</span>:<span class="number">3</span>,<span class="string">"$lte"</span>:<span class="number">4</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// select * from user where id &gt;=3 and id &lt;=4 and age &gt;=4;</span></span><br><span class="line">db.user.find(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"_id"</span>:&#123;<span class="string">"$gte"</span>:<span class="number">3</span>,<span class="string">"$lte"</span>:<span class="number">4</span>&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">"age"</span>:&#123;<span class="string">"$gte"</span>:<span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">db.user.find(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"$and"</span>: [</span><br><span class="line"></span><br><span class="line">        &#123;<span class="string">"_id"</span>: &#123;<span class="string">"$gte"</span>:<span class="number">3</span>, <span class="string">"$lte"</span>:<span class="number">4</span>&#125;&#125;,</span><br><span class="line"></span><br><span class="line">        &#123;<span class="string">"age"</span>: &#123;<span class="string">"$gte"</span>:<span class="number">4</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// select * from user where id &gt;=0 and id &lt;=1 or id &gt;=4 or name = "tianqi";</span></span><br><span class="line">db.user.find(&#123;</span><br><span class="line"></span><br><span class="line">    $or: [</span><br><span class="line"></span><br><span class="line">        &#123;<span class="string">"_id"</span>: &#123;<span class="attr">$gte</span>:<span class="number">0</span>, <span class="attr">$lte</span>:<span class="number">1</span>&#125;&#125;,</span><br><span class="line"></span><br><span class="line">        &#123;<span class="string">"_id"</span>: &#123;<span class="attr">$lte</span>:<span class="number">4</span>&#125;&#125;,</span><br><span class="line"></span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"tianqi"</span>&#125;</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// select * from user where id % 2 = 1;</span></span><br><span class="line">db.user.find(&#123;<span class="string">"_id"</span>:&#123;<span class="string">"$mod"</span>:[<span class="number">2</span>,<span class="number">1</span>]&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//上一条取反</span></span><br><span class="line"></span><br><span class="line">db.user.find(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"_id"</span>:&#123;<span class="string">"$not"</span>:&#123;<span class="string">"$mod"</span>:[<span class="number">2</span>,<span class="number">1</span>]&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *4、成员查询</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * $in ， $nin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// select * from user where age in (1,2,3);</span></span><br><span class="line">db.user.find(&#123;<span class="string">"age"</span>:&#123;<span class="string">"$in"</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// select * from user where name not in ("zhangsan","lisi");</span></span><br><span class="line">db.user.find(&#123;<span class="string">"name"</span>:&#123;<span class="string">"$nin"</span>:[<span class="string">"zhangsan"</span>,<span class="string">"lisi"</span>]&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *5、$type操作符查询</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * MongoDB可以使用的类型操作符：1-Double、2-String、3-Object、4-Array、5-Binary Data、8-Boolan、9-Date ...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询name是字符串类型的数据</span></span><br><span class="line">db.user.find(&#123;<span class="attr">name</span>:&#123;<span class="attr">$type</span>:<span class="number">2</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *6、正则查询</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 正则定义在/ /内</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// select * from user where name regexp '^z.*?(u|i)$';</span></span><br><span class="line"><span class="comment">// 匹配规则：z开头、n或u结尾，不区分大小写</span></span><br><span class="line">db.user.find(&#123;<span class="string">'name'</span>:<span class="regexp">/^z.*?(n|u)$/i</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *7、投影查询</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 1用来显示字段而0是用来隐藏字段，_id会默认显示出来。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// select name,age from user where id=3;</span></span><br><span class="line">db.user.find(&#123;<span class="string">'_id'</span>:<span class="number">3</span>&#125;,&#123;<span class="string">'_id'</span>:<span class="number">0</span>,<span class="string">'name'</span>:<span class="number">1</span>,<span class="string">'age'</span>:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// select name,age from user where name regexp "^z.*(n|u)$";</span></span><br><span class="line">db.user.find(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"name"</span>:<span class="regexp">/^z.*(n|u)$/i</span></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"_id"</span>:<span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"name"</span>:<span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"age"</span>:<span class="number">1</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *8、数组查询</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 查询数组相关</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查hobbies中有dancing的人</span></span><br><span class="line">db.user.find(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"hobbies"</span>:<span class="string">"music"</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看既有dancing爱好又有tea爱好的人</span></span><br><span class="line">db.user.find(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"hobbies"</span>:&#123;<span class="string">"$all"</span>:[<span class="string">"music"</span>,<span class="string">"read"</span>]&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看索引第2个爱好为dancing的人</span></span><br><span class="line">db.user.find(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"hobbies.2"</span>:<span class="string">"read"</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看所有人的第1个到第3个爱好，第一个&#123;&#125;表示查询条件为所有，第二个是显示条件</span></span><br><span class="line">db.user.find(</span><br><span class="line"></span><br><span class="line">&#123;&#125;,</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"_id"</span>:<span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"name"</span>:<span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"age"</span>:<span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"addr"</span>:<span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"hobbies"</span>:&#123;<span class="string">"$slice"</span>:[<span class="number">0</span>,<span class="number">2</span>]&#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看所有人最后两个爱好，第一个&#123;&#125;表示查询条件为所有，第二个是显示条件</span></span><br><span class="line">db.user.find(</span><br><span class="line"></span><br><span class="line">&#123;&#125;,</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"_id"</span>:<span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"name"</span>:<span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"age"</span>:<span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"addr"</span>:<span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"hobbies"</span>:&#123;<span class="string">"$slice"</span>:<span class="number">-2</span>&#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询子文档有"country":"China"的人</span></span><br><span class="line">db.user.find(</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"addr.country"</span>:<span class="string">"China"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *9、排序查询</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 1 为升序排列，而-1是用于降序排列</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按姓名正序</span></span><br><span class="line">db.user.find().sort(&#123;<span class="string">"name"</span>:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按年龄倒序 按id正序</span></span><br><span class="line">db.user.find().sort(&#123;<span class="string">"age"</span>:<span class="number">-1</span>,<span class="string">'_id'</span>:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *10、分页查询</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * limit表示取多少个document，skip代表跳过几个document</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 分页公式：db.user.find().skip((pageNum–1)*pageSize).limit(pageSize)   </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">db.user.find().limit(<span class="number">2</span>).skip(<span class="number">0</span>) <span class="comment">// 前两个</span></span><br><span class="line">db.user.find().limit(<span class="number">2</span>).skip(<span class="number">2</span>) <span class="comment">// 第三个和第四个</span></span><br><span class="line">db.user.find().limit(<span class="number">2</span>).skip(<span class="number">4</span>) <span class="comment">// 第五个和第六个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *11、统计查询</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询_id大于3的人数</span></span><br><span class="line"><span class="comment">// 方式一</span></span><br><span class="line">db.user.count(&#123;<span class="string">'_id'</span>:&#123;<span class="string">"$gt"</span>:<span class="number">3</span>&#125;&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line">db.user.find(&#123;<span class="attr">_id</span>:&#123;<span class="string">"$gt"</span>:<span class="number">3</span>&#125;&#125;).count()</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *11、聚合查询</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 在MongoDB中聚合为aggregate，聚合函数主要用到$match  $group  $avg  $project  $concat，可以加"$match"也可以不加$match  </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 练习Aggregate语法，先插入如下数据：</span></span><br><span class="line"></span><br><span class="line">emp1 = &#123;<span class="string">"_id"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"武大郎"</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"hire_date"</span>:<span class="string">"20170301"</span>,<span class="string">"post"</span>:<span class="string">"烧饼检察官"</span>,<span class="string">"salary"</span>:<span class="number">7300.33</span>&#125;</span><br><span class="line"></span><br><span class="line">emp2 = &#123;<span class="string">"_id"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"武松"</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>,<span class="string">"age"</span>:<span class="number">78</span>,<span class="string">"hire_date"</span>:<span class="string">"20150302"</span>,<span class="string">"post"</span>:<span class="string">"公务员"</span>,<span class="string">"salary"</span>:<span class="number">71000000.31</span>&#125;</span><br><span class="line"></span><br><span class="line">emp3 = &#123;<span class="string">"_id"</span>:<span class="number">3</span>,<span class="string">"name"</span>:<span class="string">"宋江"</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>,<span class="string">"age"</span>:<span class="number">81</span>,<span class="string">"hire_date"</span>:<span class="string">"20130305"</span>,<span class="string">"post"</span>:<span class="string">"公务员"</span>,<span class="string">"salary"</span>:<span class="number">78300</span>&#125;</span><br><span class="line"></span><br><span class="line">emp4 = &#123;<span class="string">"_id"</span>:<span class="number">4</span>,<span class="string">"name"</span>:<span class="string">"林冲"</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>,<span class="string">"age"</span>:<span class="number">73</span>,<span class="string">"hire_date"</span>:<span class="string">"20140701"</span>,<span class="string">"post"</span>:<span class="string">"公务员"</span>,<span class="string">"salary"</span>:<span class="number">73500</span>&#125;</span><br><span class="line"></span><br><span class="line">emp5 = &#123;<span class="string">"_id"</span>:<span class="number">5</span>,<span class="string">"name"</span>:<span class="string">"林冲"</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>,<span class="string">"age"</span>:<span class="number">73</span>,<span class="string">"hire_date"</span>:<span class="string">"20140701"</span>,<span class="string">"post"</span>:<span class="string">"公务员"</span>,<span class="string">"salary"</span>:<span class="number">73500</span>&#125;</span><br><span class="line"></span><br><span class="line">emp6 = &#123;<span class="string">"_id"</span>:<span class="number">6</span>,<span class="string">"name"</span>:<span class="string">"柴进"</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>,<span class="string">"age"</span>:<span class="number">28</span>,<span class="string">"hire_date"</span>:<span class="string">"20121101"</span>,<span class="string">"post"</span>:<span class="string">"公务员"</span>,<span class="string">"salary"</span>:<span class="number">72100</span>&#125;</span><br><span class="line"></span><br><span class="line">emp7 = &#123;<span class="string">"_id"</span>:<span class="number">7</span>,<span class="string">"name"</span>:<span class="string">"卢俊义"</span>,<span class="string">"sex"</span>:<span class="string">"female"</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"hire_date"</span>:<span class="string">"20110211"</span>,<span class="string">"post"</span>:<span class="string">"公务员"</span>,<span class="string">"salary"</span>:<span class="number">79000</span>&#125;</span><br><span class="line"></span><br><span class="line">emp8 = &#123;<span class="string">"_id"</span>:<span class="number">8</span>,<span class="string">"name"</span>:<span class="string">"高俅"</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"hire_date"</span>:<span class="string">"19000301"</span>,<span class="string">"post"</span>:<span class="string">"公务员"</span>,<span class="string">"salary"</span>:<span class="number">730000</span>&#125;</span><br><span class="line"></span><br><span class="line">emp9 = &#123;<span class="string">"_id"</span>:<span class="number">9</span>,<span class="string">"name"</span>:<span class="string">"鲁智深"</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>,<span class="string">"age"</span>:<span class="number">48</span>,<span class="string">"hire_date"</span>:<span class="string">"20101111"</span>,<span class="string">"post"</span>:<span class="string">"公务员"</span>,<span class="string">"salary"</span>:<span class="number">710000</span>&#125;</span><br><span class="line"></span><br><span class="line">emp10 = &#123;<span class="string">"_id"</span>:<span class="number">10</span>,<span class="string">"name"</span>:<span class="string">"史进"</span>,<span class="string">"sex"</span>:<span class="string">"female"</span>,<span class="string">"age"</span>:<span class="number">48</span>,<span class="string">"hire_date"</span>:<span class="string">"20150311"</span>,<span class="string">"post"</span>:<span class="string">"打手"</span>,<span class="string">"salary"</span>:<span class="number">73000.13</span>&#125;</span><br><span class="line"></span><br><span class="line">emp11 = &#123;<span class="string">"_id"</span>:<span class="number">11</span>,<span class="string">"name"</span>:<span class="string">"李逵"</span>,<span class="string">"sex"</span>:<span class="string">"female"</span>,<span class="string">"age"</span>:<span class="number">38</span>,<span class="string">"hire_date"</span>:<span class="string">"20101101"</span>,<span class="string">"post"</span>:<span class="string">"打手"</span>,<span class="string">"salary"</span>:<span class="number">72000.35</span>&#125;</span><br><span class="line"></span><br><span class="line">emp12 = &#123;<span class="string">"_id"</span>:<span class="number">12</span>,<span class="string">"name"</span>:<span class="string">"周通"</span>,<span class="string">"sex"</span>:<span class="string">"female"</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"hire_date"</span>:<span class="string">"20110312"</span>,<span class="string">"post"</span>:<span class="string">"打手"</span>,<span class="string">"salary"</span>:<span class="number">71000.37</span>&#125;</span><br><span class="line"></span><br><span class="line">emp13 = &#123;<span class="string">"_id"</span>:<span class="number">13</span>,<span class="string">"name"</span>:<span class="string">"石秀"</span>,<span class="string">"sex"</span>:<span class="string">"female"</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"hire_date"</span>:<span class="string">"20160513"</span>,<span class="string">"post"</span>:<span class="string">"打手"</span>,<span class="string">"salary"</span>:<span class="number">73000.29</span>&#125;</span><br><span class="line"></span><br><span class="line">emp14 = &#123;<span class="string">"_id"</span>:<span class="number">14</span>,<span class="string">"name"</span>:<span class="string">"李忠"</span>,<span class="string">"sex"</span>:<span class="string">"female"</span>,<span class="string">"age"</span>:<span class="number">28</span>,<span class="string">"hire_date"</span>:<span class="string">"20170127"</span>,<span class="string">"post"</span>:<span class="string">"打手"</span>,<span class="string">"salary"</span>:<span class="number">74000.33</span>&#125;</span><br><span class="line"></span><br><span class="line">emp15 = &#123;<span class="string">"_id"</span>:<span class="number">15</span>,<span class="string">"name"</span>:<span class="string">"吴用"</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>,<span class="string">"age"</span>:<span class="number">28</span>,<span class="string">"hire_date"</span>:<span class="string">"20160311"</span>,<span class="string">"post"</span>:<span class="string">"文人"</span>,<span class="string">"salary"</span>:<span class="number">710000.13</span>&#125;</span><br><span class="line"></span><br><span class="line">emp16 = &#123;<span class="string">"_id"</span>:<span class="number">16</span>,<span class="string">"name"</span>:<span class="string">"萧让"</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"hire_date"</span>:<span class="string">"19970312"</span>,<span class="string">"post"</span>:<span class="string">"文人"</span>,<span class="string">"salary"</span>:<span class="number">720000</span>&#125;</span><br><span class="line"></span><br><span class="line">emp17 = &#123;<span class="string">"_id"</span>:<span class="number">17</span>,<span class="string">"name"</span>:<span class="string">"安道全"</span>,<span class="string">"sex"</span>:<span class="string">"female"</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"hire_date"</span>:<span class="string">"20130311"</span>,<span class="string">"post"</span>:<span class="string">"文人"</span>,<span class="string">"salary"</span>:<span class="number">719000</span>&#125;</span><br><span class="line"></span><br><span class="line">emp18 = &#123;<span class="string">"_id"</span>:<span class="number">18</span>,<span class="string">"name"</span>:<span class="string">"公孙胜"</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"hire_date"</span>:<span class="string">"20150411"</span>,<span class="string">"post"</span>:<span class="string">"文人"</span>,<span class="string">"salary"</span>:<span class="number">718000</span>&#125;</span><br><span class="line"></span><br><span class="line">emp19 = &#123;<span class="string">"_id"</span>:<span class="number">19</span>,<span class="string">"name"</span>:<span class="string">"朱贵"</span>,<span class="string">"sex"</span>:<span class="string">"female"</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"hire_date"</span>:<span class="string">"20140512"</span>,<span class="string">"post"</span>:<span class="string">"文人"</span>,<span class="string">"salary"</span>:<span class="number">717000</span>&#125;</span><br><span class="line"></span><br><span class="line">db.emp.insertMany([emp1, emp2, emp3, emp4, emp5, emp6, emp7, emp8, emp9, emp10, emp11, emp12, emp13, emp14, emp15, emp16, emp17, emp18, emp19])</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *$match和$group</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;"$match":&#123;"字段":"条件"&#125;&#125;,可以使用任何常用查询操作符$gt,$lt,$in等</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// select * from db1.emp where post='公务员';</span></span><br><span class="line">db.emp.aggregate([&#123;<span class="string">"$match"</span>:&#123;<span class="string">"post"</span>:<span class="string">"公务员"</span>&#125;&#125;])</span><br><span class="line"></span><br><span class="line"><span class="comment">// select * from db1.emp where id &gt; 3 group by post;  </span></span><br><span class="line">db.emp.aggregate([</span><br><span class="line"></span><br><span class="line">    &#123;<span class="string">"$match"</span>:&#123;<span class="string">"_id"</span>:&#123;<span class="string">"$gt"</span>:<span class="number">3</span>&#125;&#125;&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;<span class="string">"$group"</span>:&#123;<span class="string">"_id"</span>:<span class="string">"$post"</span>,<span class="string">'avg_salary'</span>:&#123;<span class="string">"$avg"</span>:<span class="string">"$salary"</span>&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">// select * from db1.emp where id &gt; 3 group by post having avg(salary) &gt; 10000;  </span></span><br><span class="line">db.emp.aggregate([</span><br><span class="line"></span><br><span class="line">    &#123;<span class="string">"$match"</span>:&#123;<span class="string">"_id"</span>:&#123;<span class="string">"$gt"</span>:<span class="number">3</span>&#125;&#125;&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;<span class="string">"$group"</span>:&#123;<span class="string">"_id"</span>:<span class="string">"$post"</span>,<span class="string">'avg_salary'</span>:&#123;<span class="string">"$avg"</span>:<span class="string">"$salary"</span>&#125;&#125;&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;<span class="string">"$match"</span>:&#123;<span class="string">"avg_salary"</span>:&#123;<span class="string">"$gt"</span>:<span class="number">10000</span>&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;"$group":&#123;"_id":分组字段,"新的字段名":聚合操作符&#125;&#125;</span></span><br><span class="line"><span class="comment">// 将分组字段传给$group函数的_id字段即可</span></span><br><span class="line"><span class="comment">//&#123;"$group":&#123;"_id":"$sex"&#125;&#125; #按照性别分组</span></span><br><span class="line"><span class="comment">//&#123;"$group":&#123;"_id":"$post"&#125;&#125; #按照职位分组</span></span><br><span class="line"><span class="comment">//&#123;"$group":&#123;"_id":&#123;"state":"$state","city":"$city"&#125;&#125;&#125; #按照多个字段分组，比如按照州市分组</span></span><br><span class="line"><span class="comment">// 分组后聚合得结果,类似于sql中聚合函数的聚合操作符：$sum、$avg、$max、$min、$first、$last</span></span><br><span class="line"><span class="comment">//例1：select post,max(salary) from db1.emp group by post; </span></span><br><span class="line"></span><br><span class="line">db.emp.aggregate([&#123;<span class="string">"$group"</span>:&#123;<span class="string">"_id"</span>:<span class="string">"$post"</span>,<span class="string">"max_salary"</span>:&#123;<span class="string">"$max"</span>:<span class="string">"$salary"</span>&#125;&#125;&#125;])</span><br><span class="line"></span><br><span class="line"><span class="comment">//例2：取每个部门最大薪资与最低薪资</span></span><br><span class="line">db.emp.aggregate([&#123;<span class="string">"$group"</span>:&#123;<span class="string">"_id"</span>:<span class="string">"$post"</span>,<span class="string">"max_salary"</span>:&#123;<span class="string">"$max"</span>:<span class="string">"$salary"</span>&#125;,<span class="string">"min_salary"</span>:&#123;<span class="string">"$min"</span>:<span class="string">"$salary"</span>&#125;&#125;&#125;])</span><br><span class="line"></span><br><span class="line"><span class="comment">//例3：如果字段是排序后的，那么$first,$last会很有用,比用$max和$min效率高</span></span><br><span class="line">db.emp.aggregate([&#123;<span class="string">"$group"</span>:&#123;<span class="string">"_id"</span>:<span class="string">"$post"</span>,<span class="string">"first_id"</span>:&#123;<span class="string">"$first"</span>:<span class="string">"$_id"</span>&#125;&#125;&#125;])</span><br><span class="line"></span><br><span class="line"><span class="comment">//4：求每个部门的总工资</span></span><br><span class="line">db.emp.aggregate([&#123;<span class="string">"$group"</span>:&#123;<span class="string">"_id"</span>:<span class="string">"$post"</span>,<span class="string">"count"</span>:&#123;<span class="string">"$sum"</span>:<span class="string">"$salary"</span>&#125;&#125;&#125;, &#123;<span class="string">"$sort"</span>: &#123;<span class="string">"count"</span>: <span class="number">1</span>&#125;&#125;])</span><br><span class="line"></span><br><span class="line"><span class="comment">//5：求每个部门的人数</span></span><br><span class="line">db.emp.aggregate([&#123;<span class="string">"$group"</span>:&#123;<span class="string">"_id"</span>:<span class="string">"$post"</span>,<span class="string">"count"</span>:&#123;<span class="string">"$sum"</span>:<span class="number">1</span>&#125;&#125;&#125;, &#123;<span class="string">"$sort"</span>: &#123;<span class="string">"count"</span>: <span class="number">1</span>&#125;&#125;])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组操作符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;"$addToSet":expr&#125;#不重复</span></span><br><span class="line"><span class="comment">// &#123;"$push":expr&#125;#重复</span></span><br><span class="line"><span class="comment">// 查询岗位名以及各岗位内的员工姓名:select post,group_concat(name) from db1.emp group by post;</span></span><br><span class="line"><span class="comment">// 重复的也查询出来</span></span><br><span class="line">db.emp.aggregate([&#123;<span class="string">"$group"</span>:&#123;<span class="string">"_id"</span>:<span class="string">"$post"</span>,<span class="string">"names"</span>:&#123;<span class="string">"$push"</span>:<span class="string">"$name"</span>&#125;&#125;&#125;])</span><br><span class="line"><span class="comment">// 查询结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1 */</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"_id"</span> : <span class="string">"文人"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"names"</span> : [ </span><br><span class="line"></span><br><span class="line">        <span class="string">"吴用"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"萧让"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"安道全"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"公孙胜"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"朱贵"</span></span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 2 */</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"_id"</span> : <span class="string">"打手"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"names"</span> : [ </span><br><span class="line"></span><br><span class="line">        <span class="string">"史进"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"李逵"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"周通"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"石秀"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"李忠"</span></span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 3 */</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"_id"</span> : <span class="string">"公务员"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"names"</span> : [ </span><br><span class="line"></span><br><span class="line">        <span class="string">"武松"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"宋江"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"林冲"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"林冲"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"柴进"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"卢俊义"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"高俅"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"鲁智深"</span></span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 4 */</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"_id"</span> : <span class="string">"烧饼检察官"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"names"</span> : [ </span><br><span class="line"></span><br><span class="line">        <span class="string">"武大郎"</span></span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询不重复的，如果有重复的保留一个</span></span><br><span class="line">db.emp.aggregate([&#123;<span class="string">"$group"</span>:&#123;<span class="string">"_id"</span>:<span class="string">"$post"</span>,<span class="string">"names"</span>:&#123;<span class="string">"$addToSet"</span>:<span class="string">"$name"</span>&#125;&#125;&#125;])</span><br><span class="line"><span class="comment">// 查询结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1 */</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"_id"</span> : <span class="string">"文人"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"names"</span> : [ </span><br><span class="line"></span><br><span class="line">        <span class="string">"吴用"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"朱贵"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"萧让"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"安道全"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"公孙胜"</span></span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2 */</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"_id"</span> : <span class="string">"打手"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"names"</span> : [ </span><br><span class="line"></span><br><span class="line">        <span class="string">"李忠"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"史进"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"李逵"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"周通"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"石秀"</span></span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 3 */</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"_id"</span> : <span class="string">"公务员"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"names"</span> : [ </span><br><span class="line"></span><br><span class="line">        <span class="string">"鲁智深"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"高俅"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"宋江"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"林冲"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"卢俊义"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"武松"</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">"柴进"</span></span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 4 */</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"_id"</span> : <span class="string">"烧饼检察官"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"names"</span> : [ </span><br><span class="line"></span><br><span class="line">        <span class="string">"武大郎"</span></span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * $project</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&#123;"$project":&#123;"要保留的字段名":1,"要去掉的字段名":0,"新增的字段名":"表达式"&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// select name,post,(age+1) as new_age from db1.emp;</span></span><br><span class="line">db.emp.aggregate([</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        $project:&#123;</span><br><span class="line"></span><br><span class="line">            <span class="string">"name"</span>:<span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">            <span class="string">"post"</span>:<span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">            <span class="string">"new_age"</span>:&#123;<span class="string">"$add"</span>:[<span class="string">"$age"</span>,<span class="number">1</span>]&#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * $sort和$limit和$skip</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序：&#123;"$sort":&#123;"字段名":1,"字段名":-1&#125;&#125; #1升序，-1降序</span></span><br><span class="line"><span class="comment">// 限制：&#123;"$limit":n&#125; </span></span><br><span class="line"><span class="comment">// 跳过：&#123;"$skip":n&#125; #跳过多少个文档</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 取平均工资最高的前两个部门</span></span><br><span class="line">db.emp.aggregate([</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"$group"</span>:&#123;<span class="string">"_id"</span>:<span class="string">"$post"</span>,<span class="string">"平均工资"</span>:&#123;<span class="string">"$avg"</span>:<span class="string">"$salary"</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"$sort"</span>:&#123;<span class="string">"平均工资"</span>:<span class="number">-1</span>&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"$limit"</span>:<span class="number">2</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取平均工资最高的第二个部门</span></span><br><span class="line">db.emp.aggregate([</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"$group"</span>:&#123;<span class="string">"_id"</span>:<span class="string">"$post"</span>,<span class="string">"平均工资"</span>:&#123;<span class="string">"$avg"</span>:<span class="string">"$salary"</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"$sort"</span>:&#123;<span class="string">"平均工资"</span>:<span class="number">-1</span>&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"$limit"</span>:<span class="number">2</span></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"$skip"</span>:<span class="number">1</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * $sample</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机获取3个文档</span></span><br><span class="line">db.emp.aggregate([</span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">$sample</span>: &#123;<span class="attr">size</span>:<span class="number">3</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * $concat和$substr和$toLower和$toUpper</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">// 截取字符串</span></span><br><span class="line">db.emp.aggregate([</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        $project:&#123;</span><br><span class="line"></span><br><span class="line">            <span class="string">"_id"</span>:<span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">            <span class="string">"str"</span>: &#123;<span class="attr">$substr</span>: [<span class="string">"$sex"</span>, <span class="number">0</span>, <span class="number">2</span>]&#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼接</span></span><br><span class="line">db.emp.aggregate([</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        $project:&#123;</span><br><span class="line"></span><br><span class="line">            <span class="string">"name"</span>:<span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">            <span class="string">"post"</span>:<span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">            <span class="string">"name_sex"</span>: &#123;<span class="attr">$concat</span>: [<span class="string">"$name"</span>, <span class="string">"测试拼接"</span>, <span class="string">"$sex"</span>]&#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将性别的英文转为大写</span></span><br><span class="line">db.emp.aggregate([&#123;<span class="string">"$project"</span>:&#123;<span class="string">"sex"</span>:&#123;<span class="string">"$toUpper"</span>:<span class="string">"$sex"</span>&#125;&#125;&#125;])</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *12、索引</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 索引通常能够极大的提高查询的效率，MongoDB使用 ensureIndex()方法来创建索引 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">db.COLLECTION_NAME.ensureIndex(&#123;<span class="attr">KEY</span>:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法中 Key 值为你要创建的索引字段，1为指定按升序创建索引，-1则为按降序来创建索引。</span></span><br><span class="line">db.user.ensureIndex(&#123;<span class="string">"name"</span>:<span class="number">-1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们可以指定所建立索引的名字，如下所示：</span></span><br><span class="line">db.user.ensureIndex(&#123;<span class="string">"name"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"nameIndex"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询索引的语法格式如下所示：</span></span><br><span class="line">db.COLLECTION_NAME.getIndexes()</span><br><span class="line"></span><br><span class="line">db.user.getIndexes()</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除索引的语法格式如下所示：</span></span><br><span class="line">db.COLLECTION_NAME.dropIndex(INDEX_NAME)</span><br><span class="line">db.user.dropIndex(<span class="string">"nameIndex"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;strong&gt;MongoDB是一个介于关系型数据库和菲关系型数据库之间的产品，其最大的特点是它支持的查询语言非常强大，且其语法有点类似面向对象的查询语言几乎可以实现类似关系型数据库单表查询的绝大部分功能。&lt;br&gt;下面是我本人练习MongoDB数据库基本语法（查询篇）的JavaScript代码（编辑环境：Robo 3T-1.2 绿色版）：&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Spring自动组件扫描</title>
    <link href="http://yoursite.com/2015/12/29/md_Spring%E6%80%BB%E7%BB%93/Spring%E8%87%AA%E5%8A%A8%E7%BB%84%E4%BB%B6%E6%89%AB%E6%8F%8F/"/>
    <id>http://yoursite.com/2015/12/29/md_Spring总结/Spring自动组件扫描/</id>
    <published>2015-12-29T03:01:45.000Z</published>
    <updated>2018-12-30T12:38:20.180Z</updated>
    
    <content type="html"><![CDATA[<p>通常情况下，在XML bean配置文件声明所有的Bean类或组件，这样Spring容器可以检测并注册Bean类或组件。 其实，Spring是能够自动扫描，检测和预定义的项目包并实例化bean，不再有繁琐的Bean类声明在XML文件中。</p><h2 id="1-开启Spring自动扫描功能"><a href="#1-开启Spring自动扫描功能" class="headerlink" title="1.  开启Spring自动扫描功能"></a>1.  开启Spring自动扫描功能</h2><p>在bean配置文件中配置“context:component”表亲啊，这意味着，在 Spring 中启用自动扫描功能。base-package 是指明存储组件，Spring将扫描该文件夹，并找出Bean(注解为@Component)并注册到 Spring 容器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-2.5.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.myprj.customer"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-使用-Component注解"><a href="#2-使用-Component注解" class="headerlink" title="2.  使用@Component注解"></a>2.  使用@Component注解</h2><p>使用@Component注释来表示该类是一个自动扫描组件。</p><h2 id="3-自定义自动扫描组件名称"><a href="#3-自定义自动扫描组件名称" class="headerlink" title="3.  自定义自动扫描组件名称"></a>3.  自定义自动扫描组件名称</h2><p>你可以这样创建自定义名称：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"AAA"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerService</span> </span></span><br><span class="line"><span class="class">...</span></span><br></pre></td></tr></table></figure><p>现在，可以用’AAA’这个名称进行检索。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CustomerService cust = (CustomerService)context.getBean(<span class="string">"AAA"</span>);</span><br></pre></td></tr></table></figure><h2 id="4-自动组件扫描注释类型"><a href="#4-自动组件扫描注释类型" class="headerlink" title="4.  自动组件扫描注释类型"></a>4.  自动组件扫描注释类型</h2><p>在Spring2.5中，有4种类型的组件自动扫描注释类型</p><ul><li>@Component – 指示自动扫描组件。</li><li>@Repository – 表示在持久层DAO组件。</li><li>@Service – 表示在业务层服务组件。</li><li>@Controller – 表示在表示层控制器组件。</li></ul><h2 id="5-Spring过滤器组件自动扫描"><a href="#5-Spring过滤器组件自动扫描" class="headerlink" title="5.  Spring过滤器组件自动扫描"></a>5.  Spring过滤器组件自动扫描</h2><h3 id="5-1-过滤组件-包含"><a href="#5-1-过滤组件-包含" class="headerlink" title="5.1  过滤组件 - 包含"></a>5.1  过滤组件 - 包含</h3><p>使用Spring “过滤” 扫描并注册匹配定义“regex”，即使该类组件的名称未标注 @Component 也能被注册到Spring容器中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.myprj"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"regex"</span> </span></span><br><span class="line"><span class="tag">                      <span class="attr">expression</span>=<span class="string">"com.myprj.customer.dao.*DAO.*"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"regex"</span> </span></span><br><span class="line"><span class="tag">                      <span class="attr">expression</span>=<span class="string">"com.myprj.customer.services.*Service.*"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个XML过滤中，所有文件的名称中包含 DAO 或 Service(<em>DAO.</em>, <em>Services.</em>) 单词将被检测并在 Spring 容器中注册。</p><h3 id="5-2-过滤组件-不包含"><a href="#5-2-过滤组件-不包含" class="headerlink" title="5.2  过滤组件 - 不包含"></a>5.2  过滤组件 - 不包含</h3><p>另外，您还可以排除指定组件，以避免 Spring 检测和 Spring 容器注册。</p><p>如不包括在这些文件中标注有 @Service :</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.myprj.customer"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Service"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通常情况下，在XML bean配置文件声明所有的Bean类或组件，这样Spring容器可以检测并注册Bean类或组件。 其实，Spring是能够自动扫描，检测和预定义的项目包并实例化bean，不再有繁琐的Bean类声明在XML文件中。&lt;/p&gt;
&lt;h2 id=&quot;1-开启Spring自动扫描功能&quot;&gt;&lt;a href=&quot;#1-开启Spring自动扫描功能&quot; class=&quot;headerlink&quot; title=&quot;1.  开启Spring自动扫描功能&quot;&gt;&lt;/a&gt;1.  开启Spring自动扫描功能&lt;/h2&gt;&lt;p&gt;在bean配置文件中配置“context:component”表亲啊，这意味着，在 Spring 中启用自动扫描功能。base-package 是指明存储组件，Spring将扫描该文件夹，并找出Bean(注解为@Component)并注册到 Spring 容器：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;xmlns:context&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/beans&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;string&quot;&gt;	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;string&quot;&gt;	http://www.springframework.org/schema/context&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;string&quot;&gt;	http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;context:component-scan&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;base-package&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.myprj.customer&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring 自动封装Bean</title>
    <link href="http://yoursite.com/2015/10/29/md_Spring%E6%80%BB%E7%BB%93/Spring%E8%87%AA%E5%8A%A8%E5%B0%81%E8%A3%85Bean/"/>
    <id>http://yoursite.com/2015/10/29/md_Spring总结/Spring自动封装Bean/</id>
    <published>2015-10-29T03:01:45.000Z</published>
    <updated>2018-12-30T12:38:51.152Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在Spring框架中，可以用auto—wiring功能自动装配Bean。要启用它，只需要在xml配置文件中<bean>标签定义“autowire”属性：</bean></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.Customer"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>在Spring中，支持5中自动装配模式：</strong></p><p><em>示例：Customer和Person对象的自动装配示例</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myprj.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.person = person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerson</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.person = person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myprj.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="一、Auto-Wiring-‘no’"><a href="#一、Auto-Wiring-‘no’" class="headerlink" title="一、Auto-Wiring        ‘no’"></a>一、Auto-Wiring        ‘no’</h2><hr><p>这是默认模式，你需要通过‘ref’属性来连接bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.Customer"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"person"</span> <span class="attr">ref</span>=<span class="string">"person"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.Person"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、Auto-Wiring-‘byName’"><a href="#二、Auto-Wiring-‘byName’" class="headerlink" title="二、Auto-Wiring        ‘byName’"></a>二、Auto-Wiring        ‘byName’</h2><hr><p>按属性名称自动装配。在这种情况下，由于对“person” bean的名称是相同于“customer” bean 的属性(“person”)名称，所以，Spring会自动通过setter方法将其装配 – “setPerson(Person person)“：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.Customer"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.Person"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、Auto-Wiring-‘byType’"><a href="#三、Auto-Wiring-‘byType’" class="headerlink" title="三、Auto-Wiring        ‘byType’"></a>三、Auto-Wiring        ‘byType’</h2><hr><p>通过按属性的数据类型自动装配Bean。在这种情况下，由于“Person” bean中的数据类型是与“customer” bean的属性(Person对象)的数据类型一样的，所以，Spring会自动通过setter方法将其自动装配。– “setPerson(Person person)“：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.Customer"</span> <span class="attr">autowire</span>=<span class="string">"byType"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.Person"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、Auto-Wiring-‘constructor’"><a href="#四、Auto-Wiring-‘constructor’" class="headerlink" title="四、Auto-Wiring        ‘constructor’"></a>四、Auto-Wiring        ‘constructor’</h2><hr><p>通过构造函数参数的数据类型按属性自动装配Bean。在这种情况下，由于“person” bean的数据类型与“customer” bean的属性(Person对象)的构造函数参数的数据类型是一样的，所以，Spring通过构造方法自动装配 – “public Customer(Person person)“：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.Customer"</span> <span class="attr">autowire</span>=<span class="string">"constructor"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.Person"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五、Auto-Wiring-‘autodetect’"><a href="#五、Auto-Wiring-‘autodetect’" class="headerlink" title="五、Auto-Wiring        ‘autodetect’"></a>五、Auto-Wiring        ‘autodetect’</h2><hr><p>“通过构造函数自动装配”是指选，如果默认构造函数(参数与任何数据类型)不匹配时，以其他方式使用“按类型自动装配”：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.Customer"</span> <span class="attr">autowire</span>=<span class="string">"autodetect"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.Person"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="六、Spring使用-Autowired注解自动装配"><a href="#六、Spring使用-Autowired注解自动装配" class="headerlink" title="六、Spring使用@Autowired注解自动装配"></a>六、Spring使用@Autowired注解自动装配</h2><hr><p>在Spring中，可以使用@Autowired注解通过setter方法、构造函数或字段自动装配Bean，注意：@Autowired注解是通过匹配数据类型自动装配Bean的。</p><h3 id="1-注册AutowiredAnnotationBeanPostProcessor"><a href="#1-注册AutowiredAnnotationBeanPostProcessor" class="headerlink" title="1.  注册AutowiredAnnotationBeanPostProcessor"></a>1.  注册AutowiredAnnotationBeanPostProcessor</h3><p>要启用@Autowired，必须注册“AutowiredAnnotationBeanPostProcessor”,，你可以用以下两种方式做到这一点：</p><h4 id="1-1-Include-lt-context-annotation-config-gt"><a href="#1-1-Include-lt-context-annotation-config-gt" class="headerlink" title="1.1  Include&lt;context:annotation-config /&gt;"></a>1.1  Include&lt;context:annotation-config /&gt;</h4><p>在Bean配置文件中添加Spring上下文和&lt;context:annotation-config /&gt;：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans </span><br><span class="line">//...</span><br><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">//...</span><br><span class="line">http://www.springframework.org/schema/context</span><br><span class="line">http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;&gt;</span><br><span class="line">//...</span><br><span class="line"></span><br><span class="line">&lt;context:annotation-config /&gt;</span><br><span class="line">//...</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h4 id="1-2-包含-AutowiredAnnotationBeanPostProcessor"><a href="#1-2-包含-AutowiredAnnotationBeanPostProcessor" class="headerlink" title="1.2  包含 AutowiredAnnotationBeanPostProcessor"></a>1.2  包含 AutowiredAnnotationBeanPostProcessor</h4><p>直接在bean配置文件包含“AutowiredAnnotationBeanPostProcessor”：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean </span><br><span class="line">class=&quot;org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor&quot;/&gt;</span><br><span class="line"></span><br><span class="line">//...</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="2-Autowired使用"><a href="#2-Autowired使用" class="headerlink" title="2. @Autowired使用"></a>2. @Autowired使用</h3><p>现在，你可以通过 @Autowired 自动装配 bean，它可以在 setter 方法，构造函数或字段中使用。</p><h4 id="2-1-依赖检查"><a href="#2-1-依赖检查" class="headerlink" title="2.1  依赖检查"></a>2.1  依赖检查</h4><p>默认情况下，@Autowired将执行相关检查，以确保属性已经装配正常。当Spring无法找到匹配的Bean装配，它会抛出异常。要解决这个问题，可以通过 @Autowired 的“required”属性设置为false来禁用此检查功能，如下，如果Spring不能找到一个匹配的Bean，person属性将不设定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>(required=<span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> Person person;</span><br></pre></td></tr></table></figure><h4 id="2-2-Qualifier"><a href="#2-2-Qualifier" class="headerlink" title="2.2  @Qualifier"></a>2.2  @Qualifier</h4><p>@Qualifier注解我们用来控制bean应在字段上自动装配。例如，具有两个类似的 person bean 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-2.5.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"CustomerBean"</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.Customer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"action"</span> <span class="attr">value</span>=<span class="string">"buy"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"type"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"PersonBean1"</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"myprj-1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"address-1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"29"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"PersonBean2"</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"myprj-2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"address-2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"28"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring知道哪个 bean 应当装配？</p><p>为了解决这个问题，可以使用 @Qualifier 自动装配一个特定的 bean，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myprj.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"PersonBean1"</span>)</span><br><span class="line"><span class="keyword">private</span> Person person;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> type;</span><br><span class="line"><span class="keyword">private</span> String action;</span><br><span class="line"><span class="comment">//getter and setter methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;在Spring框架中，可以用auto—wiring功能自动装配Bean。要启用它，只需要在xml配置文件中&lt;bean&gt;标签定义“autowire”属性：&lt;/bean&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;customer&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.myprj.common.Customer&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;autowire&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;byName&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;在Spring中，支持5中自动装配模式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;示例：Customer和Person对象的自动装配示例&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.myprj.common;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Customer&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Person person;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Person person)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.person = person;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setPerson&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Person person)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.person = person;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.myprj.common;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Java与设计模式</title>
    <link href="http://yoursite.com/2015/10/29/md_Java%E9%9D%A2%E8%AF%95%E7%BB%83%E4%B9%A0%E4%B8%8E%E6%80%BB%E7%BB%93/Java%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80/"/>
    <id>http://yoursite.com/2015/10/29/md_Java面试练习与总结/Java与设计模式一/</id>
    <published>2015-10-29T03:01:45.000Z</published>
    <updated>2018-12-30T12:40:51.483Z</updated>
    
    <content type="html"><![CDATA[<p><strong>设计模式是解决问题的方案，学习现有的设计模式可以做到经验复用；使用设计模式可以重用代码，让代码更容易被他人理解，也保证了代码的可靠性。Java设计模式总体上分为三大类：创建型模式、结构型模式、行为型模式，而每一大类都细分有多种设计模式，每种模式都有相应的原理与之对应。</strong></p><h2 id="1-单例模式（Singleton）"><a href="#1-单例模式（Singleton）" class="headerlink" title="1. 单例模式（Singleton）"></a>1. 单例模式（Singleton）</h2><h3 id="1-1-单例模式的特点"><a href="#1-1-单例模式的特点" class="headerlink" title="1.1 单例模式的特点"></a>1.1 单例模式的特点</h3><ul><li>单例类只能有一个实例；</li><li>单例类必须自己创建自己的唯一实例；</li><li>单例类必须给所有其他对象提供这一实例。</li></ul><h3 id="1-2-Java单例模式"><a href="#1-2-Java单例模式" class="headerlink" title="1.2 Java单例模式"></a>1.2 Java单例模式</h3><p><strong>Java的单例模式实现方式有四种：饿汉模式、懒汉模式、静态内部类、枚举类；使用一个私有构造函数、一个私有静态变量以及一个公有静态函数来实现。</strong></p><a id="more"></a><h4 id="Ⅰ-懒汉式——线程不安全"><a href="#Ⅰ-懒汉式——线程不安全" class="headerlink" title="Ⅰ. 懒汉式——线程不安全"></a>Ⅰ. 懒汉式——线程不安全</h4><p>懒汉式的私有静态单例被延迟实例化，当没有用到该类时将不会被实例化，达到节约资源的目的；缺点是如果多个线程同时访问可能导致单例被多次实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、懒汉模式-线程不安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton01</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton01 singleton;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton01</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton01 <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == singleton)&#123;</span><br><span class="line">           singleton = <span class="keyword">new</span> Singleton01();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Ⅱ-饿汉式——线程安全"><a href="#Ⅱ-饿汉式——线程安全" class="headerlink" title="Ⅱ. 饿汉式——线程安全"></a>Ⅱ. 饿汉式——线程安全</h4><p>饿汉式是在类加载时直接实例化该单例类达到线程安全的目的，但这样直接实例化的方式失去了延迟实例化带来的节约资源的好处。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2、饿汉模式-线程安全,不够节约资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton02</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton02 singleton = <span class="keyword">new</span> Singleton02();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton02</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton02 <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Ⅲ-懒汉式——线程安全"><a href="#Ⅲ-懒汉式——线程安全" class="headerlink" title="Ⅲ. 懒汉式——线程安全"></a>Ⅲ. 懒汉式——线程安全</h4><p>只需要对获取单例的公有方法加锁，使得在一个时间点只能有一个线程进入该方法，从而避免了被多次实例化；但当一个线程进入该方法后，其他试图进入的线程都必须等待，这样会让线程阻塞时间过长，所以不推荐使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 3、懒汉模式-线程安全,会导致线程阻塞</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton03</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton03 singleton;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton03</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton03 <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == singleton)&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton03();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Ⅳ-懒汉式双重校验锁——线程安全"><a href="#Ⅳ-懒汉式双重校验锁——线程安全" class="headerlink" title="Ⅳ. 懒汉式双重校验锁——线程安全"></a>Ⅳ. 懒汉式双重校验锁——线程安全</h4><p>加锁操作只需要对实例化的那部分代码进行，双重校验锁先判断单例是否已经被实例化，如果没有被实例化，那么才对实例化语句进行加锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 4、双重校验锁-线程安全</span></span><br><span class="line"><span class="comment"> *      1).判断是否被实例化，再对实例化语句加锁；</span></span><br><span class="line"><span class="comment"> *      2).内部再次进行判断是否实例化，并加锁；</span></span><br><span class="line"><span class="comment"> *      3).为单例对象添加采用 volatile 关键字修饰，禁止JVM的指令重排。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton04</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton04 singleton;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton04</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 防反射</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> !=singleton)&#123;</span><br><span class="line">             <span class="keyword">throw</span> Exception();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton04 <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == singleton)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton04.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == singleton)&#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (Singleton04.class)&#123;</span><br><span class="line">                        singleton = <span class="keyword">new</span> Singleton04();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>singleton 采用 volatile 关键字修饰也是很有必要的， <code>singleton = new Singleton4();</code> 这段代码其实是分为三步执行：</p><ol><li>为 singleton 分配内存空间</li><li>初始化 singleton</li><li>将 singleton 指向分配的内存地址</li></ol><p>但是由于 JVM 具有指令重排的特性，执行顺序有可能变成 1&gt;3&gt;2。指令重排在单线程环境下不会出现问题，但是在多线程环境下会导致一个线程获得还没有初始化的实例。例如，线程 T<sub>1</sub> 执行了 1 和 3，此时 T<sub>2</sub> 调用 getSingleton() 后发现 singleton 不为空，因此返回 singleton，但此时 singleton 还未被初始化。</p><p>使用 volatile 可以禁止 JVM 的指令重排，保证在多线程环境下也能正常运行。</p><h4 id="Ⅴ-静态内部类实现"><a href="#Ⅴ-静态内部类实现" class="headerlink" title="Ⅴ. 静态内部类实现"></a>Ⅴ. 静态内部类实现</h4><p>当 Singleton 类加载时，静态内部类 SingletonHolder 没有被加载进内存。只有当调用 <code>getUniqueInstance()</code> 方法从而触发 <code>SingletonHolder.INSTANCE</code> 时 SingletonHolder 才会被加载，此时初始化 INSTANCE 实例，并且 JVM 能确保 INSTANCE 只被实例化一次。</p><p>这种方式不仅具有延迟初始化的好处，而且由 JVM 提供了对线程安全的支持。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 5、静态内部类实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getUniqueInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Ⅵ-枚举类实现"><a href="#Ⅵ-枚举类实现" class="headerlink" title="Ⅵ. 枚举类实现"></a>Ⅵ. 枚举类实现</h4><p>使用枚举来实现单实例控制会更加简洁，而且无偿地提供了序列化机制，并由JVM从根本上提供保障，可以防止反射攻击，绝对防止多次实例化，是更简洁、高效、安全的实现单例的方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个枚举的元素，它就代表了Singleton的一个实例。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单例可以有自己的操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">singletonOperation</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//功能处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-责任链模式（Chain-Of-Responsibility）"><a href="#2-责任链模式（Chain-Of-Responsibility）" class="headerlink" title="2. 责任链模式（Chain Of Responsibility）"></a>2. 责任链模式（Chain Of Responsibility）</h2><p><strong>责任链模式是一种对象的行为模式。在责任链模式里，很多对象由每一个对象对其下家的引用而连接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响客户端的情况下动态地重新组织和分配责任。</strong></p><h3 id="2-1-责任链模式的结构"><a href="#2-1-责任链模式的结构" class="headerlink" title="2.1 责任链模式的结构"></a>2.1 责任链模式的结构</h3><ul><li><p><strong>抽象处理者(Handler)角色：</strong>定义出一个处理请求的接口。如果需要，接口可以定义 出一个方法以设定和返回对下家的引用。</p></li><li><p><strong>具体处理者(ConcreteHandler)角色：</strong>具体处理者接到请求后，可以选择将请求处理掉，或者将请求传给下家。由于具体处理者持有对下家的引用，因此，如果需要，具体处理者可以访问下家。</p></li></ul><h3 id="2-2-Java责任链模式"><a href="#2-2-Java责任链模式" class="headerlink" title="2.2 Java责任链模式"></a>2.2 Java责任链模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象处理者角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.持有后继的责任对象</span></span><br><span class="line">    <span class="keyword">protected</span> Handler successor;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.构造处理对象并传入下家引用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Handler successor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.successor = successor;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//3.示意处理请求的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request request)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体处理者角色1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler1</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.构造处理对象并传入下家引用，可以传入空值null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteHandler1</span><span class="params">(Handler successor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(successor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.具体处理请求的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getType() == RequestType.TYPE1) &#123;<span class="comment">//处理自己所能处理的请求</span></span><br><span class="line">            System.out.println(request.getName() + <span class="string">" is handle by ConcreteHandler1"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.判断是否有后继的责任对象，如果有，就转发请求给后继的责任对象。</span></span><br><span class="line">        <span class="keyword">if</span> (successor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            successor.handleRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体处理者角色2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler2</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.构造处理对象并传入下家引用，可以传入空值null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteHandler2</span><span class="params">(Handler successor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(successor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.具体处理请求的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getType() == RequestType.TYPE2) &#123;<span class="comment">//处理自己所能处理的请求</span></span><br><span class="line">            System.out.println(request.getName() + <span class="string">" is handle by ConcreteHandler2"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.判断是否有后继的责任对象，如果有，就转发请求给后继的责任对象。</span></span><br><span class="line">        <span class="keyword">if</span> (successor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            successor.handleRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RequestType type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Request</span><span class="params">(RequestType type, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RequestType <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RequestType &#123;</span><br><span class="line">    TYPE1, TYPE2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.组装责任链</span></span><br><span class="line">        Handler handler1 = <span class="keyword">new</span> ConcreteHandler1(<span class="keyword">null</span>);</span><br><span class="line">        Handler handler2 = <span class="keyword">new</span> ConcreteHandler2(handler1);</span><br><span class="line"><span class="comment">//2.构建请求</span></span><br><span class="line">        Request request1 = <span class="keyword">new</span> Request(RequestType.TYPE1, <span class="string">"request1"</span>);</span><br><span class="line">        Request request2 = <span class="keyword">new</span> Request(RequestType.TYPE2, <span class="string">"request2"</span>);</span><br><span class="line">        <span class="comment">//3.处理请求</span></span><br><span class="line">        handler2.handleRequest(request1);</span><br><span class="line">        handler2.handleRequest(request2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">request1 is handle by ConcreteHandler1</span><br><span class="line">request2 is handle by ConcreteHandler2</span><br></pre></td></tr></table></figure><h2 id="3-迭代器模式（Iterator）"><a href="#3-迭代器模式（Iterator）" class="headerlink" title="3. 迭代器模式（Iterator）"></a>3. 迭代器模式（Iterator）</h2><p><strong>迭代器模式又叫游标(Cursor)模式，是对象的行为模式。迭代器模式可以顺序地访问一个聚集中的元素而不必暴露聚集的内部表象（internal representation）。</strong></p><h3 id="3-1-迭代器模式的结构"><a href="#3-1-迭代器模式的结构" class="headerlink" title="3.1 迭代器模式的结构"></a>3.1 迭代器模式的结构</h3><ul><li>抽象迭代子(Iterator)角色：此抽象角色定义出遍历元素所需的接口。</li><li>具体迭代子(ConcreteIterator)角色：此角色实现了Iterator接口，并保持迭代过程中的游标位置。</li><li>聚集(Aggregate)角色：此抽象角色给出创建迭代子(Iterator)对象的接口。</li><li>具体聚集(ConcreteAggregate)角色：实现了创建迭代子(Iterator)对象的接口，返回一个合适的具体迭代子实例。</li><li>客户端(Client)角色：持有对聚集及其迭代子对象的引用，调用迭代子对象的迭代接口，也有可能通过迭代子操作聚集元素的增加和删除。</li></ul><h3 id="3-2-Java迭代器模式"><a href="#3-2-Java迭代器模式" class="headerlink" title="3.2 Java迭代器模式"></a>3.2 Java迭代器模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象迭代器角色类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Item <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//还可以定义一些其他迭代方法：移动到第一个元素、返回当前元素、是否为最后一个元素等等。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体迭代器角色类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteIterator</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Item[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> position = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteIterator</span><span class="params">(Item[] items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[position++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> position &lt; items.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 聚合类接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Aggregate</span> </span>&#123;</span><br><span class="line">    <span class="comment">//工厂方法，创建相应迭代子对象的接口</span></span><br><span class="line">    <span class="function">Iterator <span class="title">createIterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体聚合类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteAggregate</span> <span class="keyword">implements</span> <span class="title">Aggregate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer[] items;</span><br><span class="line">    <span class="comment">//构造方法，构建（或传入）聚合对象的具体内容</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteAggregate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        items = <span class="keyword">new</span> Integer[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">            items[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteIterator&lt;Integer&gt;(items);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Aggregate aggregate = <span class="keyword">new</span> ConcreteAggregate();</span><br><span class="line">        Iterator&lt;Integer&gt; iterator = aggregate.createIterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-模板方法模式（Template-Method）"><a href="#4-模板方法模式（Template-Method）" class="headerlink" title="4. 模板方法模式（Template Method）"></a>4. 模板方法模式（Template Method）</h2><p><strong>模板方法模式是类的行为模式。准备一个抽象类，将部分逻辑以具体方法以及具体构造函数的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。这就是模板方法模式的用意。</strong></p><h3 id="4-1-模板方法模式的结构"><a href="#4-1-模板方法模式的结构" class="headerlink" title="4.1 模板方法模式的结构"></a>4.1 模板方法模式的结构</h3><p>　　<strong>抽象模板(Abstract Template)角色有如下责任：</strong></p><p>　　■　定义了一个或多个抽象操作，以便让子类实现。这些抽象操作叫做基本操作，它们是一个顶级逻辑的组成步骤。</p><p>　　■　定义并实现了一个模板方法。这个模板方法一般是一个具体方法，它给出了一个顶级逻辑的骨架，而逻辑的组成步骤在相应的抽象操作中，推迟到子类实现。顶级逻辑也有可能调用一些具体方法。</p><p>　　<strong>具体模板(Concrete Template)角色有如下责任：</strong></p><p>　　■　实现父类所定义的一个或多个抽象方法，它们是一个顶级逻辑的组成步骤。</p><p>　　■　每一个抽象模板角色都可以有任意多个具体模板角色与之对应，而每一个具体模板角色都可以给出这些抽象方法（也就是顶级逻辑的组成步骤）的不同实现，从而使得顶级逻辑的实现各不相同。</p><h3 id="4-2-Java模板方法模式"><a href="#4-2-Java模板方法模式" class="headerlink" title="4.2 Java模板方法模式"></a>4.2 Java模板方法模式</h3><p>如下给出例子：冲咖啡和冲茶都有类似的流程，但是某些步骤会有点不一样，要求复用那些相同步骤的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象模板角色类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CaffeineBeverage</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模板方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">prepareRecipe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        boilWater();</span><br><span class="line">        brew();</span><br><span class="line">        pourInCup();</span><br><span class="line">        addCondiments();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基本方法的声明（泡）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基本方法的声明（加料）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基本方法的声明（烧水）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">boilWater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"boilWater"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基本方法的声明（倒入杯中）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pourInCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"pourInCup"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体模板角色类——泡咖啡</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> <span class="keyword">extends</span> <span class="title">CaffeineBeverage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Coffee.brew"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Coffee.addCondiments"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体模板角色类——泡茶</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tea</span> <span class="keyword">extends</span> <span class="title">CaffeineBeverage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Tea.brew"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Tea.addCondiments"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;设计模式是解决问题的方案，学习现有的设计模式可以做到经验复用；使用设计模式可以重用代码，让代码更容易被他人理解，也保证了代码的可靠性。Java设计模式总体上分为三大类：创建型模式、结构型模式、行为型模式，而每一大类都细分有多种设计模式，每种模式都有相应的原理与之对应。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-单例模式（Singleton）&quot;&gt;&lt;a href=&quot;#1-单例模式（Singleton）&quot; class=&quot;headerlink&quot; title=&quot;1. 单例模式（Singleton）&quot;&gt;&lt;/a&gt;1. 单例模式（Singleton）&lt;/h2&gt;&lt;h3 id=&quot;1-1-单例模式的特点&quot;&gt;&lt;a href=&quot;#1-1-单例模式的特点&quot; class=&quot;headerlink&quot; title=&quot;1.1 单例模式的特点&quot;&gt;&lt;/a&gt;1.1 单例模式的特点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;单例类只能有一个实例；&lt;/li&gt;
&lt;li&gt;单例类必须自己创建自己的唯一实例；&lt;/li&gt;
&lt;li&gt;单例类必须给所有其他对象提供这一实例。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-2-Java单例模式&quot;&gt;&lt;a href=&quot;#1-2-Java单例模式&quot; class=&quot;headerlink&quot; title=&quot;1.2 Java单例模式&quot;&gt;&lt;/a&gt;1.2 Java单例模式&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Java的单例模式实现方式有四种：饿汉模式、懒汉模式、静态内部类、枚举类；使用一个私有构造函数、一个私有静态变量以及一个公有静态函数来实现。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java面试练习与总结" scheme="http://yoursite.com/tags/Java%E9%9D%A2%E8%AF%95%E7%BB%83%E4%B9%A0%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java设计模式" scheme="http://yoursite.com/tags/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Spring 依赖注入（DI）</title>
    <link href="http://yoursite.com/2015/10/29/md_Spring%E6%80%BB%E7%BB%93/Spring%20%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%EF%BC%88DI%EF%BC%89/"/>
    <id>http://yoursite.com/2015/10/29/md_Spring总结/Spring 依赖注入（DI）/</id>
    <published>2015-10-29T03:01:45.000Z</published>
    <updated>2018-12-30T12:38:58.056Z</updated>
    
    <content type="html"><![CDATA[<p>在Spring框架中，依赖注入（DI）的设计模式是用来定义对象之间的依赖关系，它主要有两种类型：</p><ul><li>Setter方法注入</li><li>构造器注入</li></ul><h2 id="一、Setter方法注入"><a href="#一、Setter方法注入" class="headerlink" title="一、Setter方法注入"></a>一、Setter方法注入</h2><p>这是Spring最流行的注入方式。</p><a id="more"></a><h2 id="二、构造器注入"><a href="#二、构造器注入" class="headerlink" title="二、构造器注入"></a>二、构造器注入</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"OutputHelper"</span> <span class="attr">class</span>=<span class="string">"com.yiibai.output.OutputHelper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"JsonOutputGenerator"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"JsonOutputGenerator"</span> <span class="attr">class</span>=<span class="string">"com.yiibai.output.impl.JsonOutputGenerator"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个类包含多个构造函数所带的参数不同，它总是会造成构造函数注入参数类型歧义的问题，请务必在<constructor-arg>标签中添加type属性：</constructor-arg></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Spring框架中，依赖注入（DI）的设计模式是用来定义对象之间的依赖关系，它主要有两种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setter方法注入&lt;/li&gt;
&lt;li&gt;构造器注入&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;一、Setter方法注入&quot;&gt;&lt;a href=&quot;#一、Setter方法注入&quot; class=&quot;headerlink&quot; title=&quot;一、Setter方法注入&quot;&gt;&lt;/a&gt;一、Setter方法注入&lt;/h2&gt;&lt;p&gt;这是Spring最流行的注入方式。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring xml 配置详解</title>
    <link href="http://yoursite.com/2015/10/28/md_Spring%E6%80%BB%E7%BB%93/Spring%20xml%20%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2015/10/28/md_Spring总结/Spring xml 配置详解/</id>
    <published>2015-10-28T03:01:45.000Z</published>
    <updated>2018-12-30T12:39:04.661Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    我们使用的Spring框架作为Bean的管理容器，其最经典最基础的Bean配置方式就是纯XML配置，这样做使得结构清晰明了，适合大型项目使用。Spring的XML配置虽然很繁琐，而且存在简洁的注解方式，但读懂XML配置文件对我们来说依然很重要，尚且对于老系统维护必不可少的面对XML配置。</p><p>​    Spring的xml配置文件是其IOC容器启动时传入的重要配置文件，这样才能以次为基础创建一个容器，并且实例化、装配配置文件中的Bean。Spring 配置文件用于指导Spring 工厂生产Bean，并进行依赖关系的注入，以及Bean实例的分发。Spring默认使用applicationContext.xml配置文件，当然名字可以修改。</p><a id="more"></a><h2 id="1-Spring-xml文件头"><a href="#1-Spring-xml文件头" class="headerlink" title="1. Spring xml文件头"></a>1. Spring xml文件头</h2><p>以下是Spring xml很常规的文件头，这样一大串内容另初学者很是费解，但仔细分析其结构理解起来也不难：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先我们需要了解xml本身的一些知识，这些知识跟Spring无关：</p><ul><li><p>命名空间：这里命名空间的定义跟我们Java、C++的导包很相似，就是解决标签名的具体归属，规定xml中可以出现多少种的标签。这里，xml的命名空间用xmlns定义，一读便知是XML NameSpace的字母缩写。 语法：xmlns:[prefix]=”[url of name]”。其中，url of name是完整命名空间，而prefix是命名空间的别名。</p></li><li><p>头解析：如xmlns=”<a href="http://www.springframework.org/schema/beans&quot;，声明xml文件默认的命名空间，但凡之后没有指定命名空间的标签，全是出自这个命名空间；又如：xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;，引入XMLSchema-instance命名空间，并简称为xsi，显然也是取其首字母组成的。" target="_blank" rel="noopener">http://www.springframework.org/schema/beans&quot;，声明xml文件默认的命名空间，但凡之后没有指定命名空间的标签，全是出自这个命名空间；又如：xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;，引入XMLSchema-instance命名空间，并简称为xsi，显然也是取其首字母组成的。</a></p></li><li><p>模式内容xsi:schemaLocation：代表刚刚引入的XMLSchema-instance（简称xsi）中的schemaLocation属性，它的作用是将多个&lt;命名空间，模式位置&gt;对对应起来，其中命名空间和模式位置之间使用空白符分隔。</p></li><li><p>总结：</p><p>命名空间的定义分为了两个步骤：</p><ul><li>指定命名空间的名称，需要指定命名空间的缩类名和全名</li><li>指定命名空间的schema文档样式文件的位置，用空格或回车行来进行分割。</li></ul><p>指定命名空间schema地址有两个用途：</p><ul><li>xml解析器可以获取schema文件，并对文档进行格式合法性验证</li><li>在开发环境下，IDE可以用schema文件来对文档编辑器进行诱导功能。</li></ul></li></ul><h2 id="2-Spring-xml标签详解"><a href="#2-Spring-xml标签详解" class="headerlink" title="2. Spring xml标签详解"></a>2. Spring xml标签详解</h2><h3 id="2-1-lt-beans-gt-lt-beans-gt"><a href="#2-1-lt-beans-gt-lt-beans-gt" class="headerlink" title="2.1 &lt;beans&gt;&lt;/beans&gt;"></a>2.1 &lt;beans&gt;&lt;/beans&gt;</h3><p>Spring xml的beans标签相当于整个配置的父结构，它拥有相应的属性（attribute）对所辖的&lt;bean&gt;进行统一的默认行为设置，包括如下几个</p><ul><li><em>default-lazy-init (false|true):</em> 默认为false，用来标志是否对所有的bean进行延迟初始化。</li><li><em>default-autowire (no|byName|byType|constructor|autodetect):</em> 默认为no，用来标志全体bean使用哪一种默认绑定方式。</li><li><em>default-dependency-check(none|objects|simple|all)</em> : 默认为none，标志全体bean做不做依赖检查。</li><li><em>default-init-method</em> : 如果所管辖的bean按照某种规则，都有同样名称的初始化方法的话，可以在这里统一制定这个初始化方法名，而不用在每个bean上都重复单独指定。</li><li><em>default-destroy-method</em>: 同上，指定对象销毁的方法。</li></ul><h3 id="2-2-lt-bean-gt-lt-bean-gt"><a href="#2-2-lt-bean-gt-lt-bean-gt" class="headerlink" title="2.2 &lt;bean&gt;&lt;/bean&gt;"></a>2.2 &lt;bean&gt;&lt;/bean&gt;</h3><ul><li>id属性：每个注册到容器的对象都需要一个唯一标志来将其与其他bean区别开来。</li><li>class属性：每个注册到容器的对象都需要class属性指定其类型，否则，容器不知道这个对象到底是什么。</li></ul><p>Spring的Bean配置的方式有很多种，具体有三：JAVA配置、注解配置、XML配置；详情参见<a href="https://blog.csdn.net/sinat_34045444/article/details/84838196" target="_blank" rel="noopener">Spring Bean基础</a>。</p><h3 id="2-3-Spring-xml自定义标签"><a href="#2-3-Spring-xml自定义标签" class="headerlink" title="2.3 Spring xml自定义标签"></a>2.3 Spring xml自定义标签</h3><p>我们经常使用一些依赖于Spring的组件时，发现可以通过自定义配置Spring标签来实现插件的注入，如数据源配置、MyBatis的配置、aop配置、事务tx配置等。Spring自定义标签配置步骤如下：</p><ol><li>编写对应的java bean </li><li>提供一个xsd文件，负责对xml的标签&lt;datasource&gt;进行校验；</li><li>定义一个BeanDefinitionParser负责解析xml,并将必要的信息放入spring中；</li><li>定义个NamespaceHandler,由sping框架的调用入口。这也是我们自定义xml解析的入口；</li><li>配置schema和handler；</li><li>在spring的配置文件中使用标签。</li></ol><p>详情参见：<a href="https://blog.csdn.net/wzl19870309/article/details/62424088" target="_blank" rel="noopener">Spring下自定义xml标签</a>，本人日后整理。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​    我们使用的Spring框架作为Bean的管理容器，其最经典最基础的Bean配置方式就是纯XML配置，这样做使得结构清晰明了，适合大型项目使用。Spring的XML配置虽然很繁琐，而且存在简洁的注解方式，但读懂XML配置文件对我们来说依然很重要，尚且对于老系统维护必不可少的面对XML配置。&lt;/p&gt;
&lt;p&gt;​    Spring的xml配置文件是其IOC容器启动时传入的重要配置文件，这样才能以次为基础创建一个容器，并且实例化、装配配置文件中的Bean。Spring 配置文件用于指导Spring 工厂生产Bean，并进行依赖关系的注入，以及Bean实例的分发。Spring默认使用applicationContext.xml配置文件，当然名字可以修改。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring JavaConfig实例</title>
    <link href="http://yoursite.com/2015/10/28/md_Spring%E6%80%BB%E7%BB%93/Spring%20JavaConfig%E5%AE%9E%E4%BE%8B/"/>
    <id>http://yoursite.com/2015/10/28/md_Spring总结/Spring JavaConfig实例/</id>
    <published>2015-10-28T03:01:45.000Z</published>
    <updated>2018-12-30T12:39:29.682Z</updated>
    
    <content type="html"><![CDATA[<p>从Spring 3起，JavaConfig功能已经包含到Spring核心模块，他允许开发者以另一种方式定义装配Bean，并且仍然允许经典的XML配置文件方式来定义装配Bean ；所以JavaConfig是另一种替代解决方案，来看一下经典的XML定义和JavaConfig的不同，如下定义Spring容器中的Bean：</p><p>Spring XML File——applicationContext.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloBean"</span> <span class="attr">class</span>=<span class="string">"com.myprj.hello.impl.HelloWorldImpl"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>等效于以下JavaConfig配置：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myprj.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> com.myprj.hello.HelloWorld;</span><br><span class="line"><span class="keyword">import</span> com.myprj.hello.impl.HelloWorldImpl;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"helloBean"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloWorld <span class="title">helloWorld</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloWorldImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Import实例"><a href="#Import实例" class="headerlink" title="@Import实例"></a>@Import实例</h2><p>一般来说, 需要按模块或类别分割Spring XML Bean文件成多个小文件, 使事情更容易维护和模块化。 例如，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"config/customer.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"config/scheduler.xml"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>它等效于Spring3 JavaConfig @Import 功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myprj.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(&#123; CustomerConfig.class, SchedulerConfig.class &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从Spring 3起，JavaConfig功能已经包含到Spring核心模块，他允许开发者以另一种方式定义装配Bean，并且仍然允许经典的XML配置文件方式来定义装配Bean ；所以JavaConfig是另一种替代解决方案，来看一下经典的XML定义和JavaConfig的不同，如下定义Spring容器中的Bean：&lt;/p&gt;
&lt;p&gt;Spring XML File——applicationContext.xml:&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/beans&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;string&quot;&gt;	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;helloBean&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.myprj.hello.impl.HelloWorldImpl&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;等效于以下JavaConfig配置：&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>AOP面向切面编程</title>
    <link href="http://yoursite.com/2015/10/28/md_Spring%E6%80%BB%E7%BB%93/AOP%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2015/10/28/md_Spring总结/AOP面向切面编程/</id>
    <published>2015-10-28T03:01:45.000Z</published>
    <updated>2018-12-30T12:40:20.518Z</updated>
    
    <content type="html"><![CDATA[<p>Spring AOP(面向切面编程)框架，用于在模块化方面的横切关注点。简单得说，它只是一个拦截器拦截一些过程，例如，当一个方法执行，Spring AOP 可以劫持一个执行的方法，在方法执行之前或之后添加额外的功能。</p><p>在Spring AOP中，有 4 种类型通知(advices)的支持：</p><ul><li><p>通知(Advice)之前 - 该方法执行前运行</p></li><li><p>通知(Advice)返回之后 – 运行后，该方法返回一个结果</p></li><li><p>通知(Advice)抛出之后 – 运行方法抛出异常后，</p></li><li><p>环绕通知 – 环绕方法执行运行，结合以上这三个通知。</p><a id="more"></a></li></ul><h2 id="一、Spring-AOP-通知——Advice"><a href="#一、Spring-AOP-通知——Advice" class="headerlink" title="一、Spring AOP 通知——Advice"></a>一、Spring AOP 通知——Advice</h2><h3 id="1-前置通知"><a href="#1-前置通知" class="headerlink" title="1.  前置通知"></a>1.  前置通知</h3><p>它会在方法执行之前执行。创建一个实现 MethodBeforeAdvice 接口的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myprj.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.MethodBeforeAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HijackBeforeMethod</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] args, Object target)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HijackBeforeMethod : Before method hijacked!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 bean 配置文件(applicationContext.xml)，声明 前置通知HijackBeforeMethod 类，创建一个CustomerService的代理类并命名为“customerServiceProxy” 作为一个新的代理对象。</p><ul><li>‘target’ – 定义你想拦截的bean。</li><li>‘interceptorNames’ – 定义要应用这个代理/目标对象的类(通知)。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.myprj.customer.services.CustomerService"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"myprj Mook Kim"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"http://www.myprj.com"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hijackBeforeMethodBean"</span> <span class="attr">class</span>=<span class="string">"com.myprj.aop.HijackBeforeMethod"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerServiceProxy"</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">ref</span>=<span class="string">"customerService"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptorNames"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hijackBeforeMethodBean<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-返回后通知"><a href="#2-返回后通知" class="headerlink" title="2.返回后通知"></a>2.返回后通知</h3><p>该方法将在返回一个结果之后执行。创建一个实现AfterReturningAdvice接口的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myprj.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.AfterReturningAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HijackAfterMethod</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method,</span></span></span><br><span class="line"><span class="function"><span class="params">Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HijackAfterMethod : After method hijacked!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bean配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.myprj.customer.services.CustomerService"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Yong Mook Kim"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"http://www.myprj.com"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hijackAfterMethodBean"</span> <span class="attr">class</span>=<span class="string">"com.myprj.aop.HijackAfterMethod"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerServiceProxy"</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">ref</span>=<span class="string">"customerService"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptorNames"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hijackAfterMethodBean<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-抛出后通知"><a href="#3-抛出后通知" class="headerlink" title="3.抛出后通知"></a>3.抛出后通知</h3><p>它将在方法抛出一个异常后执行。创建一个实现ThrowsAdvice接口的类，并创建一个afterThrowing方法拦截抛出：IllegalArgumentException异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myprj.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.ThrowsAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HijackThrowException</span> <span class="keyword">implements</span> <span class="title">ThrowsAdvice</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(IllegalArgumentException e)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"HijackThrowException : Throw exception hijacked!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bean配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.myprj.customer.services.CustomerService"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Yong Mook Kim"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"http://www.myprj.com"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hijackThrowExceptionBean"</span> <span class="attr">class</span>=<span class="string">"com.myprj.aop.HijackThrowException"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerServiceProxy"</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">ref</span>=<span class="string">"customerService"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptorNames"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hijackThrowExceptionBean<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-环绕通知"><a href="#4-环绕通知" class="headerlink" title="4.环绕通知"></a>4.环绕通知</h3><p>它结合了上面的三个通知，在方法执行过程中执行。创建一个实现了MethodInterceptor接口的类。必须调用“methodInvocation.proceed();” 继续在原来的方法执行，否则原来的方法将不会执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myprj.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HijackAroundMethod</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation methodInvocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Method name : "</span></span><br><span class="line">+ methodInvocation.getMethod().getName());</span><br><span class="line">System.out.println(<span class="string">"Method arguments : "</span></span><br><span class="line">+ Arrays.toString(methodInvocation.getArguments()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// same with MethodBeforeAdvice</span></span><br><span class="line">System.out.println(<span class="string">"HijackAroundMethod : Before method hijacked!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// proceed to original method call</span></span><br><span class="line">Object result = methodInvocation.proceed();</span><br><span class="line"></span><br><span class="line"><span class="comment">// same with AfterReturningAdvice</span></span><br><span class="line">System.out.println(<span class="string">"HijackAroundMethod : Before after hijacked!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line"><span class="comment">// same with ThrowsAdvice</span></span><br><span class="line">System.out.println(<span class="string">"HijackAroundMethod : Throw exception hijacked!"</span>);</span><br><span class="line"><span class="keyword">throw</span> e;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bean配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.myprj.customer.services.CustomerService"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Yong Mook Kim"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"http://www.myprj.com"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hijackAroundMethodBean"</span> <span class="attr">class</span>=<span class="string">"com.myprj.aop.HijackAroundMethod"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerServiceProxy"</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">ref</span>=<span class="string">"customerService"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptorNames"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hijackAroundMethodBean<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、Spring-AOP-Pointcut-Advisor"><a href="#二、Spring-AOP-Pointcut-Advisor" class="headerlink" title="二、Spring AOP(Pointcut,Advisor)"></a>二、Spring AOP(Pointcut,Advisor)</h2><p>在上一个Spring AOP通知的例子，一个类的整个方法被自动拦截。但在大多数情况下，可能只需要一种方式来拦截一个或两个方法，这就是为什么引入’切入点’的原因。它允许你通过它的方法名来拦截方法。另外，一个“切入点”必须具有“Advisor’ 相关联。</p><p>在Spring AOP中，有三个非常专业术语- Advices, Cut , Advisor，把它在非官方的方式…</p><ul><li>Advice – 指示之前或方法执行后采取的行动。</li><li>Cut  – 指明哪些方法应该拦截，通过方法的名称或正则表达式模式。</li><li>Advisor – 分组”通知”和”切入点“成为一个单元，并把它传递到代理工厂对象。</li></ul><h3 id="切入点的例子"><a href="#切入点的例子" class="headerlink" title="切入点的例子"></a>切入点的例子</h3><p>可以通过以下两种方式相匹配的方法：</p><ol><li>名称匹配</li><li>正则表达式匹配</li></ol><h4 id="1-切入点-名称匹配的例子"><a href="#1-切入点-名称匹配的例子" class="headerlink" title="1.  切入点 - 名称匹配的例子"></a>1.  切入点 - 名称匹配的例子</h4><p>通过“切入点”和“advisor”拦截printName()方法。创建NameMatchMethodmyprjcut切入点bean，并提出要在“mappedName”属性值来拦截方法名。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customermyprjcut"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.aop.support.NameMatchMethodmyprjcut"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappedName"</span> <span class="attr">value</span>=<span class="string">"printName"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建 DefaultmyprjcutAdvisor 通知 bean，通知和切入点相关联。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerAdvisor"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.aop.support.DefaultmyprjcutAdvisor"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pointcut"</span> <span class="attr">ref</span>=<span class="string">"customermyprjcut"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"advice"</span> <span class="attr">ref</span>=<span class="string">"hijackAroundMethodBeanAdvice"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更换代理“interceptorNames”到“customerAdvisor”（它是“hijackAroundMethodBeanAdvice”）。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerServiceProxy"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">ref</span>=<span class="string">"customerService"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptorNames"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>customerAdvisor<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-切入点-正则表达式的例子"><a href="#2-切入点-正则表达式的例子" class="headerlink" title="2.  切入点 - 正则表达式的例子"></a>2.  切入点 - 正则表达式的例子</h4><p>也可以通过使用正则表达式匹配切入点方法的名称  – RegexpMethodmyprjcutAdvisor.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerAdvisor"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.aop.support.RegexpMethodmyprjcutAdvisor"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"patterns"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>.*URL.*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"advice"</span> <span class="attr">ref</span>=<span class="string">"hijackAroundMethodBeanAdvice"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在，它拦截方法名称中有“URL”的方法。在实践中，可以用它来管理DAO层，声明“.<em>DAO.</em>” 拦截所有的DAO类来支持事务。</p><h2 id="三、Spring自动代理创建者实例"><a href="#三、Spring自动代理创建者实例" class="headerlink" title="三、Spring自动代理创建者实例"></a>三、Spring自动代理创建者实例</h2><h3 id="1-BeanNameAutoProxyCreator示例"><a href="#1-BeanNameAutoProxyCreator示例" class="headerlink" title="1. BeanNameAutoProxyCreator示例"></a>1. BeanNameAutoProxyCreator示例</h3><p>在自动代理机制，只需要创建一个的 BeanNameAutoProxyCreator，并包含所有你的bean(通过bean的名字，或正则表达式名)和“advisor” 作为一个单位。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.myprj.customer.services.CustomerService"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"myprj Mook Kim"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"http://www.myprj.com"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hijackAroundMethodBeanAdvice"</span> <span class="attr">class</span>=<span class="string">"com.myprj.aop.HijackAroundMethod"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerAdvisor"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.aop.support.NameMatchMethodmyprjcutAdvisor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappedName"</span> <span class="attr">value</span>=<span class="string">"printName"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"advice"</span> <span class="attr">ref</span>=<span class="string">"hijackAroundMethodBeanAdvice"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beanNames"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>*Service<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptorNames"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>customerAdvisor<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">XML</span><br></pre></td></tr></table></figure><p>现在，可以通过“CustomerService”的原始名称获取bean, 如果知道这个bean已经代理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CustomerService cust = (CustomerService)appContext.getBean(<span class="string">"customerService"</span>);</span><br></pre></td></tr></table></figure><h3 id="2-DefaultAdvisorAutoProxyCreator示例"><a href="#2-DefaultAdvisorAutoProxyCreator示例" class="headerlink" title="2. DefaultAdvisorAutoProxyCreator示例"></a>2. DefaultAdvisorAutoProxyCreator示例</h3><p>这个 <code>DefaultAdvisorAutoProxyCreator</code> 是非常强大的，如果有 bean 相关连，Spring会自动创建一个代理。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.myprj.customer.services.CustomerService"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"myprj Mook Kim"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"http://www.myprj.com"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hijackAroundMethodBeanAdvice"</span> <span class="attr">class</span>=<span class="string">"com.myprj.aop.HijackAroundMethod"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerAdvisor"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.aop.support.NameMatchMethodmyprjcutAdvisor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappedName"</span> <span class="attr">value</span>=<span class="string">"printName"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"advice"</span> <span class="attr">ref</span>=<span class="string">"hijackAroundMethodBeanAdvice"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring AOP(面向切面编程)框架，用于在模块化方面的横切关注点。简单得说，它只是一个拦截器拦截一些过程，例如，当一个方法执行，Spring AOP 可以劫持一个执行的方法，在方法执行之前或之后添加额外的功能。&lt;/p&gt;
&lt;p&gt;在Spring AOP中，有 4 种类型通知(advices)的支持：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通知(Advice)之前 - 该方法执行前运行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通知(Advice)返回之后 – 运行后，该方法返回一个结果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通知(Advice)抛出之后 – 运行方法抛出异常后，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;环绕通知 – 环绕方法执行运行，结合以上这三个通知。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="AOP" scheme="http://yoursite.com/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Spring AOP+AspectJ注解实例</title>
    <link href="http://yoursite.com/2015/10/28/md_Spring%E6%80%BB%E7%BB%93/Spring%20AOP+AspectJ%E6%B3%A8%E8%A7%A3%E5%AE%9E%E4%BE%8B/"/>
    <id>http://yoursite.com/2015/10/28/md_Spring总结/Spring AOP+AspectJ注解实例/</id>
    <published>2015-10-28T03:01:45.000Z</published>
    <updated>2018-12-30T12:39:59.234Z</updated>
    
    <content type="html"><![CDATA[<p>本文展示如何将AspectJ注解集成到Spring AOP框架。在这个Spring AOP+ AspectJ 示例中，让您轻松实现拦截方法。</p><p>常见AspectJ的注解：</p><ol><li>@Before – 方法执行前运行</li><li>@After – 运行在方法返回结果后</li><li>@AfterReturning – 运行在方法返回一个结果后，在拦截器返回结果。</li><li>@AfterThrowing – 运行方法在抛出异常后，</li><li>@Around – 围绕方法执行运行，结合以上这三个通知。</li></ol><p>注意</p><p>Spring AOP 中没有 AspectJ 支持，请阅读前文AOP面向切面编程。</p><a id="more"></a><h3 id="1-启用AspectJ"><a href="#1-启用AspectJ" class="headerlink" title="1. 启用AspectJ"></a>1. 启用AspectJ</h3><p>在 Spring 配置文件，把“&lt;aop:aspectj-autoproxy /&gt;”，并定义Aspect(拦截)和普通的bean。</p><p><em>File : applicationContext.xml</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.0.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop-3.0.xsd "</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerBo"</span> <span class="attr">class</span>=<span class="string">"com.myprj.customer.bo.impl.CustomerBoImpl"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Aspect --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logAspect"</span> <span class="attr">class</span>=<span class="string">"com.myprj.aspect.LoggingAspect"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-AspectJ-Before"><a href="#2-AspectJ-Before" class="headerlink" title="2. AspectJ @Before"></a>2. AspectJ @Before</h3><p>在下面例子中，logBefore()方法将在 customerBo接口的 addCustomer()方法的执行之前被执行。</p><p>AspectJ的“切入点”是用来声明哪种方法将被拦截]，支持切入点表达式的完整列表。</p><p><em>File : LoggingAspect.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myprj.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Joinmyprj;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span>(<span class="string">"execution(* com.myprj.customer.bo.CustomerBo.addCustomer(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logBefore</span><span class="params">(Joinmyprj joinmyprj)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"logBefore() is running!"</span>);</span><br><span class="line">System.out.println(<span class="string">"hijacked : "</span> + joinmyprj.getSignature().getName());</span><br><span class="line">System.out.println(<span class="string">"******"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CustomerBo customer = (CustomerBo) appContext.getBean(<span class="string">"customerBo"</span>);</span><br><span class="line">customer.addCustomer();</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">logBefore() is running!</span><br><span class="line">hijacked : addCustomer</span><br><span class="line">******</span><br><span class="line">addCustomer() is running</span><br></pre></td></tr></table></figure><h3 id="3-AspectJ-After"><a href="#3-AspectJ-After" class="headerlink" title="3. AspectJ @After"></a>3. AspectJ @After</h3><p>在下面例子中，logAfter()方法将在 customerBo 接口的 addCustomer()方法的执行之后执行。</p><p><em>File : LoggingAspect.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myprj.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Joinmyprj;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@After</span>(<span class="string">"execution(* com.myprj.customer.bo.CustomerBo.addCustomer(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logAfter</span><span class="params">(Joinmyprj joinmyprj)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"logAfter() is running!"</span>);</span><br><span class="line">System.out.println(<span class="string">"hijacked : "</span> + joinmyprj.getSignature().getName());</span><br><span class="line">System.out.println(<span class="string">"******"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行它</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CustomerBo customer = (CustomerBo) appContext.getBean(&quot;customerBo&quot;);</span><br><span class="line">customer.addCustomer();</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addCustomer() is running </span><br><span class="line">logAfter() is running!</span><br><span class="line">hijacked : addCustomer</span><br><span class="line">******</span><br></pre></td></tr></table></figure><h3 id="4-AspectJ-AfterReturning"><a href="#4-AspectJ-AfterReturning" class="headerlink" title="4. AspectJ @AfterReturning"></a>4. AspectJ @AfterReturning</h3><p>在下面例子中，logAfterReturning()方法将在 customerBo 接口的addCustomerReturnValue()方法执行之后执行。此外，还可以截取返回的值使用“returning”属性。</p><p>要截取返回的值，对“returning”属性(结果)的值必须用相同的方法参数(结果)。</p><p><em>File : LoggingAspect.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myprj.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Joinmyprj;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@AfterReturning</span>(</span><br><span class="line">      pointcut = <span class="string">"execution(* com.myprj.customer.bo.CustomerBo.addCustomerReturnValue(..))"</span>,</span><br><span class="line">      returning= <span class="string">"result"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logAfterReturning</span><span class="params">(Joinmyprj joinmyprj, Object result)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"logAfterReturning() is running!"</span>);</span><br><span class="line">System.out.println(<span class="string">"hijacked : "</span> + joinmyprj.getSignature().getName());</span><br><span class="line">System.out.println(<span class="string">"Method returned value is : "</span> + result);</span><br><span class="line">System.out.println(<span class="string">"******"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行它</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CustomerBo customer = (CustomerBo) appContext.getBean(&quot;customerBo&quot;);</span><br><span class="line">customer.addCustomerReturnValue();</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">addCustomerReturnValue() is running </span><br><span class="line">logAfterReturning() is running!</span><br><span class="line">hijacked : addCustomerReturnValue</span><br><span class="line">Method returned value is : abc</span><br><span class="line">******</span><br></pre></td></tr></table></figure><h3 id="5-AspectJ-AfterReturning"><a href="#5-AspectJ-AfterReturning" class="headerlink" title="5. AspectJ @AfterReturning"></a>5. AspectJ @AfterReturning</h3><p>在下面的例子中，如果 customerBo 接口的addCustomerThrowException()方法抛出异常logAfterThrowing()方法将被执行。</p><p><em>File : LoggingAspect.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myprj.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Joinmyprj;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterThrowing;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@AfterThrowing</span>(</span><br><span class="line">      pointcut = <span class="string">"execution(* com.myprj.customer.bo.CustomerBo.addCustomerThrowException(..))"</span>,</span><br><span class="line">      throwing= <span class="string">"error"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logAfterThrowing</span><span class="params">(Joinmyprj joinmyprj, Throwable error)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"logAfterThrowing() is running!"</span>);</span><br><span class="line">System.out.println(<span class="string">"hijacked : "</span> + joinmyprj.getSignature().getName());</span><br><span class="line">System.out.println(<span class="string">"Exception : "</span> + error);</span><br><span class="line">System.out.println(<span class="string">"******"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行它</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CustomerBo customer = (CustomerBo) appContext.getBean(&quot;customerBo&quot;);</span><br><span class="line">customer.addCustomerThrowException();</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">addCustomerThrowException() is running </span><br><span class="line">logAfterThrowing() is running!</span><br><span class="line">hijacked : addCustomerThrowException</span><br><span class="line">Exception : java.lang.Exception: Generic Error</span><br><span class="line">******</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.Exception: Generic Error</span><br><span class="line">//...</span><br></pre></td></tr></table></figure><h3 id="6-AspectJ-Around"><a href="#6-AspectJ-Around" class="headerlink" title="6. AspectJ @Around"></a>6. AspectJ @Around</h3><p>在下面例子中，logAround()方法将在customerBo接口的addCustomerAround()方法执行之前执行， 必须定义“joinmyprj.proceed();” 控制何时拦截器返回控制到原来的addCustomerAround()方法。</p><p><em>File : LoggingAspect.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myprj.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinmyprj;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Around</span>(<span class="string">"execution(* com.myprj.customer.bo.CustomerBo.addCustomerAround(..))"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logAround</span><span class="params">(ProceedingJoinmyprj joinmyprj)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"logAround() is running!"</span>);</span><br><span class="line">System.out.println(<span class="string">"hijacked method : "</span> + joinmyprj.getSignature().getName());</span><br><span class="line">System.out.println(<span class="string">"hijacked arguments : "</span> + Arrays.toString(joinmyprj.getArgs()));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Around before is running!"</span>);</span><br><span class="line">joinmyprj.proceed(); <span class="comment">//continue on the intercepted method</span></span><br><span class="line">System.out.println(<span class="string">"Around after is running!"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"******"</span>);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行它</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CustomerBo customer = (CustomerBo) appContext.getBean(&quot;customerBo&quot;);</span><br><span class="line">customer.addCustomerAround(&quot;myprj&quot;);</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">logAround() is running!</span><br><span class="line">hijacked method : addCustomerAround</span><br><span class="line">hijacked arguments : [myprj]</span><br><span class="line">Around before is running!</span><br><span class="line">addCustomerAround() is running, args : myprj</span><br><span class="line">Around after is running!</span><br><span class="line">******</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如今总是建议采用最少 AspectJ 注解。这是关于Spring AspectJ 的一篇相当长的文章。进一步的解释和例子，请访问下面的参考链接。</p><h1 id="Spring-AOP-AspectJ在XML配置实例"><a href="#Spring-AOP-AspectJ在XML配置实例" class="headerlink" title="Spring AOP+AspectJ在XML配置实例"></a>Spring AOP+AspectJ在XML配置实例</h1><p>在下文中，我们将向你展示如何转换上文中 Spring AOP+AspectJ注解转成基于XML的配置。</p><p>对于那些不喜欢注释，使用JDK1.4，则可以基于XML，而不使用 AspectJ。</p><h2 id="完整的-XML-实例"><a href="#完整的-XML-实例" class="headerlink" title="完整的 XML 实例"></a>完整的 XML 实例</h2><p>查看完整的基于XML的 AspectJ 配置文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.0.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop-3.0.xsd "</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerBo"</span> <span class="attr">class</span>=<span class="string">"com.myprj.customer.bo.impl.CustomerBoImpl"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Aspect --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logAspect"</span> <span class="attr">class</span>=<span class="string">"com.myprj.aspect.LoggingAspect"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"aspectLoggging"</span> <span class="attr">ref</span>=<span class="string">"logAspect"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- @Before --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointCutBefore"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">expression</span>=<span class="string">"execution(* com.myprj.customer.bo.CustomerBo.addCustomer(..))"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"logBefore"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointCutBefore"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- @After --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointCutAfter"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">expression</span>=<span class="string">"execution(* com.myprj.customer.bo.CustomerBo.addCustomer(..))"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"logAfter"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointCutAfter"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- @AfterReturning --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointCutAfterReturning"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">expression</span>=<span class="string">"execution(* com.myprj.customer.bo.CustomerBo.addCustomerReturnValue(..))"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"logAfterReturning"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">returning</span>=<span class="string">"result"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointCutAfterReturning"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- @AfterThrowing --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointCutAfterThrowing"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">expression</span>=<span class="string">"execution(* com.myprj.customer.bo.CustomerBo.addCustomerThrowException(..))"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"logAfterThrowing"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">throwing</span>=<span class="string">"error"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointCutAfterThrowing"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- @Around --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointCutAround"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">expression</span>=<span class="string">"execution(* com.myprj.customer.bo.CustomerBo.addCustomerAround(..))"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"logAround"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointCutAround"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文展示如何将AspectJ注解集成到Spring AOP框架。在这个Spring AOP+ AspectJ 示例中，让您轻松实现拦截方法。&lt;/p&gt;
&lt;p&gt;常见AspectJ的注解：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;@Before – 方法执行前运行&lt;/li&gt;
&lt;li&gt;@After – 运行在方法返回结果后&lt;/li&gt;
&lt;li&gt;@AfterReturning – 运行在方法返回一个结果后，在拦截器返回结果。&lt;/li&gt;
&lt;li&gt;@AfterThrowing – 运行方法在抛出异常后，&lt;/li&gt;
&lt;li&gt;@Around – 围绕方法执行运行，结合以上这三个通知。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意&lt;/p&gt;
&lt;p&gt;Spring AOP 中没有 AspectJ 支持，请阅读前文AOP面向切面编程。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="AOP" scheme="http://yoursite.com/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Java Web工程中的web.xml配置文件</title>
    <link href="http://yoursite.com/2015/10/28/md_Spring%E6%80%BB%E7%BB%93/Java%20Web%E5%B7%A5%E7%A8%8B%E4%B8%AD%E7%9A%84web.xml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2015/10/28/md_Spring总结/Java Web工程中的web.xml配置文件/</id>
    <published>2015-10-28T03:01:45.000Z</published>
    <updated>2018-12-30T12:40:07.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="1-xml文件"><a href="#1-xml文件" class="headerlink" title="1. xml文件"></a>1. xml文件</h3><p>xml文件：Extentsible Markup Language即可扩展标记语言，是用来定义其它语言的一种元语言，其前身是SGML(标准通用标记语言)。xml文件是互联网数据传输的重要工具，因为不受编程语言和操作系统的限制，所以可以跨越互联网的任何平台，非常适合Web传输。XML提供统一的方法来描述和交换独立于应用程序或供应商的结构化数据。我们都知道xml文件的一些规则：</p><ul><li><p>xml声明一般是xml文档的第一行：\&lt;?xml version=”1.0” encoding=”UTF-8”?>；</p></li><li><p>xml必须有且只有一个根节点，对大小写敏感，标签成对出现，标签不嵌套，但内部元素需要正确嵌套；</p></li><li><p>属性值用双引号包裹；一个元素可以有多个属性，它的基本格式为：&lt;元素名 属性名=“属性值” 属性名=“属性值”&gt;;</p></li><li><p>有效的（valid）xml文档：首先xml文档是个格式正规的xml文档，然后又需要满足DTD的要求，这样的xml文档称为有效的xml文档。</p><a id="more"></a></li></ul><h3 id="2-web应用的组成部分"><a href="#2-web应用的组成部分" class="headerlink" title="2. web应用的组成部分"></a>2. web应用的组成部分</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    Web应用目录,eclipse-WebContent,idea-webapp --&gt; WEB-IN</span><br><span class="line">    subgraph </span><br><span class="line">    Web应用目录,eclipse-WebContent,idea-webapp --&gt; HTML/JSP/CSS/JS</span><br><span class="line">    end</span><br><span class="line">    subgraph </span><br><span class="line">    WEB-IN--&gt;web.xml</span><br><span class="line">    end</span><br><span class="line">    subgraph </span><br><span class="line">    WEB-IN--&gt;classes</span><br><span class="line">    end</span><br><span class="line">    subgraph </span><br><span class="line">    WEB-IN--&gt;lib</span><br><span class="line">    end</span><br><span class="line">    subgraph </span><br><span class="line">    classes--&gt; .Class文件/.xml/.properties配置文件</span><br><span class="line">    end</span><br><span class="line">    subgraph </span><br><span class="line">    web.xml--&gt; web应用的配置文件</span><br><span class="line">    end</span><br></pre></td></tr></table></figure><h3 id="3-web-xml文件的作用"><a href="#3-web-xml文件的作用" class="headerlink" title="3. web.xml文件的作用"></a>3. web.xml文件的作用</h3><p>web.xml文件是整个web应用中最重要的配置文件，它必须放在WEB-INF目录中。在web应用开发中，涉及到web资源的配置都是在web.xml中进行的。例如：</p><ul><li>将某个web资源设置为网站首页；</li><li>将servlet程序映射到某个url地址上；</li><li>为web应用配置监听器；</li><li>为web应用配置过滤器；</li><li>配置web应用上下文参数、配置Session的参数；</li><li>配置spring、springMVC等框架。</li></ul><h2 id="一-web-xml标签详解"><a href="#一-web-xml标签详解" class="headerlink" title="一. web.xml标签详解"></a>一. web.xml标签详解</h2><h3 id="1-xml文档有效检查"><a href="#1-xml文档有效检查" class="headerlink" title="1. xml文档有效检查"></a>1. xml文档有效检查</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是一般在写XML时所做的声明,定义了XML的版本,编码格式,还有重要的指明schema的来源,为<a href="http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd；schema是由Sum" target="_blank" rel="noopener">http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd；schema是由Sum</a> Microsystems公司(已被Oracle收购)定制的，Schema文件定义了web.xml所对应的xml中有多少种标签元素。</p><h3 id="2-指定欢迎页面或网站首页"><a href="#2-指定欢迎页面或网站首页" class="headerlink" title="2. 指定欢迎页面或网站首页"></a>2. 指定欢迎页面或网站首页</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index1.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述例子指定两个欢迎页，从上到下的优先级顺序；若没有上述配置将默认找index.html作为欢迎页；若所有页面都不存在，将会提示<strong>The requested resource (/XXX) is not available。</strong></p><h3 id="3-指定错误处理页面"><a href="#3-指定错误处理页面" class="headerlink" title="3. 指定错误处理页面"></a>3. 指定错误处理页面</h3><ul><li><p>通过错误码指定错误处理页面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error404.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过异常类型指定错误处理页面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exception-type</span>&gt;</span>java.lang.Exception<span class="tag">&lt;<span class="name">exception-type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/exception.jsp<span class="tag">&lt;<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">exception-type</span>&gt;</span>java.lang.NullException<span class="tag">&lt;/<span class="name">exception-type</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-lt-context-param-gt-lt-context-param-gt"><a href="#4-lt-context-param-gt-lt-context-param-gt" class="headerlink" title="4.  &lt;context-param&gt;&lt;/context-param&gt;"></a>4.  &lt;context-param&gt;&lt;/context-param&gt;</h3><p>设定上下文初始化参数：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>param_name<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>param_value<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此所设定的参数,在JSP网页中可以使用下列方法来取得:${initParam.param_name}；若在Servlet可以使用下列方法来获得:String param_name=getServletContext().getInitParamter(“param_name”)。</p><h3 id="5-lt-session-config-gt-lt-session-config-gt"><a href="#5-lt-session-config-gt-lt-session-config-gt" class="headerlink" title="5.  &lt;session-config&gt;&lt;/session-config&gt;"></a>5.  <strong>&lt;session-config&gt;&lt;/session-config&gt;</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Set timeout to 120 minutes --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span>   </span><br><span class="line">   <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>120<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&lt;session-config&gt; 用于设置容器的session参数，比如：&lt;session-timeout&gt; 用于指定http session的失效时间。默认时间设置在&lt;jakarta&gt;/conf/web.xml (30 minutes)。&lt;session-timeout&gt;用来指定默认的会话超时时间间隔，以分钟为单位。该元素值必须为整数。如果 session-timeout元素的值为零或负数，则表示会话将永远不会超时。</p><h3 id="6-设置过滤器"><a href="#6-设置过滤器" class="headerlink" title="6. 设置过滤器"></a>6. 设置过滤器</h3><p>如下述设置一个编码过滤器，过滤所有资源：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">description</span>&gt;</span>char encoding filter<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Filter可认为是Servlet的“增强版”，主要用于对用户请求request进行预处理，也可以对Response进行后处理，是个典型的处理链；因此Filter配置与Servlet的配置非常相似，需要配置两部分：配置Filter名称和Filter拦截器URL模式。区别在于Servlet通常只配置一个URL，而Filter可以同时配置多个请求的URL。</p><p>Filter的常用应用场合有：编码器Filter、认证Filter、图片转换Filter、数据压缩Filter、密码Filter、日志和审核Filter等。Filter必须实现javax.servlet.Filter接口，在该接口中定义了三个方法：void init(FilterConfig config)、void destroy()、void doFilter(ServletRequest request,ServletResponse response,FilterChain chain)。</p><h3 id="7-设置监听器"><a href="#7-设置监听器" class="headerlink" title="7. 设置监听器"></a>7. 设置监听器</h3><p>配置Listener只要向Web应用注册Listener实现类即可，无需配置参数之类的东西，因为Listener获取的是Web应用ServletContext（application）的配置参数。为Web应用配置Listener的两种方式：1.使用@WebListener修饰Listener实现类即可，2. 在web.xml文档中使用<listener>进行配置：</listener></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>监听器类的完整路径<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-Servlet命名与定制URL"><a href="#8-Servlet命名与定制URL" class="headerlink" title="8. Servlet命名与定制URL"></a>8. Servlet命名与定制URL</h3><p>Servlet是个特殊的java类，继承于<strong>HttpServlet</strong>。客户端通常只有GET和POST两种请求方式，Servlet为了响应则两种请求，必须重写doGet()和doPost()方法。大部分时候，Servlet对于所有的请求响应都是完全一样的，此时只需要重写service()方法即可响应客户端的所有请求。</p><p>如下述Spring DispatcherServlet在web.xml中的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring view分发器  对所有的请求都由business对应的类来控制转发 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>business<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>publishContext<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p><servlet>标签存在如下元素标签：</servlet></p><ul><li><p>&lt;description&gt;：为Servlet指定一个文本描述。</p></li><li><p>&lt;display-name&gt;：为Servlet提供一个简短的名字被某些工具显示。</p></li><li><p>&lt;icon&gt;：为Servlet指定一个图标，在图形管理工具中表示该Servlet。</p></li><li>&lt;servlet-name&gt;用来定义servlet的名称，该名称在整个应用中必须是惟一的。</li><li>&lt;servlet-class&gt;用来指定servlet的完全限定的名称。</li><li>&lt;jsp-file&gt;用来指定应用中JSP文件的完整路径。这个完整路径必须由/开始。</li><li><strong>&lt;load-on-startup&gt;</strong>：如果load-on-startup元素存在，而且也指定了jsp-file元素，则JSP文件会被重新编译成Servlet，同时产生的Servlet也被载入内存。<load-on-startup>的内容可以为空，或者是一个整数。这个值表示由Web容器载入内存的顺序。</load-on-startup></li><li><strong>&lt;servlet-mapping&gt;</strong><ul><li>&lt;servlet-name&gt;：Servlet的名字，唯一性和一致性，与<servlet>元素中声明的名字一致。</servlet></li><li>&lt;url-pattern&gt;：指定相对于Servlet的URL的路径。该路径相对于web应用程序上下文的根路径。&lt;servlet-mapping&gt;将URL模式映射到某个Servlet，即该Servlet处理的URL。</li></ul></li></ul><h2 id="二-Spring的web-xml配置"><a href="#二-Spring的web-xml配置" class="headerlink" title="二. Spring的web.xml配置"></a>二. Spring的web.xml配置</h2><p>集成Web环境的通用配置（加载Spring容器）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 启用spring容器环境上下文监听 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三-SpringMVC的web-xml配置"><a href="#三-SpringMVC的web-xml配置" class="headerlink" title="三. SpringMVC的web.xml配置"></a>三. SpringMVC的web.xml配置</h2><p>SpringMVC中的DispatcherServlet是前置控制器，配置在web.xml文件中的。拦截匹配的请求，Servlet拦截匹配规则要自已定义，把拦截下来的请求，依据某某规则分发到目标Controller(我们写的Action)来处理。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:servlet-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四-web-xml的加载顺序"><a href="#四-web-xml的加载顺序" class="headerlink" title="四. web.xml的加载顺序"></a>四. web.xml的加载顺序</h2><p>web.xml 的加载顺序是：ServletContext -&gt; context-param -&gt; listener -&gt; filter -&gt; servlet ，而同个类型之间的实际程序调用的时候的顺序是根据对应的 mapping 的顺序进行调用的。</p><h2 id="附件（完整版SpringMVC的web-xml配置）："><a href="#附件（完整版SpringMVC的web-xml配置）：" class="headerlink" title="附件（完整版SpringMVC的web.xml配置）："></a>附件（完整版SpringMVC的web.xml配置）：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  </span><br><span class="line">&lt;web-app version=&quot;3.0&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;  </span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  </span><br><span class="line">         xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;&gt;  </span><br><span class="line"></span><br><span class="line">    &lt;!-- 设置编码过滤器，utf-8--&gt;  </span><br><span class="line">    &lt;filter&gt;  </span><br><span class="line">        &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;  </span><br><span class="line">        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;  </span><br><span class="line">        &lt;init-param&gt;  </span><br><span class="line">            &lt;param-name&gt;encoding&lt;/param-name&gt;  </span><br><span class="line">            &lt;param-value&gt;UTF-8&lt;/param-value&gt;  </span><br><span class="line">        &lt;/init-param&gt;  </span><br><span class="line">        &lt;init-param&gt;  </span><br><span class="line">            &lt;param-name&gt;forceEncoding&lt;/param-name&gt;  </span><br><span class="line">            &lt;param-value&gt;true&lt;/param-value&gt;  </span><br><span class="line">        &lt;/init-param&gt;  </span><br><span class="line">    &lt;/filter&gt;  </span><br><span class="line">    &lt;filter-mapping&gt;  </span><br><span class="line">        &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;  </span><br><span class="line">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  </span><br><span class="line">    &lt;/filter-mapping&gt;  </span><br><span class="line">    &lt;!-- 项目中使用Spring 时，applicationContext.xml配置文件中并没有BeanFactory，要想在业务层中的class 文件中直接引用Spring容器管理的bean可通过以下方式--&gt;  </span><br><span class="line">    &lt;!--1、在web.xml配置监听器ContextLoaderListener--&gt;  </span><br><span class="line">    &lt;!--ContextLoaderListener的作用就是启动Web容器时，自动装配ApplicationContext的配置信息。因为它实现了ServletContextListener这个接口，在web.xml配置这个监听器，启动容器时，就会默认执行它实现的方法 --&gt;  </span><br><span class="line">    &lt;listener&gt;  </span><br><span class="line">        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;  </span><br><span class="line">    &lt;/listener&gt;  </span><br><span class="line">    &lt;!--2、部署applicationContext的xml文件--&gt;  </span><br><span class="line">    &lt;context-param&gt;  </span><br><span class="line">        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;  </span><br><span class="line">        &lt;param-value&gt;classpath:spring/applicationContext.xml&lt;/param-value&gt;  </span><br><span class="line">    &lt;/context-param&gt;  </span><br><span class="line"></span><br><span class="line">    &lt;!--如果你的DispatcherServlet拦截&quot;/&quot;，为了实现REST风格，拦截了所有的请求，那么同时对*.js,*.jpg等静态文件的访问也就被拦截了。要写在DispatcherServlet的前面， 让 defaultServlet先拦截请求--&gt; </span><br><span class="line">    &lt;servlet-mapping&gt;  </span><br><span class="line">        &lt;servlet-name&gt;default&lt;/servlet-name&gt;  </span><br><span class="line">        &lt;url-pattern&gt;*.css&lt;/url-pattern&gt;  </span><br><span class="line">    &lt;/servlet-mapping&gt;  </span><br><span class="line">    &lt;servlet-mapping&gt;  </span><br><span class="line">        &lt;servlet-name&gt;default&lt;/servlet-name&gt;  </span><br><span class="line">        &lt;url-pattern&gt;*.swf&lt;/url-pattern&gt;  </span><br><span class="line">    &lt;/servlet-mapping&gt;  </span><br><span class="line">    &lt;servlet-mapping&gt;  </span><br><span class="line">        &lt;servlet-name&gt;default&lt;/servlet-name&gt;  </span><br><span class="line">        &lt;url-pattern&gt;*.gif&lt;/url-pattern&gt;  </span><br><span class="line">    &lt;/servlet-mapping&gt;  </span><br><span class="line">    &lt;servlet-mapping&gt;  </span><br><span class="line">        &lt;servlet-name&gt;default&lt;/servlet-name&gt;  </span><br><span class="line">        &lt;url-pattern&gt;*.jpg&lt;/url-pattern&gt;  </span><br><span class="line">    &lt;/servlet-mapping&gt;  </span><br><span class="line">    &lt;servlet-mapping&gt;  </span><br><span class="line">        &lt;servlet-name&gt;default&lt;/servlet-name&gt;  </span><br><span class="line">        &lt;url-pattern&gt;*.png&lt;/url-pattern&gt;  </span><br><span class="line">    &lt;/servlet-mapping&gt;  </span><br><span class="line">    &lt;servlet-mapping&gt;  </span><br><span class="line">        &lt;servlet-name&gt;default&lt;/servlet-name&gt;  </span><br><span class="line">        &lt;url-pattern&gt;*.js&lt;/url-pattern&gt;  </span><br><span class="line">    &lt;/servlet-mapping&gt;  </span><br><span class="line">    &lt;servlet-mapping&gt;  </span><br><span class="line">        &lt;servlet-name&gt;default&lt;/servlet-name&gt;  </span><br><span class="line">        &lt;url-pattern&gt;*.html&lt;/url-pattern&gt;  </span><br><span class="line">    &lt;/servlet-mapping&gt;  </span><br><span class="line">    &lt;servlet-mapping&gt;  </span><br><span class="line">        &lt;servlet-name&gt;default&lt;/servlet-name&gt;  </span><br><span class="line">        &lt;url-pattern&gt;*.xml&lt;/url-pattern&gt;  </span><br><span class="line">    &lt;/servlet-mapping&gt;  </span><br><span class="line">    &lt;servlet-mapping&gt;  </span><br><span class="line">        &lt;servlet-name&gt;default&lt;/servlet-name&gt;  </span><br><span class="line">        &lt;url-pattern&gt;*.json&lt;/url-pattern&gt;  </span><br><span class="line">    &lt;/servlet-mapping&gt;  </span><br><span class="line">    &lt;servlet-mapping&gt;  </span><br><span class="line">        &lt;servlet-name&gt;default&lt;/servlet-name&gt;  </span><br><span class="line">        &lt;url-pattern&gt;*.map&lt;/url-pattern&gt;  </span><br><span class="line">    &lt;/servlet-mapping&gt;  </span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; </span><br><span class="line">        &lt;init-param&gt;  </span><br><span class="line">            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;  </span><br><span class="line">            &lt;param-value&gt;classpath:spring/dispatcher-servlet.xml&lt;/param-value&gt;  </span><br><span class="line">        &lt;/init-param&gt;  </span><br><span class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;&lt;!--是启动顺序，让这个Servlet随Servletp容器一起启动。--&gt;  </span><br><span class="line">    &lt;/servlet&gt;  </span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;   </span><br><span class="line">        &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;!--会拦截URL中带“/”的请求。--&gt;  </span><br><span class="line">    &lt;/servlet-mapping&gt;  </span><br><span class="line"></span><br><span class="line">    &lt;welcome-file-list&gt;&lt;!--指定欢迎页面--&gt;  </span><br><span class="line">        &lt;welcome-file&gt;login.html&lt;/welcome-file&gt;  </span><br><span class="line">    &lt;/welcome-file-list&gt;  </span><br><span class="line">    &lt;error-page&gt; &lt;!--当系统出现404错误，跳转到页面nopage.html--&gt;  </span><br><span class="line">        &lt;error-code&gt;404&lt;/error-code&gt;  </span><br><span class="line">        &lt;location&gt;/nopage.html&lt;/location&gt;  </span><br><span class="line">    &lt;/error-page&gt;  </span><br><span class="line">    &lt;error-page&gt; &lt;!--当系统出现java.lang.NullPointerException，跳转到页面error.html--&gt;  </span><br><span class="line">        &lt;exception-type&gt;java.lang.NullPointerException&lt;/exception-type&gt;  </span><br><span class="line">        &lt;location&gt;/error.html&lt;/location&gt;  </span><br><span class="line">    &lt;/error-page&gt;  </span><br><span class="line">    &lt;session-config&gt;&lt;!--会话超时配置，单位分钟--&gt;  </span><br><span class="line">        &lt;session-timeout&gt;360&lt;/session-timeout&gt;  </span><br><span class="line">    &lt;/session-config&gt;  </span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h3 id=&quot;1-xml文件&quot;&gt;&lt;a href=&quot;#1-xml文件&quot; class=&quot;headerlink&quot; title=&quot;1. xml文件&quot;&gt;&lt;/a&gt;1. xml文件&lt;/h3&gt;&lt;p&gt;xml文件：Extentsible Markup Language即可扩展标记语言，是用来定义其它语言的一种元语言，其前身是SGML(标准通用标记语言)。xml文件是互联网数据传输的重要工具，因为不受编程语言和操作系统的限制，所以可以跨越互联网的任何平台，非常适合Web传输。XML提供统一的方法来描述和交换独立于应用程序或供应商的结构化数据。我们都知道xml文件的一些规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;xml声明一般是xml文档的第一行：\&amp;lt;?xml version=”1.0” encoding=”UTF-8”?&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;xml必须有且只有一个根节点，对大小写敏感，标签成对出现，标签不嵌套，但内部元素需要正确嵌套；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;属性值用双引号包裹；一个元素可以有多个属性，它的基本格式为：&amp;lt;元素名 属性名=“属性值” 属性名=“属性值”&amp;gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有效的（valid）xml文档：首先xml文档是个格式正规的xml文档，然后又需要满足DTD的要求，这样的xml文档称为有效的xml文档。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Bean基础</title>
    <link href="http://yoursite.com/2015/10/28/md_Spring%E6%80%BB%E7%BB%93/Spring%20Bean%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2015/10/28/md_Spring总结/Spring Bean基础/</id>
    <published>2015-10-28T03:01:45.000Z</published>
    <updated>2018-12-30T12:39:46.494Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Spring-Bean引用例子"><a href="#一、Spring-Bean引用例子" class="headerlink" title="一、Spring Bean引用例子"></a>一、Spring Bean引用例子</h2><h3 id="1-Bean在不同的XML-文件"><a href="#1-Bean在不同的XML-文件" class="headerlink" title="1. Bean在不同的XML 文件"></a>1. Bean在不同的XML 文件</h3><p>如果实在不同的XML配置文件中的Bean，可以用一个<ref>标签，“bean”属性引用它：</ref></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"OutputHelper"</span> <span class="attr">class</span>=<span class="string">"com.myprj.output.OutputHelper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"outputGenerator"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"CsvOutputGenerator"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-在同一个XML文件中的Bean"><a href="#2-在同一个XML文件中的Bean" class="headerlink" title="2. 在同一个XML文件中的Bean"></a>2. 在同一个XML文件中的Bean</h3><p>如果引用在同一个XML文件中的bean，你可以用 ‘ref’ 标签，“local”属性引用它，使用时常省略。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">local</span>=<span class="string">"someBean"</span>/&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="二、如何注入值到Spring-Bean属性"><a href="#二、如何注入值到Spring-Bean属性" class="headerlink" title="二、如何注入值到Spring Bean属性"></a>二、如何注入值到Spring Bean属性</h2><p>在Spring中，有三种方式将值注入到Bean的属性：</p><ul><li>正常方式</li><li>快速方式</li><li>“p”模式方式</li></ul><p>如下一个简单的Java类，包含两个数属性：name和type，稍后使用Spring注入值到这个Bean的属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myprj.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileNameGenerator</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.type = type;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-正常方式"><a href="#1-正常方式" class="headerlink" title="1.  正常方式"></a>1.  正常方式</h4><p>在<property>标签中的<value>标签中赋值：</value></property></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"FileNameGenerator"</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.FileNameGenerator"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>myprj<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"type"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>txt<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-快速方式"><a href="#2-快速方式" class="headerlink" title="2.  快速方式"></a>2.  快速方式</h4><p>在<property>标签中的“value”属性赋值：</property></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"FileNameGenerator"</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.FileNameGenerator"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"myprj"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"type"</span> <span class="attr">value</span>=<span class="string">"txt"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-“p”模式方式"><a href="#3-“p”模式方式" class="headerlink" title="3.  “p”模式方式"></a>3.  “p”模式方式</h4><p>通过<bean>标签中p模式赋值：</bean></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//...</span><br><span class="line">xmlns:p="http://www.springframework.org/schema/p"</span><br><span class="line">//...</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"FileNameGenerator"</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.FileNameGenerator"</span>           <span class="attr">p:name</span>=<span class="string">"myprj"</span> <span class="attr">p:type</span>=<span class="string">"txt"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、Spring-Bean加载多个配置文件"><a href="#三、Spring-Bean加载多个配置文件" class="headerlink" title="三、Spring Bean加载多个配置文件"></a>三、Spring Bean加载多个配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span></span></span><br><span class="line"><span class="tag">       //<span class="attr">...</span></span></span><br><span class="line">&lt;import resource="common/Spring-Common.xml"/&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"connection/Spring-Connection.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"moduleA/Spring-ModuleA.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、Spring-内部Bean实例"><a href="#四、Spring-内部Bean实例" class="headerlink" title="四、Spring 内部Bean实例"></a>四、Spring 内部Bean实例</h2><p>在Spring框架中，一个bean仅用于一个特定的属性，这是提醒其声明为一个内部bean。内部bean支持setter注入“property”和构造器注入”constructor-arg“。</p><p>如下几种方式将达到同样的效果：</p><ol><li><p>使用 <property>标签和“ref”属性：</property></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"CustomerBean"</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.Customer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"person"</span> <span class="attr">ref</span>=<span class="string">"PersonBean"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"PersonBean"</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"myprj"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"address1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"28"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用内部Bean方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"CustomerBean"</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.Customer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"myprj"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"address1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"28"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>内部 bean 也支持构造器注入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"CustomerBean"</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.Customer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"myprj"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"address1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"28"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="五、Spring-Bean作用域实例"><a href="#五、Spring-Bean作用域实例" class="headerlink" title="五、Spring Bean作用域实例"></a>五、Spring Bean作用域实例</h2><p>在Spring中，Bean作用域用来确定那种类型的Bena实例应该被Spring的容器返回给调用者。Spring Bean支持的5种作用域：</p><ul><li>单例——每个Spring IoC容器返回一个Bean实例；</li><li>原型——每次请求时返回一个新的Bean实例；</li><li>请求——返回每个HTTP请求的一个Bean实例；</li><li>会话——返回每个HTTP会话的一个Bean实例；</li><li>全局会话——返回全局HTTP会话的一个Bean实例。</li></ul><p>在大多数情况下，可能只处理了 Spring 的核心作用域 - 单例和原型，默认作用域是单例。</p><p>这里有一个例子来说明，bean的作用域单例和原型之间的不同：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myprj.customer.services;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerService</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">String message;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.message = message;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-单例实例"><a href="#1-单例实例" class="headerlink" title="1.  单例实例"></a>1.  单例实例</h3><p>如果Bean配置文件中没有指定Bean的范围，默认为单例；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"com.myprj.customer.services.CustomerService"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myprj.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.myprj.customer.services.CustomerService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    ApplicationContext context = </span><br><span class="line">     <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="keyword">new</span> String[] &#123;<span class="string">"Spring-Customer.xml"</span>&#125;);</span><br><span class="line"></span><br><span class="line">    CustomerService custA = (CustomerService)context.getBean(<span class="string">"customerService"</span>);</span><br><span class="line">    custA.setMessage(<span class="string">"Message by custA"</span>);</span><br><span class="line">    System.out.println(<span class="string">"Message : "</span> + custA.getMessage());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//retrieve it again</span></span><br><span class="line">    CustomerService custB = (CustomerService)context.getBean(<span class="string">"customerService"</span>);</span><br><span class="line">    System.out.println(<span class="string">"Message : "</span> + custB.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Message : Message by custA</span><br><span class="line">Message : Message by custA</span><br></pre></td></tr></table></figure><p>在单例中，每个Spring IoC容器只有一个实例，无论多少次调用getBean()方法获取它，总是返回同一个实例。</p><h3 id="2-原型实例"><a href="#2-原型实例" class="headerlink" title="2.  原型实例"></a>2.  原型实例</h3><p>如果每次获取Bean对象时需要一个新的Bean实例，需要在bean配置中添加“scope”属性，值为“prototype”（原型）。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.myprj.customer.services.CustomerService"</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">scope</span>=<span class="string">"prototype"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行代码并执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Message : Message by custA</span><br><span class="line">Message : null</span><br></pre></td></tr></table></figure><h3 id="3-Bean作用域注解"><a href="#3-Bean作用域注解" class="headerlink" title="3.  Bean作用域注解"></a>3.  Bean作用域注解</h3><p>在此之前在XML配置文件中启用自动组件扫描：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.myprj.customer"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>使用注解定义Bean的作用域：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myprj.customer.services;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Scope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerService</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">String message;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.message = message;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、Spring集合（List、Set、Map、Properties）实例"><a href="#六、Spring集合（List、Set、Map、Properties）实例" class="headerlink" title="六、Spring集合（List、Set、Map、Properties）实例"></a>六、Spring集合（List、Set、Map、Properties）实例</h2><p>以下例子将展示Spring如何注入值到集合中。</p><p>Spring Beans:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myprj.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line"><span class="keyword">private</span> Set&lt;Object&gt; sets;</span><br><span class="line"><span class="keyword">private</span> Map&lt;Object, Object&gt; maps;</span><br><span class="line"><span class="keyword">private</span> Properties pros;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-List示例"><a href="#1-List示例" class="headerlink" title="1.  List示例"></a>1.  List示例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lists"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"PersonBean"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"myprjList"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"Hainan"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"28"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-Set示例"><a href="#2-Set示例" class="headerlink" title="2.  Set示例"></a>2.  Set示例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sets"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"PersonBean"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"myprjSet"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"Hainan"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"28"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-Map示例"><a href="#3-Map示例" class="headerlink" title="3.  Map示例"></a>3.  Map示例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maps"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"Key 1"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"Key 2"</span> <span class="attr">value-ref</span>=<span class="string">"PersonBean"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"Key 3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"myprjMap"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"Hainan"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"28"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-Properties示例"><a href="#4-Properties示例" class="headerlink" title="4.  Properties示例"></a>4.  Properties示例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pros"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"admin"</span>&gt;</span>admin@myprj.com<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"support"</span>&gt;</span>support@myprj.com<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="七、Spring注入日期到Bean属性"><a href="#七、Spring注入日期到Bean属性" class="headerlink" title="七、Spring注入日期到Bean属性"></a>七、Spring注入日期到Bean属性</h2><p>当我们有个Bean属性需要注入时间日期时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myprj.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Date date;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.date = date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Customer [date="</span> + date + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的如下配置将会出现错误：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.Customer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"date"</span> <span class="attr">value</span>=<span class="string">"2015-12-31"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解决办法：在Spring中可以通过两种方式注入时间日期：</p><h3 id="1-Factory-Bean"><a href="#1-Factory-Bean" class="headerlink" title="1.  Factory Bean"></a>1.  Factory Bean</h3><p>声明一个dateFormat工厂Bean，该工厂实例为SimpleDateFormat类型，传入时间日期格式字符串构造对象；在“customer”Bean中引入dateFormat Bean，并调用parse()方法将字符串转换为Date对象：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dateFormat"</span> <span class="attr">class</span>=<span class="string">"java.text.SimpleDateFormat"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"yyyy-MM-dd"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.Customer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"date"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">factory-bean</span>=<span class="string">"dateFormat"</span> <span class="attr">factory-method</span>=<span class="string">"parse"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"2018-12-31"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-CustomDateEditor"><a href="#2-CustomDateEditor" class="headerlink" title="2.  CustomDateEditor"></a>2.  CustomDateEditor</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--声明一个 CustomDateEditor 类将字符串转换成 java.util.Date--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dateEditor"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.beans.propertyeditors.CustomDateEditor"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"java.text.SimpleDateFormat"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"yyyy-MM-dd"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--并声明另一个“CustomEditorConfigurer”，使用Spring转换 bean 属性，其类型为java.util.Date--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.CustomEditorConfigurer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customEditors"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"java.util.Date"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">local</span>=<span class="string">"dateEditor"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.Customer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"date"</span> <span class="attr">value</span>=<span class="string">"2018-12-31"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="八、Spring-PropertyPlaceholderConfigurer实例"><a href="#八、Spring-PropertyPlaceholderConfigurer实例" class="headerlink" title="八、Spring PropertyPlaceholderConfigurer实例"></a>八、Spring PropertyPlaceholderConfigurer实例</h2><p>有些时候Spring开发人员会把项目的部署信息（数据库连接信息、日志文件的路径）写在XML bean配置文件中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerSimpleDAO"</span> <span class="attr">class</span>=<span class="string">"com.myprj.customer.dao.impl.SimpleJdbcCustomerDAO"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/myprjjava"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是，在实际企业环境下，项目部署信息不会出现在bean配置文件中，而是配置在一个单独的文件，如properties文件；</p><h3 id="PropertyPlaceholderConfigurer示例"><a href="#PropertyPlaceholderConfigurer示例" class="headerlink" title="PropertyPlaceholderConfigurer示例"></a>PropertyPlaceholderConfigurer示例</h3><p>为了解决这个问题，可以使用 PropertyPlaceholderConfigurer 类通过一个特殊的格式在外部部署细节到一个属性(properties )文件，并在bean的配置文件中配置 ：${variable}。</p><p>创建一个属性文件(database.properties)，包含数据库的详细信息，把它放到你的项目类路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/myprj_db</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123456</span><br></pre></td></tr></table></figure><p>在bean配置文件中声明提供一个PropertyPlaceholderConfigurer映射到刚才创建的“database.properties”属性文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>database.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>于是可以如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="九、Spring的继承配置"><a href="#九、Spring的继承配置" class="headerlink" title="九、Spring的继承配置"></a>九、Spring的继承配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"BaseCustomerMalaysia"</span> <span class="attr">class</span>=<span class="string">"com.myprj.common.Customer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"country"</span> <span class="attr">value</span>=<span class="string">"Malaysia"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"CustomerBean"</span> <span class="attr">parent</span>=<span class="string">"BaseCustomerMalaysia"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"action"</span> <span class="attr">value</span>=<span class="string">"buy"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"type"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="十、Spring依赖检查"><a href="#十、Spring依赖检查" class="headerlink" title="十、Spring依赖检查"></a>十、Spring依赖检查</h2><p>在Spring中，可以使用依赖检查功能，以确保所要求的属性可设置或者注入。</p><p>4个依赖检查支持的模式：</p><ul><li>none – 没有依赖检查，这是默认的模式。</li><li>simple – 如果基本类型(int, long,double…)和集合类型(map, list..)的任何属性都没有设置，UnsatisfiedDependencyException将被抛出。</li><li>objects – 如果对象类型的任何属性都没有设置，UnsatisfiedDependencyException将被抛出。</li><li>all – 如果任何类型的任何属性都没有被设置，UnsatisfiedDependencyException将被抛出。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"xxxx"</span> <span class="attr">class</span>=<span class="string">"xxxxxr"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">dependency-check</span>=<span class="string">"simple"</span>&gt;</span></span><br><span class="line">//...</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"xxxx"</span> <span class="attr">class</span>=<span class="string">"xxxxxr"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">dependency-check</span>=<span class="string">"objects"</span>&gt;</span></span><br><span class="line">//...</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"xxxx"</span> <span class="attr">class</span>=<span class="string">"xxxxxr"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">dependency-check</span>=<span class="string">"all"</span>&gt;</span></span><br><span class="line">//...</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring使用-Required注解依赖检查"><a href="#Spring使用-Required注解依赖检查" class="headerlink" title="Spring使用@Required注解依赖检查"></a>Spring使用@Required注解依赖检查</h3><p>在使用之前需要在Bean配置中包含&lt;context:annotation-config /&gt;或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean </span><br><span class="line">class=&quot;org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor&quot;/&gt;</span><br></pre></td></tr></table></figure><p>@Required使用在 setter方法或属性上，以确保该属性被注入值。</p><h2 id="十一、Spring-Bean-InitializingBean和DisposableBean"><a href="#十一、Spring-Bean-InitializingBean和DisposableBean" class="headerlink" title="十一、Spring Bean InitializingBean和DisposableBean"></a>十一、Spring Bean InitializingBean和DisposableBean</h2><p>在Spring中，InitializingBean和DisposableBean是两个标记接口，为Spring执行时bean的初始化和销毁某些行为时的有用方法。</p><ol><li>对于Bean实现 InitializingBean，它将在所有的 bean 属性被设置之后运行 afterPropertiesSet()。</li><li>对于 Bean 实现了DisposableBean，它将在 Spring 容器释放该 bean 之后运行 destroy()。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、Spring-Bean引用例子&quot;&gt;&lt;a href=&quot;#一、Spring-Bean引用例子&quot; class=&quot;headerlink&quot; title=&quot;一、Spring Bean引用例子&quot;&gt;&lt;/a&gt;一、Spring Bean引用例子&lt;/h2&gt;&lt;h3 id=&quot;1-Bean在不同的XML-文件&quot;&gt;&lt;a href=&quot;#1-Bean在不同的XML-文件&quot; class=&quot;headerlink&quot; title=&quot;1. Bean在不同的XML 文件&quot;&gt;&lt;/a&gt;1. Bean在不同的XML 文件&lt;/h3&gt;&lt;p&gt;如果实在不同的XML配置文件中的Bean，可以用一个&lt;ref&gt;标签，“bean”属性引用它：&lt;/ref&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;OutputHelper&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.myprj.output.OutputHelper&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;outputGenerator&quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;bean&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;CsvOutputGenerator&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-在同一个XML文件中的Bean&quot;&gt;&lt;a href=&quot;#2-在同一个XML文件中的Bean&quot; class=&quot;headerlink&quot; title=&quot;2. 在同一个XML文件中的Bean&quot;&gt;&lt;/a&gt;2. 在同一个XML文件中的Bean&lt;/h3&gt;&lt;p&gt;如果引用在同一个XML文件中的bean，你可以用 ‘ref’ 标签，“local”属性引用它，使用时常省略。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;local&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;someBean&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Java面试练习与总结第二回（SpringMVC）</title>
    <link href="http://yoursite.com/2015/10/23/md_Java%E9%9D%A2%E8%AF%95%E7%BB%83%E4%B9%A0%E4%B8%8E%E6%80%BB%E7%BB%93/Java%E9%9D%A2%E8%AF%95%E7%BB%83%E4%B9%A0%E4%B8%8E%E6%80%BB%E7%BB%93%E7%AC%AC%E4%BA%8C%E5%9B%9E%EF%BC%88SpringMVC%EF%BC%89/"/>
    <id>http://yoursite.com/2015/10/23/md_Java面试练习与总结/Java面试练习与总结第二回（SpringMVC）/</id>
    <published>2015-10-23T03:01:45.000Z</published>
    <updated>2018-12-30T12:40:29.597Z</updated>
    
    <content type="html"><![CDATA[<p><strong>临近Java面试的练习与总结，范围可由JavaSE到数据库、Web前端再到JavaEE初级、各类框架、Linux系统等方面，包含知识点和疑难问题点，系列连载发文，可供求职者参阅。</strong></p><h2 id="1-MVC思想"><a href="#1-MVC思想" class="headerlink" title="1. MVC思想"></a>1. MVC思想</h2><h3 id="1-1-什么是MVC？"><a href="#1-1-什么是MVC？" class="headerlink" title="1.1 什么是MVC？"></a>1.1 什么是MVC？</h3><p>​    MVC（Model View Controller）,是模型（model）—视图（view）—控制器（controller）的缩写，是一种设计模式，也是一种解决问题的方法和思路， 它用一种将业务逻辑、数据、页面显示分离的方法组织代码，使得业务逻辑集聚到一个部件里面，在改进数据结构和个性化定制界面及用户交互的同时，不需要重写编写业务逻辑。</p><h3 id="1-2-为什么使用MVC？"><a href="#1-2-为什么使用MVC？" class="headerlink" title="1.2 为什么使用MVC？"></a>1.2 为什么使用MVC？</h3><p>使用MVC的目的是将Model和View的实现代码分离，从而使同一个程序可以使用不同的表现形式；指导开发者将数据与表现解耦，提高代码、特别是模型部分代码的复用性。</p><a id="more"></a><h3 id="1-3-MVC的结构"><a href="#1-3-MVC的结构" class="headerlink" title="1.3 MVC的结构"></a>1.3 MVC的结构</h3><h4 id="Ⅰ-视图"><a href="#Ⅰ-视图" class="headerlink" title="Ⅰ. 视图"></a>Ⅰ. 视图</h4><p>视图是用户看到并与之交互的界面（它可以包括一些可以显示数据信息的页面，或者展示形式。例如jsp，html，asp，php）。</p><h4 id="Ⅱ-模型"><a href="#Ⅱ-模型" class="headerlink" title="Ⅱ. 模型"></a>Ⅱ. 模型</h4><p>模型表示企业数据和业务规则（可以说就是后端接口，用于业务处理）。在MVC的三个部件中，模型拥有最多的处理任务。例如它可能用象EJBs和ColdFusion Components这样的构件对象来处理数据库。被模型返回的数据是中立的，就是说模型与数据格式无关，这样一个模型能为多个视图提供数据。由于应用于模型的代码只需写一次就可以被多个视图重用，所以减少了代码的重复性。 </p><h4 id="Ⅲ-控制器"><a href="#Ⅲ-控制器" class="headerlink" title="Ⅲ. 控制器"></a>Ⅲ. 控制器</h4><p>控制器接受用户的输入并调用模型和视图去完成用户的需求（接受客户发送的请求，根据请求调用所对应的接口，然后模型业务处理后返回的数据，由控制器决定调用那个View展示）。</p><h2 id="2-MVC框架"><a href="#2-MVC框架" class="headerlink" title="2. MVC框架"></a>2. MVC框架</h2><ol><li>MVC框架，它强制性的使应用程序输入、处理和输出分开。使用MVC应用程序被分成三个核心部件：模型、视图、控制器。它们各自处理自己的任务。由此可知，要使用MVC框架，则一定要遵守该框架的规则，它有它的强制性所在。聪明的读者一看就知道，它所使用的三个核心部件其实都是来自MVC模型。只不过在框架中让他们彼此更加独立了去处理各自的任务而已。</li><li>最典型的MVC就是JSP + servlet + javabean的模式。</li><li>视图：视图是用户看到并与之交互的界面。视图主要有元素HTML ，Adobe Flash，XHTML，XML/XSL,WML等一些标识语言和Web services。模型：模型表示企业数据和业务规则。控制器：控制器接受用户的输入并调用模型和视图去完成用户的需求，所以当单击Web页面中的超链接和发送HTML表单时，控制器本身不输出任何东西和做任何处理。它只是接收请求并决定调用哪个模型构件去处理请求，然后再确定用哪个视图来显示返回的数据。</li></ol><h2 id="3-SpringMVC框架"><a href="#3-SpringMVC框架" class="headerlink" title="3. SpringMVC框架"></a>3. SpringMVC框架</h2><h3 id="3-1-SpringMVC框架简介"><a href="#3-1-SpringMVC框架简介" class="headerlink" title="3.1 SpringMVC框架简介"></a>3.1 SpringMVC框架简介</h3><ul><li>SpringMVC是一种基于Java，实现了Web MVC设计模式，请求驱动类型的轻量级Web框架，即使用了MVC架构模式的思想，将Web层进行职责解耦。基于请求驱动指的就是使用请求-响应模型，框架的目的就是帮助我们简化开发，SpringMVC也是要简化我们日常Web开发。</li><li>Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。</li><li>Spring的MVC框架主要由DispatcherServlet、处理器映射、处理器(控制器)、视图解析器、视图组成。</li></ul><h3 id="3-2-SpringMVC原理图"><a href="#3-2-SpringMVC原理图" class="headerlink" title="3.2 SpringMVC原理图"></a>3.2 SpringMVC原理图</h3><p><img src="https://img-blog.csdn.net/20180327202052220?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3E5ODIxNTE3NTY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><ul><li>第一步：发起请求到前端控制器(DispatcherServlet) </li><li>第二步：前端控制器请求HandlerMapping查找 Handler，可以根据xml配置、注解进行查找</li><li>第三步：处理器映射器HandlerMapping向前端控制器返回Handler </li><li>第四步：前端控制器调用处理器适配器去执行Handler </li><li>第五步：处理器适配器去执行Handler </li><li>第六步：Handler执行完成给适配器返回ModelAndView </li><li>第七步：处理器适配器向前端控制器返回ModelAndView，ModelAndView是springmvc框架的一个底层对象，包括Model和View </li><li>第八步：前端控制器请求视图解析器去进行视图解析，根据逻辑视图名解析成真正的视图(jsp) </li><li>第九步：视图解析器向前端控制器返回View </li><li>第十步：前端控制器进行视图渲染，视图渲染将模型数据(在ModelAndView对象中)填充到request域 </li><li>第十一步：前端控制器向用户响应结果</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;临近Java面试的练习与总结，范围可由JavaSE到数据库、Web前端再到JavaEE初级、各类框架、Linux系统等方面，包含知识点和疑难问题点，系列连载发文，可供求职者参阅。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-MVC思想&quot;&gt;&lt;a href=&quot;#1-MVC思想&quot; class=&quot;headerlink&quot; title=&quot;1. MVC思想&quot;&gt;&lt;/a&gt;1. MVC思想&lt;/h2&gt;&lt;h3 id=&quot;1-1-什么是MVC？&quot;&gt;&lt;a href=&quot;#1-1-什么是MVC？&quot; class=&quot;headerlink&quot; title=&quot;1.1 什么是MVC？&quot;&gt;&lt;/a&gt;1.1 什么是MVC？&lt;/h3&gt;&lt;p&gt;​    MVC（Model View Controller）,是模型（model）—视图（view）—控制器（controller）的缩写，是一种设计模式，也是一种解决问题的方法和思路， 它用一种将业务逻辑、数据、页面显示分离的方法组织代码，使得业务逻辑集聚到一个部件里面，在改进数据结构和个性化定制界面及用户交互的同时，不需要重写编写业务逻辑。&lt;/p&gt;
&lt;h3 id=&quot;1-2-为什么使用MVC？&quot;&gt;&lt;a href=&quot;#1-2-为什么使用MVC？&quot; class=&quot;headerlink&quot; title=&quot;1.2 为什么使用MVC？&quot;&gt;&lt;/a&gt;1.2 为什么使用MVC？&lt;/h3&gt;&lt;p&gt;使用MVC的目的是将Model和View的实现代码分离，从而使同一个程序可以使用不同的表现形式；指导开发者将数据与表现解耦，提高代码、特别是模型部分代码的复用性。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java面试练习与总结" scheme="http://yoursite.com/tags/Java%E9%9D%A2%E8%AF%95%E7%BB%83%E4%B9%A0%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
</feed>
